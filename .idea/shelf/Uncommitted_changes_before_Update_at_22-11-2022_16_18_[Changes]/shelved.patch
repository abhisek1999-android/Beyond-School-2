Index: app/src/main/java/com/maths/beyond_school_280720220930/utils/UtilityFunctions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.maths.beyond_school_280720220930.utils;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.app.PendingIntent;\r\nimport android.content.ContentUris;\r\nimport android.content.ContentValues;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.database.Cursor;\r\nimport android.graphics.Color;\r\nimport android.graphics.drawable.Drawable;\r\nimport android.media.AudioManager;\r\nimport android.media.MediaPlayer;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.NetworkInfo;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.Looper;\r\nimport android.os.Parcelable;\r\nimport android.provider.CalendarContract;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.view.Window;\r\nimport android.view.WindowManager;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.LayoutRes;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.sqlite.db.SimpleSQLiteQuery;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.DataSource;\r\nimport com.bumptech.glide.load.engine.GlideException;\r\nimport com.bumptech.glide.request.target.Target;\r\nimport com.github.twocoffeesoneteam.glidetovectoryou.GlideToVectorYou;\r\nimport com.github.twocoffeesoneteam.glidetovectoryou.GlideToVectorYouListener;\r\nimport com.google.android.material.textfield.TextInputLayout;\r\nimport com.google.firebase.analytics.FirebaseAnalytics;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.maths.beyond_school_280720220930.PaymentActivity;\r\nimport com.maths.beyond_school_280720220930.R;\r\nimport com.maths.beyond_school_280720220930.SP.PrefConfig;\r\nimport com.maths.beyond_school_280720220930.database.english.grammer.model.GrammarModel;\r\nimport com.maths.beyond_school_280720220930.database.english.vocabulary.model.VocabularyCategoryModel;\r\nimport com.maths.beyond_school_280720220930.database.grade_tables.GradeData;\r\nimport com.maths.beyond_school_280720220930.database.grade_tables.GradeDatabase;\r\nimport com.maths.beyond_school_280720220930.database.grade_tables.Grades_data;\r\nimport com.maths.beyond_school_280720220930.database.log.LogDatabase;\r\nimport com.maths.beyond_school_280720220930.database.log.LogEntity;\r\nimport com.maths.beyond_school_280720220930.database.process.ProgressDataBase;\r\nimport com.maths.beyond_school_280720220930.database.process.ProgressM;\r\nimport com.maths.beyond_school_280720220930.dialogs.HintDialog;\r\nimport com.maths.beyond_school_280720220930.firebase.CallFirebaseForInfo;\r\nimport com.maths.beyond_school_280720220930.fragments.EnglishFragment;\r\nimport com.maths.beyond_school_280720220930.payments.FetchSubscriptionStatus;\r\nimport com.razorpay.Subscription;\r\n\r\nimport java.text.DateFormat;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.time.Duration;\r\nimport java.time.LocalDate;\r\nimport java.time.Period;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Random;\r\nimport java.util.TimeZone;\r\nimport java.util.concurrent.ExecutionException;\r\nimport java.util.stream.Collectors;\r\n\r\npublic final class UtilityFunctions {\r\n\r\n    //    Ayaan's Code\r\n\r\n    // Extension Function To load image in imageview Using Glide Library\r\n    public static void loadImage(String url, android.widget.ImageView imageView) {\r\n        Glide.with(imageView.getContext())\r\n                .load(url)\r\n                .error(R.drawable.cartoon_image_1)\r\n                .into(imageView);\r\n    }\r\n\r\n    public static void loadImagePng(String url, android.widget.ImageView imageView, View progress) {\r\n        Glide.with(imageView.getContext())\r\n                .load(url)\r\n                .listener(new com.bumptech.glide.request.RequestListener<>() {\r\n                    @Override\r\n                    public boolean onLoadFailed(@Nullable GlideException e, Object model, Target<Drawable> target, boolean isFirstResource) {\r\n                        progress.setVisibility(View.GONE);\r\n                        return false;\r\n                    }\r\n\r\n                    @Override\r\n                    public boolean onResourceReady(Drawable resource, Object model, Target<Drawable> target, DataSource dataSource, boolean isFirstResource) {\r\n                        progress.setVisibility(View.GONE);\r\n                        return false;\r\n                    }\r\n                })\r\n                .error(R.drawable.cartoon_image_1)\r\n                .into(imageView);\r\n    }\r\n\r\n    // Function to check weather device publisher is Samsung or not\r\n    public static boolean isSamsungDevice() {\r\n        return Build.MANUFACTURER.equalsIgnoreCase(\"samsung\");\r\n    }\r\n\r\n    public static boolean intToBoolean(int i) {\r\n        return i != 0;\r\n    }\r\n\r\n    public static void loadImageSvg(String url, android.widget.ImageView imageView, View progress) {\r\n        try {\r\n            GlideToVectorYou\r\n                    .init()\r\n                    .with(imageView.getContext())\r\n                    .withListener(new GlideToVectorYouListener() {\r\n                        @Override\r\n                        public void onLoadFailed() {\r\n                            progress.setVisibility(View.GONE);\r\n                        }\r\n\r\n                        @Override\r\n                        public void onResourceReady() {\r\n                            progress.setVisibility(View.GONE);\r\n                        }\r\n                    })\r\n                    .load(Uri.parse(url), imageView);\r\n        } catch (Exception e) {\r\n\r\n            Log.d(\"XXX\", \"loadImage: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    public static <T> void addViewToLinearLayout(@LayoutRes int id, T t, LinearLayout linearLayout, SendView<T> sendView) {\r\n        var view = View.inflate(linearLayout.getContext(), id, null);\r\n        sendView.sendView(view, t);\r\n        linearLayout.addView(view);\r\n    }\r\n\r\n    public interface SendView<T> {\r\n        void sendView(View view, T t);\r\n    }\r\n\r\n    private static boolean isVisible(View view) {\r\n        return view.getVisibility() == View.VISIBLE;\r\n    }\r\n\r\n    public static void setVisibility(View view, boolean visible) {\r\n        view.setVisibility(visible ? View.VISIBLE : View.GONE);\r\n    }\r\n\r\n    public static void loadImage(String url, android.widget.ImageView imageView, View progress) {\r\n        Glide.with(imageView.getContext())\r\n                .load(url)\r\n                .timeout(10000)\r\n                .error(R.drawable.cartoon_image_1)\r\n                .listener(new com.bumptech.glide.request.RequestListener<>() {\r\n                    @Override\r\n                    public boolean onLoadFailed(@Nullable GlideException e, Object model, Target<Drawable> target, boolean isFirstResource) {\r\n                        progress.setVisibility(View.GONE);\r\n                        return false;\r\n                    }\r\n\r\n                    @Override\r\n                    public boolean onResourceReady(Drawable resource, Object model, Target<Drawable> target, DataSource dataSource, boolean isFirstResource) {\r\n                        progress.setVisibility(View.GONE);\r\n                        return false;\r\n                    }\r\n                })\r\n                .into(imageView);\r\n    }\r\n\r\n\r\n    public static Map<String, List<String>> phonetics() {\r\n\r\n        Map<String, List<String>> words = new HashMap<>();\r\n        words.put(\"a\", Arrays.asList(new String[]{\"a\", \"ya\", \"yay\"}));\r\n        words.put(\"b\", Arrays.asList(new String[]{\"b\", \"be\", \"bee\"}));\r\n        words.put(\"c\", Arrays.asList(new String[]{\"c\", \"see\", \"sea\"}));\r\n        words.put(\"d\", Arrays.asList(new String[]{\"d\", \"de\", \"dee\", \"thee\"}));\r\n        words.put(\"e\", Arrays.asList(new String[]{\"e\", \"ee\", \"eh\"}));\r\n        words.put(\"f\", Arrays.asList(new String[]{\"f\", \"eff\"}));\r\n        words.put(\"g\", Arrays.asList(new String[]{\"g\", \"gee\", \"jee\"}));\r\n        words.put(\"h\", Arrays.asList(new String[]{\"h\", \"aitch\", \"itch\", \"hedge\", \"hatch\", \"edge\"}));\r\n        words.put(\"i\", Arrays.asList(new String[]{\"i\", \"eye\", \"aye\"}));\r\n        words.put(\"j\", Arrays.asList(new String[]{\"j\", \"jay\", \"je\", \"joy\"}));\r\n        words.put(\"k\", Arrays.asList(new String[]{\"k\", \"kay\", \"ke\"}));\r\n        words.put(\"l\", Arrays.asList(new String[]{\"l\", \"ell\", \"yell\", \"hell\", \"el\"}));\r\n        words.put(\"m\", Arrays.asList(new String[]{\"m\", \"am\", \"yam\", \"em\"}));\r\n        words.put(\"n\", Arrays.asList(new String[]{\"n\", \"yen\"}));\r\n        words.put(\"o\", Arrays.asList(new String[]{\"o\", \"oh\", \"vow\", \"waw\"}));\r\n        words.put(\"p\", Arrays.asList(new String[]{\"p\", \"pee\", \"pay\", \"pie\"}));\r\n        words.put(\"q\", Arrays.asList(new String[]{\"q\", \"cue\", \"queue\"}));\r\n        words.put(\"r\", Arrays.asList(new String[]{\"r\", \"are\", \"err\", \"year\"}));\r\n        words.put(\"s\", Arrays.asList(new String[]{\"s\", \"ess\", \"es\", \"ass\", \"yes\", \"as\"}));\r\n        words.put(\"t\", Arrays.asList(new String[]{\"t\", \"tee\", \"tea\", \"it\", \"ti\"}));\r\n        words.put(\"u\", Arrays.asList(new String[]{\"u\", \"you\"}));\r\n        words.put(\"v\", Arrays.asList(new String[]{\"v\", \"vee\", \"wee\"}));\r\n        words.put(\"w\", Arrays.asList(new String[]{\"w\", \"double you\"}));\r\n        words.put(\"x\", Arrays.asList(new String[]{\"x\", \"ex\", \"aex\"}));\r\n        words.put(\"y\", Arrays.asList(new String[]{\"y\", \"why\"}));\r\n        words.put(\"z\", Arrays.asList(new String[]{\"z\", \"zed\", \"zee\", \"jed\"}));\r\n        return words;\r\n    }\r\n\r\n    public static int getPendingIntentFlag() {\r\n        return (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) ? PendingIntent.FLAG_IMMUTABLE : PendingIntent.FLAG_ONE_SHOT;\r\n    }\r\n\r\n    public static void simpleToast(Context context, String message) {\r\n        Toast.makeText(context, message, Toast.LENGTH_SHORT).show();\r\n    }\r\n\r\n    // Extension Function to for Handler to run on UI Thread\r\n    public static void runOnUiThread(Runnable runnable, long time) {\r\n        new Handler(Looper.getMainLooper()).postDelayed(runnable, time);\r\n\r\n    }\r\n\r\n    public static void runOnUiThread(Runnable runnable) {\r\n        new Handler(Looper.getMainLooper()).post(runnable);\r\n\r\n    }\r\n\r\n    public static Boolean checkString(String s1, String s2) {\r\n        return Soundex.getCode(s1).equals(Soundex.getCode(s2));\r\n    }\r\n\r\n\r\n    //    Extension Function to get random number by passing digits number\r\n    public static int getRandomNumber(int digits) {\r\n        int number = (int) (Math.random() * Math.pow(10, digits));\r\n        if (number != 0)\r\n            return number;\r\n        else\r\n            return getRandomNumber(digits);\r\n    }\r\n\r\n    // Extension function to add space between String\r\n    public static String addComma(String s) {\r\n        StringBuilder sb = new StringBuilder();\r\n        for (int i = 0; i < s.length(); i++) {\r\n            sb.append(\"'\").append(s.charAt(i)).append(\"' !\");\r\n        }\r\n        return sb.toString();\r\n    }\r\n\r\n    public static String capitalize(String s) {\r\n        if (s.length() == 0) return s;\r\n        return s.substring(0, 1).toUpperCase() + s.substring(1);\r\n    }\r\n\r\n    public static String addSpaceAnswer(String s) {\r\n        StringBuilder sb = new StringBuilder();\r\n        for (int i = 0; i < s.length(); i++) {\r\n            sb.append(s.charAt(i)).append(\" \");\r\n        }\r\n        return sb.toString();\r\n    }\r\n\r\n    public static String replace(String str, int index, char ch) {\r\n        char[] chars = str.toCharArray();\r\n        chars[index] = ch;\r\n        return new String(chars);\r\n    }\r\n\r\n    // Add space to each character of String accept end\r\n    public static String addSpace(String s) {\r\n        StringBuilder sb = new StringBuilder();\r\n        for (int i = 0; i < s.length() - 1; i++) {\r\n            sb.append(s.charAt(i)).append(\" \");\r\n        }\r\n        sb.append(s.charAt(s.length() - 1));\r\n        return sb.toString();\r\n    }\r\n\r\n\r\n    public enum VocabularyCategories {\r\n        bathroom,\r\n        bathroom_1,\r\n        bathroom_2,\r\n        body_parts_1,\r\n        body_parts_2,\r\n        colors_1,\r\n        colors_2,\r\n        animals_1,\r\n        animals_2,\r\n        fruits_1,\r\n        fruits_2,\r\n        vegetables_1,\r\n        vegetables_2,\r\n        cloth_1,\r\n        cloth_2,\r\n        feeling_1,\r\n        feeling_2,\r\n        insect_1,\r\n        insect_2,\r\n        kitchen_1,\r\n        kitchen_2,\r\n        living_room, summer, town, transport, weather,\r\n        school\r\n    }\r\n\r\n    public static String getRandomItem(String[] list) {\r\n        Random random = new Random();\r\n        return list[random.nextInt(list.length)];\r\n    }\r\n\r\n    public static String getCompliment(Boolean isCorrect) {\r\n        return (isCorrect)\r\n                ? getRandomItem(new String[]{\"Fantastic !\", \"well done !\", \"great job !\", \"amazing !\", \"awesome !\", \"High-five !\", \"wow !\", \"That’s wonderful !!\"})\r\n                :\r\n                getRandomItem(new String[]{\"That’s incorrect ! \", \"you can try again ! \", \"That’s not correct !\", \"let’s try again !\"});\r\n\r\n    }\r\n\r\n    public static String convertCardinalNumberToOrdinalNumber(int number) {\r\n        String[] suffixes = new String[]{\"th\", \"st\", \"nd\", \"rd\", \"th\", \"th\", \"th\", \"th\", \"th\"};\r\n        try {\r\n            switch (number % 100) {\r\n                case 11:\r\n                case 12:\r\n                case 13:\r\n                    return number + \"th\";\r\n                default:\r\n                    return number + suffixes[number % 10];\r\n            }\r\n        } catch (Exception e) {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    public static String getIntroForGrammar(Context context, String category) {\r\n        var intro = \"\";\r\n        if (context.getString(R.string.grammar_1).equals(category))\r\n            intro = \"Let’s learn how to identify nouns in a sentence.\" +\r\n                    \"Go through each word and see,\" +\r\n                    \"if it's a person, place, thing, or an emotion or idea.\";\r\n        else if (context.getString(R.string.grammar_2).equals(category))\r\n            intro = \"Some nouns have irregular plural forms. \" +\r\n                    \"They turn into different words. Let us memorize them.\";\r\n        else if (context.getString(R.string.grammar_3).equals(category))\r\n            intro = \"Lets practice to identify some common and proper nouns\";\r\n        else if (context.getString(R.string.grammar_4).equals(category))\r\n            intro = \"Let us learn how to identify verbs in a sentence. \";\r\n        else intro = \"Let us learn how to identify Present tense in verbs in a sentence. \";\r\n\r\n        return intro;\r\n    }\r\n\r\n    public static String[] getQuestionForGrammar(Context context, GrammarModel grammarModel, String category) {\r\n        var question = new String[]{};\r\n        if (context.getString(R.string.grammar_1).equals(category))\r\n            question = new String[]{grammarModel.getDescription() + \"...\" + \"'\"\r\n                    + grammarModel.getWord() + \"'!\" + \"is noun here.\",\r\n                    \"Now It's your turn to Click on the noun to identify it\"};\r\n        else if (context.getString(R.string.grammar_2).equals(category))\r\n            question = new String[]{\r\n                    grammarModel.getDescription().replace(\"→\", \",\")\r\n                            + \"...\" + \"'\", \"Now It's your turn to Click on \" +\r\n                    \"the plural form to identify it\"\r\n            };\r\n        else if (context.getString(R.string.grammar_3).equals(category)) {\r\n            var list = new String[]{\"Tell me which noun is this?\",\r\n                    \"Please answer which noun is this ?\"};\r\n            question = new String[]{\r\n                    \"'\" + grammarModel.getWord() + \"' .\"\r\n                            + grammarModel.getDescription() + \"...\"\r\n                    , UtilityFunctions.getRandomItem(list)\r\n            };\r\n        } else if (context.getString(R.string.grammar_4).equals(category))\r\n            question = new String[]{\r\n                    grammarModel.getDescription() + \"...\" + \"'\"\r\n                            + grammarModel.getWord() + \"'!\" + \"is verb here.\"\r\n                    , \"Now It's your turn to Click on the verb to identify it\"\r\n            };\r\n        else question = new String[]{\r\n                    grammarModel.getDescription() + \"...\" + \"'\"\r\n                            + grammarModel.getWord() + \"'!\" + \"is Present tense verb here.\"\r\n                    , \"Now It's your turn to Click on the Present tense verb to identify it\"\r\n            };\r\n        return question;\r\n    }\r\n\r\n    public static String getQuestionForGrammarTest(Context context, String category) {\r\n        var question = \"\";\r\n        if (context.getString(R.string.grammar_1).equals(category))\r\n            question = getRandomItem(new String[]{\r\n                    \"Can you identify the noun?\",\r\n                    \"Try to identify the noun ?\",\r\n                    \"Tell what is the noun here ?\",\r\n                    \"Guess the noun here?\"});\r\n        else if (context.getString(R.string.grammar_2).equals(category))\r\n            question = \"Try to tell the plural form of this noun\";\r\n        else if (context.getString(R.string.grammar_3).equals(category)) {\r\n            question = \"Tell me which noun is this?\";\r\n        } else if (context.getString(R.string.grammar_4).equals(category))\r\n            question = \"Can you identify the verb?\";\r\n        else question = \"Can you identify the Present tense verb?\";\r\n        return question;\r\n    }\r\n\r\n\r\n    public static String getQuestionTitleVocabulary(VocabularyCategories categories) {\r\n        switch (categories) {\r\n            case bathroom_1:\r\n            case bathroom_2:\r\n                return \"Let us learn about Bathroom and objects we use there.\";\r\n            case body_parts_1:\r\n            case body_parts_2:\r\n                return \"Here we will learn about our different body parts.\";\r\n            case colors_1:\r\n            case colors_2:\r\n                return \"It’s the turn of colors now. Let us learn them.\";\r\n            case animals_1:\r\n            case animals_2:\r\n                return \"Let us learn and know some animals. \";\r\n            case fruits_1:\r\n            case fruits_2:\r\n                return \"I am sure, you all love eating fruits. Let us try to learn different fruits and their names.\";\r\n            case vegetables_1:\r\n            case vegetables_2:\r\n                return \"Vegetables are good for health. We will learn about some of them now.\";\r\n            case cloth_1:\r\n            case cloth_2:\r\n                return \"We all wear different types of clothes to look nice. Let us know about them.\";\r\n            case feeling_1:\r\n            case feeling_2:\r\n                return \"Let us learn about feelings and emotions we all undergo.\";\r\n            case insect_1:\r\n            case insect_2:\r\n                return \"Now we will discover different types of insects.\";\r\n            case kitchen_1:\r\n            case kitchen_2:\r\n                return \"Let us learn and know some of the objects used by our mothers in Kitchen.\";\r\n            default:\r\n                return \"Let us learn and know about \" + UtilityFunctions.vocabularyCategoriesToString(categories);\r\n        }\r\n    }\r\n\r\n    public static String getQuestionsFromVocabularyCategories(VocabularyCategories categories) {\r\n        switch (categories) {\r\n            case bathroom_1:\r\n            case bathroom_2:\r\n                return getRandomItem(new String[]{\"Can you name this object? \", \" Try naming this object \", \" Can you tell what is this object called?\"});\r\n            case body_parts_1:\r\n            case body_parts_2:\r\n                return getRandomItem(new String[]{\"Can you name this body part? \", \" Try naming this body part\", \"Can you name this one?\"});\r\n            case colors_1:\r\n            case colors_2:\r\n                return getRandomItem(new String[]{\" Can you name this color? \", \" Which color is this?\", \" Try naming this color \", \" Which color do you see here?\"});\r\n            case animals_1:\r\n            case animals_2:\r\n                return getRandomItem(new String[]{\" Can you name this animal? \", \" Try naming this animal\", \" Can you identify this?\"});\r\n            case fruits_1:\r\n            case fruits_2:\r\n                return getRandomItem(new String[]{\"Can you name this fruit? \", \"Name this fruit\", \"Can you identify this fruit?\"});\r\n            case vegetables_1:\r\n            case vegetables_2:\r\n                return getRandomItem(new String[]{\"Can you name this vegetable? \", \"Name this vegetable\", \"Can you identify this vegetable?\"});\r\n            case cloth_1:\r\n            case cloth_2:\r\n                return getRandomItem(new String[]{\"Can you name this object?\", \"Name this ?\", \"Can you identify this?\"});\r\n            case feeling_1:\r\n            case feeling_2:\r\n                return getRandomItem(new String[]{\"What is this feeling called? \", \"Name this ?\", \"Can you identify this?\"});\r\n            case insect_1:\r\n            case insect_2:\r\n                return getRandomItem(new String[]{\"What is this insect called?\", \"Name this ?\"});\r\n            case kitchen_1:\r\n            case kitchen_2:\r\n                return getRandomItem(new String[]{\" What is this object called?\", \"Name this object\", \"Can you identify this?\"});\r\n            default:\r\n                return getRandomItem(new String[]{\"Name this object\", \"Can you identify this object?\"});\r\n        }\r\n    }\r\n\r\n    public static int getNinetyPercentage(int total) {\r\n        return (int) Math.floor(total * 0.9);\r\n    }\r\n\r\n    public static String getDbName(VocabularyCategories categories, Context context) {\r\n        switch (categories) {\r\n            case bathroom:\r\n                return context.getString(R.string.vocab1b);\r\n            case bathroom_1:\r\n                return context.getString(R.string.vocab1);\r\n            case bathroom_2:\r\n                return context.getString(R.string.vocab1_1);\r\n            case body_parts_1:\r\n                return context.getString(R.string.vocab2);\r\n            case body_parts_2:\r\n                return context.getString(R.string.vocab2_1);\r\n            case colors_1:\r\n                return context.getString(R.string.vocab3);\r\n            case colors_2:\r\n                return context.getString(R.string.vocab3_1);\r\n            case animals_1:\r\n                return context.getString(R.string.vocab4);\r\n            case animals_2:\r\n                return context.getString(R.string.vocab4_1);\r\n            case fruits_1:\r\n                return context.getString(R.string.vocab5);\r\n            case fruits_2:\r\n                return context.getString(R.string.vocab5_1);\r\n            case vegetables_1:\r\n                return context.getString(R.string.vocab6);\r\n            case vegetables_2:\r\n                return context.getString(R.string.vocab6_1);\r\n            case cloth_1:\r\n                return context.getString(R.string.vocab8);\r\n            case cloth_2:\r\n                return context.getString(R.string.vocab8_1);\r\n            case feeling_1:\r\n                return context.getString(R.string.vocab9);\r\n            case feeling_2:\r\n                return context.getString(R.string.vocab9_1);\r\n            case insect_1:\r\n                return context.getString(R.string.vocab10);\r\n            case insect_2:\r\n                return context.getString(R.string.vocab10_1);\r\n            case kitchen_1:\r\n                return context.getString(R.string.vocab11);\r\n            case kitchen_2:\r\n                return context.getString(R.string.vocab11_1);\r\n            case living_room:\r\n                return context.getString(R.string.vocab12);\r\n            case school:\r\n                return context.getString(R.string.vocab14);\r\n            case summer:\r\n                return context.getString(R.string.vocab15);\r\n            case town:\r\n                return context.getString(R.string.vocab16);\r\n            case transport:\r\n                return context.getString(R.string.vocab17);\r\n            case weather:\r\n                return context.getString(R.string.vocab18);\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n\r\n    public static String vocabularyCategoriesToString(VocabularyCategories vocabularyCategories) {\r\n        switch (vocabularyCategories) {\r\n            case bathroom:\r\n                return \"Bathroom\";\r\n            case bathroom_1:\r\n                return \"Bathroom 1\";\r\n            case bathroom_2:\r\n                return \"Bathroom 2\";\r\n            case body_parts_1:\r\n                return \"Body Parts 1\";\r\n            case body_parts_2:\r\n                return \"Body Parts 2\";\r\n            case colors_1:\r\n                return \"Colors 1\";\r\n            case colors_2:\r\n                return \"Colors 2\";\r\n            case animals_1:\r\n                return \"Animals 1\";\r\n            case animals_2:\r\n                return \"Animals 2\";\r\n            case fruits_1:\r\n                return \"Fruits 1\";\r\n            case fruits_2:\r\n                return \"Fruits 2\";\r\n            case vegetables_1:\r\n                return \"Vegetables 1\";\r\n            case vegetables_2:\r\n                return \"Vegetables 2\";\r\n            case cloth_1:\r\n                return \"Cloth 1\";\r\n            case cloth_2:\r\n                return \"Cloth 2\";\r\n            case feeling_1:\r\n                return \"Feeling 1\";\r\n            case feeling_2:\r\n                return \"Feeling 2\";\r\n            case insect_1:\r\n                return \"Insect 1\";\r\n            case insect_2:\r\n                return \"Insect 2\";\r\n            case kitchen_1:\r\n                return \"Kitchen 1\";\r\n            case kitchen_2:\r\n                return \"Kitchen 2\";\r\n            case living_room:\r\n                return \"Living Room\";\r\n            case summer:\r\n                return \"Summer\";\r\n            case town:\r\n                return \"Town\";\r\n            case transport:\r\n                return \"Transport\";\r\n            case weather:\r\n                return \"Weather\";\r\n            case school:\r\n                return \"School\";\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n\r\n    public static int getGrade(String grade) {\r\n        switch (grade) {\r\n            case \"GRADE 1\":\r\n                return 1;\r\n            case \"GRADE 2\":\r\n                return 2;\r\n            default:\r\n                return 3;\r\n        }\r\n    }\r\n\r\n    public static VocabularyCategories getVocabularyFromString(String category) {\r\n        try {\r\n            switch (category) {\r\n                case \"bathroom_1\":\r\n                    return VocabularyCategories.bathroom_1;\r\n                case \"bathroom\":\r\n                    return VocabularyCategories.bathroom;\r\n                case \"bathroom_2\":\r\n                    return VocabularyCategories.bathroom_2;\r\n                case \"body_parts_1\":\r\n                    return VocabularyCategories.body_parts_1;\r\n                case \"body_parts_2\":\r\n                    return VocabularyCategories.body_parts_2;\r\n                case \"colors_1\":\r\n                    return VocabularyCategories.colors_1;\r\n                case \"colors_2\":\r\n                    return VocabularyCategories.colors_2;\r\n                case \"fruits_1\":\r\n                    return VocabularyCategories.fruits_1;\r\n                case \"fruits_2\":\r\n                    return VocabularyCategories.fruits_2;\r\n                case \"vegetables_1\":\r\n                    return VocabularyCategories.vegetables_1;\r\n                case \"vegetables_2\":\r\n                    return VocabularyCategories.vegetables_2;\r\n                case \"animals_2\":\r\n                    return VocabularyCategories.animals_2;\r\n                case \"cloth_1\":\r\n                    return VocabularyCategories.cloth_1;\r\n                case \"cloth_2\":\r\n                    return VocabularyCategories.cloth_2;\r\n                case \"feeling_1\":\r\n                    return VocabularyCategories.feeling_1;\r\n                case \"feeling_2\":\r\n                    return VocabularyCategories.feeling_2;\r\n                case \"insect_1\":\r\n                    return VocabularyCategories.insect_1;\r\n                case \"insect_2\":\r\n                    return VocabularyCategories.insect_2;\r\n                case \"kitchen_1\":\r\n                    return VocabularyCategories.kitchen_1;\r\n                case \"kitchen_2\":\r\n                    return VocabularyCategories.kitchen_2;\r\n                case \"living_room\":\r\n                    return VocabularyCategories.living_room;\r\n                case \"summer\":\r\n                    return VocabularyCategories.summer;\r\n                case \"town\":\r\n                    return VocabularyCategories.town;\r\n                case \"transport\":\r\n                    return VocabularyCategories.transport;\r\n                case \"weather\":\r\n                    return VocabularyCategories.weather;\r\n                case \"school\":\r\n                    return VocabularyCategories.school;\r\n                default:\r\n                    return VocabularyCategories.animals_1;\r\n            }\r\n        } catch (Exception e) {\r\n\r\n            return VocabularyCategories.bathroom_1;\r\n        }\r\n    }\r\n\r\n    public static VocabularyCategories getVocabularyCategoryFromAdapter(String category) {\r\n        switch (category) {\r\n            case \"bathroom_1\":\r\n                return VocabularyCategories.bathroom_1;\r\n            case \"bathroom_2\":\r\n                return VocabularyCategories.bathroom_2;\r\n            case \"bodyparts_1\":\r\n                return VocabularyCategories.body_parts_1;\r\n            case \"bodyparts_2\":\r\n                return VocabularyCategories.body_parts_2;\r\n            case \"colors_1\":\r\n                return VocabularyCategories.colors_1;\r\n            case \"colors_2\":\r\n                return VocabularyCategories.colors_2;\r\n            case \"fruits_1\":\r\n                return VocabularyCategories.fruits_1;\r\n            case \"fruits_2\":\r\n                return VocabularyCategories.fruits_2;\r\n            case \"vegetables_1\":\r\n                return VocabularyCategories.vegetables_1;\r\n            case \"vegetables_2\":\r\n                return VocabularyCategories.vegetables_2;\r\n            case \"clothes_1\":\r\n                return VocabularyCategories.cloth_1;\r\n            case \"clothes_2\":\r\n                return VocabularyCategories.cloth_2;\r\n            case \"feelings_1\":\r\n                return VocabularyCategories.feeling_1;\r\n            case \"feelings_2\":\r\n                return VocabularyCategories.feeling_2;\r\n            case \"insects_1\":\r\n                return VocabularyCategories.insect_1;\r\n            case \"insects_2\":\r\n                return VocabularyCategories.insect_2;\r\n            case \"kitchen_1\":\r\n                return VocabularyCategories.kitchen_1;\r\n            case \"kitchen_2\":\r\n                return VocabularyCategories.kitchen_2;\r\n            case \"livingroom\":\r\n                return VocabularyCategories.living_room;\r\n            case \"animal_2\":\r\n                return VocabularyCategories.animals_2;\r\n            case \"school\":\r\n                return VocabularyCategories.school;\r\n            case \"summer\":\r\n                return VocabularyCategories.summer;\r\n            case \"town\":\r\n                return VocabularyCategories.town;\r\n            case \"transport\":\r\n                return VocabularyCategories.transport;\r\n            case \"weather\":\r\n                return VocabularyCategories.weather;\r\n            default:\r\n                return VocabularyCategories.animals_1;\r\n        }\r\n    }\r\n\r\n\r\n    // function to Shuffle array and return\r\n    public static ArrayList shuffleArray(ArrayList ar) {\r\n        Random rnd = new Random();\r\n        for (int i = ar.size() - 1; i > 0; i--) {\r\n            int index = rnd.nextInt(i + 1);\r\n            // Simple swap\r\n            Object a = ar.get(index);\r\n            ar.set(index, ar.get(i));\r\n            ar.set(i, a);\r\n        }\r\n        return ar;\r\n    }\r\n\r\n\r\n    public static char getRandomAlphabet() {\r\n        Random r = new Random();\r\n        return (char) (r.nextInt(26) + 'a');\r\n    }\r\n\r\n    // function to get random alphabet accept the single character\r\n    public static char getRandomAlphabet(char c) {\r\n        Random r = new Random();\r\n        char randomChar = (char) (r.nextInt(26) + 'a');\r\n        if (randomChar == c) {\r\n            return getRandomAlphabet(c);\r\n        } else {\r\n            return randomChar;\r\n        }\r\n    }\r\n\r\n\r\n    public static VocabularyCategoryModel getVocabularyDetailsFromType(List<VocabularyCategoryModel> models, VocabularyCategories type) {\r\n        var filterList = models.stream().filter(model -> model.getCategory().equals(type.name())).collect(Collectors.toList());\r\n        if (filterList.size() > 0) {\r\n            return filterList.get(0);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    public static void attemptPhoneNumberLogin(FirebaseAnalytics mFirebaseAnalytics, String phoneNumber) {\r\n\r\n        var kidsData = new Bundle();\r\n        kidsData.putString(\"phoneNumber\", phoneNumber);\r\n        mFirebaseAnalytics.logEvent(\"phone_number_login_attempt\", kidsData);\r\n    }\r\n\r\n    public static void setReminderEvent(FirebaseAnalytics mFirebaseAnalytics, FirebaseAuth mAuth, String time) {\r\n\r\n        var reminderData = new Bundle();\r\n        reminderData.putString(\"phone_number\", time);\r\n        reminderData.putString(\"user_id\", mAuth.getCurrentUser().getUid());\r\n        reminderData.putString(\"rem_time\", time);\r\n        mFirebaseAnalytics.logEvent(\"reminder_added_event\", reminderData);\r\n    }\r\n\r\n\r\n    public static void attemptPayment(FirebaseAnalytics mFirebaseAnalytics, FirebaseAuth mAuth, String phoneNumber, String paymentId, String subscriptionId, long paymentAmount, String status) {\r\n\r\n        var paymentData = new Bundle();\r\n        paymentData.putString(\"phone_number\", phoneNumber);\r\n        paymentData.putString(\"payment_id\", paymentId);\r\n        paymentData.putString(\"subscription_id\", subscriptionId);\r\n        paymentData.putString(\"user_id\", mAuth.getCurrentUser().getUid());\r\n        paymentData.putLong(\"payment_amount\", paymentAmount);\r\n        paymentData.putString(\"payment_status\", status);\r\n\r\n        mFirebaseAnalytics.logEvent(\"attempt_payment\", paymentData);\r\n    }\r\n\r\n\r\n    public static long diffDate(String dt1_, String dt2_) {\r\n\r\n        SimpleDateFormat obj = new SimpleDateFormat(\"EEE MMM dd HH:mm:ss zzzz yyyy\");\r\n\r\n        try {\r\n            Date date1 = obj.parse(dt1_);\r\n            Date date2 = obj.parse(dt2_);\r\n            long time_difference = date2.getTime() - date1.getTime();\r\n            long days_difference = (time_difference / (1000 * 60 * 60 * 24)) % 365;\r\n            return days_difference;\r\n        } catch (ParseException e) {\r\n            e.printStackTrace();\r\n\r\n        }\r\n        return 0;\r\n    }\r\n\r\n\r\n    public static void sendDataToAnalytics(FirebaseAnalytics mFirebaseAnalytics, FirebaseAuth mAuth, String uid, String kidsId, String kidsName, String type,\r\n                                           int age, String result, String detected, Boolean tag, int timeTaken, String question, String subject\r\n            , String parentsContactId\r\n    ) {\r\n        var resultBundle = new Bundle();\r\n        resultBundle.putString(\"original_result\", result);\r\n        resultBundle.putString(\"detected_result\", detected);\r\n        resultBundle.putBoolean(\"is_correct\", tag);\r\n        resultBundle.putInt(\"timeTaken\", timeTaken);\r\n        resultBundle.putString(\"question\", question);\r\n        resultBundle.putString(\"parent_id\", uid);\r\n        resultBundle.putString(\"kids_id\", kidsId);\r\n        resultBundle.putString(\"kids_name\", kidsName);\r\n        resultBundle.putInt(\"kids_age\", age);\r\n        resultBundle.putString(\"user_id\", mAuth.getCurrentUser().getUid());\r\n        resultBundle.putString(\"type\", type);\r\n        resultBundle.putString(\"parents_contact_id\", parentsContactId);\r\n        mFirebaseAnalytics.logEvent(subject, resultBundle);\r\n\r\n\r\n        Bundle itemJeggings = new Bundle();\r\n        itemJeggings.putString(FirebaseAnalytics.Param.ITEM_ID, kidsId);\r\n        itemJeggings.putString(FirebaseAnalytics.Param.ITEM_NAME, kidsName);\r\n        itemJeggings.putString(FirebaseAnalytics.Param.ITEM_CATEGORY, question);\r\n        itemJeggings.putString(FirebaseAnalytics.Param.ITEM_VARIANT, detected);\r\n        itemJeggings.putString(FirebaseAnalytics.Param.ITEM_BRAND, result);\r\n        itemJeggings.putString(FirebaseAnalytics.Param.ITEM_CATEGORY2, parentsContactId);\r\n        itemJeggings.putDouble(FirebaseAnalytics.Param.PRICE, age);\r\n\r\n\r\n        Bundle activityInfoWithIndex = new Bundle(itemJeggings);\r\n        activityInfoWithIndex.putLong(FirebaseAnalytics.Param.INDEX, 1);\r\n\r\n\r\n        Bundle viewItemListParams = new Bundle();\r\n        viewItemListParams.putString(FirebaseAnalytics.Param.ITEM_LIST_ID, tag + \"\");\r\n        viewItemListParams.putString(FirebaseAnalytics.Param.ITEM_LIST_NAME, type);\r\n        viewItemListParams.putParcelableArray(FirebaseAnalytics.Param.ITEMS,\r\n                new Parcelable[]{activityInfoWithIndex});\r\n        mFirebaseAnalytics.logEvent(FirebaseAnalytics.Event.VIEW_ITEM_LIST, viewItemListParams);\r\n\r\n\r\n    }\r\n\r\n\r\n    public static void saveLog(LogDatabase db, String log) {\r\n        var saveLog = new LogEntity(log, String.valueOf(new Date().getTime()));\r\n        var dao = db.logDao();\r\n        dao.insertNotes(saveLog);\r\n    }\r\n\r\n\r\n    public static MediaPlayer playClapSound(Activity activity) {\r\n        var m = MediaPlayer.create(activity, R.raw.clap_sound);\r\n        m.setVolume(0.3f, 0.3f);\r\n        // set playback time to 1 sec\r\n        m.setLooping(false);\r\n\r\n        return m;\r\n    }\r\n\r\n\r\n    //     Abhishek's Code\r\n\r\n\r\n    // This solves the problem of repeating digits..\r\n\r\n\r\n    public static int getRandomIntegerUpto(int maximum, int minimum) {\r\n        return ((int) (Math.random() * (maximum - minimum))) + minimum;\r\n    }\r\n\r\n    public static List<Integer> getRandomTwoIntegerUpto(int maximum, int minimum) {\r\n\r\n        List<Integer> ls = new ArrayList<>();\r\n        while (ls.size() < 2) {\r\n            int digit = ((int) (Math.random() * (maximum - minimum))) + minimum;\r\n            if (!ls.contains(digit))\r\n                ls.add(digit);\r\n        }\r\n        return ls;\r\n    }\r\n\r\n\r\n    public static void saveDataLocally(Context context, String grade, String name, String dob, String imageUrl, String uuid) {\r\n        PrefConfig.writeIdInPref(context, grade, context.getResources().getString(R.string.kids_grade));\r\n        PrefConfig.writeIdInPref(context, name, context.getResources().getString(R.string.kids_name));\r\n        PrefConfig.writeIdInPref(context, dob, context.getResources().getString(R.string.kids_dob));\r\n        PrefConfig.writeIdInPref(context, imageUrl, context.getResources().getString(R.string.kids_profile_url));\r\n        PrefConfig.writeIdInPref(context, uuid, context.getResources().getString(R.string.kids_id));\r\n    }\r\n\r\n    public static Boolean isDivisible(int num1, int num2) {\r\n\r\n        if ((num1 % num2) == 0)\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    public Boolean matchingSeq(String str1, String str2) {\r\n\r\n\r\n        if (str1.equals(\"\"))\r\n            return false;\r\n\r\n        String st1 = str1.replace(\" \", \"\");\r\n        Log.i(\"Strings\", st1 + \",\" + str2);\r\n        while (st1.length() > 0) {\r\n\r\n            if (st1.startsWith(str2)) {\r\n                st1 = st1.replace(str2, \"\");\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    // Greet about morning, afternoon etc.\r\n    public String greeting() {\r\n        Calendar c = Calendar.getInstance();\r\n        int timeOfDay = c.get(Calendar.HOUR_OF_DAY);\r\n\r\n        if (timeOfDay >= 0 && timeOfDay < 12) {\r\n            return \"Good Morning\";\r\n        } else if (timeOfDay >= 12 && timeOfDay < 16) {\r\n            return \"Good Afternoon\";\r\n        } else if (timeOfDay >= 16 && timeOfDay < 21) {\r\n            return \"Good Evening\";\r\n        } else if (timeOfDay >= 21 && timeOfDay < 24) {\r\n            return \"Good Night\";\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n\r\n    // Format milisec to h: m: s\r\n    public static String formatTime(long diff) {\r\n\r\n\r\n        Duration duration = Duration.ofMillis(diff);\r\n        long h = duration.toHours();\r\n        long m = duration.toMinutes() % 60;\r\n        long s = duration.getSeconds() % 60;\r\n        String timeInHms = String.format(\"%d h:%d m:%d s\", h, m, s);\r\n        return String.format(\"Time taken :%s\", timeInHms);\r\n    }\r\n\r\n\r\n    // Calculates the age of kids\r\n    public static int calculateAge(String inputDate) {\r\n\r\n        LocalDate curDate = LocalDate.now();\r\n        SimpleDateFormat as = new SimpleDateFormat(\"dd/mm/yyyy\");\r\n        SimpleDateFormat req = new SimpleDateFormat(\"yyyy-mm-dd\");\r\n        try {\r\n            Date adate = as.parse(inputDate);\r\n            LocalDate dob = LocalDate.parse(req.format(adate));\r\n\r\n            if ((dob != null) && (curDate != null)) {\r\n                return Period.between(dob, curDate).getYears();\r\n            } else {\r\n                return 0;\r\n            }\r\n\r\n        } catch (Exception e) {\r\n\r\n        }\r\n        return 0;\r\n    }\r\n\r\n\r\n    // Un-Mute audio streams\r\n    public static void unMuteAudioStream(Context context) throws InterruptedException {\r\n        Thread.sleep(500);\r\n\r\n        AudioManager amanager = (AudioManager) ((Activity) context).getSystemService(Context.AUDIO_SERVICE);\r\n        amanager.setStreamMute(AudioManager.STREAM_SYSTEM, false);\r\n\r\n        try {\r\n            amanager.setStreamMute(AudioManager.STREAM_DTMF, false);\r\n        } catch (Exception e) {\r\n        }\r\n        //\r\n        amanager.setStreamMute(AudioManager.STREAM_NOTIFICATION, false);\r\n        amanager.setStreamMute(AudioManager.STREAM_ACCESSIBILITY, false);\r\n\r\n\r\n    }\r\n\r\n    // Mute audio streams\r\n\r\n    public static void muteAudioStream(Context context) {\r\n        AudioManager amanager = (AudioManager) ((Activity) context).getSystemService(Context.AUDIO_SERVICE);\r\n        amanager.setStreamMute(AudioManager.STREAM_SYSTEM, true);\r\n        try {\r\n            amanager.setStreamMute(AudioManager.STREAM_DTMF, true);\r\n        } catch (Exception e) {\r\n        }\r\n        amanager.setStreamMute(AudioManager.STREAM_NOTIFICATION, true);\r\n        amanager.setStreamMute(AudioManager.STREAM_ACCESSIBILITY, true);\r\n\r\n    }\r\n\r\n    public void setStatusBarTransparent(Context mContext) {\r\n        Window window = ((Activity) mContext).getWindow();\r\n        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\r\n        window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);\r\n\r\n        View decorView = window.getDecorView();\r\n        decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);\r\n        window.setStatusBarColor(Color.TRANSPARENT);\r\n    }\r\n\r\n\r\n    public static String numberToWords(long n) {\r\n        long limit = 1000000000000L, curr_hun, t = 0;\r\n\r\n        // If zero return zero\r\n        if (n == 0)\r\n            return (\"Zero\");\r\n\r\n        // Array to store the powers of 10\r\n        String multiplier[] = {\"\", \"Trillion\", \"Billion\",\r\n                \"Million\", \"Thousand\"};\r\n\r\n        // Array to store numbers till 20\r\n        String first_twenty[] = {\r\n                \"\", \"One\", \"Two\", \"Three\",\r\n                \"Four\", \"Five\", \"Six\", \"Seven\",\r\n                \"Eight\", \"Nine\", \"Ten\", \"Eleven\",\r\n                \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\",\r\n                \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"\r\n        };\r\n\r\n        // Array to store multiples of ten\r\n        String tens[] = {\"\", \"Twenty\", \"Thirty\",\r\n                \"Forty\", \"Fifty\", \"Sixty\",\r\n                \"Seventy\", \"Eighty\", \"Ninety\"};\r\n\r\n        // If number is less than 20, return without any\r\n        // further computation\r\n        if (n < 20L)\r\n            return (first_twenty[(int) n]);\r\n        String answer = \"\";\r\n        for (long i = n; i > 0; i %= limit, limit /= 1000) {\r\n            curr_hun = i / limit;\r\n\r\n            // It might be possible that the current\r\n            // multiplier is bigger than your number\r\n            while (curr_hun == 0) {\r\n\r\n                // Set i as the remainder obtained when n\r\n                // was divided my the limit\r\n                i %= limit;\r\n\r\n                // Divide the limit by 1000, shifts the\r\n                // multiplier\r\n                limit /= 1000;\r\n\r\n                // Get the current value in hundereds, as\r\n                // English system works in hundreds\r\n                curr_hun = i / limit;\r\n\r\n                // Shift the multiplier\r\n                ++t;\r\n            }\r\n\r\n            // If current hundered is greater that 99, Add\r\n            // the hundreds' place\r\n            if (curr_hun > 99)\r\n                answer += (first_twenty[(int) curr_hun / 100]\r\n                        + \" Hundred \");\r\n\r\n            // Bring the current hundered to tens\r\n            curr_hun = curr_hun % 100;\r\n\r\n            // If the value in tens belongs to [1,19], add\r\n            // using the first_twenty\r\n            if (curr_hun > 0 && curr_hun < 20)\r\n                answer += (first_twenty[(int) curr_hun] + \" \");\r\n\r\n                // If curr_hun is now a multiple of 10, but not\r\n                // 0 Add the tens' value using the tens array\r\n            else if (curr_hun % 10 == 0 && curr_hun != 0)\r\n                answer += (tens[(int) curr_hun / 10 - 1] + \" \");\r\n\r\n            else if (curr_hun > 20 && curr_hun < 100)\r\n                answer\r\n                        += (tens[(int) curr_hun / 10 - 1] + \" \"\r\n                        + first_twenty[(int) curr_hun % 10]\r\n                        + \" \");\r\n\r\n            // If Multiplier has not become less than 1000,\r\n            // shift it\r\n            if (t < 4)\r\n                answer += (multiplier[(int) ++t] + \" \");\r\n        }\r\n        return (answer);\r\n    }\r\n\r\n\r\n    // Function for unlocking\r\n    public static void updateDbUnlock(GradeDatabase database, String grade, String chapter, String subSub) {\r\n\r\n        List<Grades_data> dbData = new ArrayList<>();\r\n        dbData = database.gradesDao().valus(new SimpleSQLiteQuery(\"SELECT * FROM grades where \" + grade.replaceAll(\" \", \"\").toLowerCase() + \" =1 and chapter LIKE '%\" + chapter + \"%'\"));\r\n        Log.d(\"XXX\", chapter);\r\n        Log.d(\"XXX\", dbData + \"\");\r\n        for (int i = 0; i < dbData.size(); i++) {\r\n            Log.d(\"XXX\", \"updateDbUnlock: called \" + dbData.get(i).chapter.equals(subSub) + subSub);\r\n            if (dbData.get(i).chapter.equals(subSub)) {\r\n                Log.d(\"XXX\", \"updateDbUnlock: if\");\r\n                try {\r\n                    database.gradesDao().updateIsComplete(true, dbData.get(i).chapter);\r\n                    database.gradesDao().update(true, dbData.get(i + 1).chapter);\r\n                    Log.d(\"XXX\", dbData.get(i + 1).chapter);\r\n                    break;\r\n                } catch (Exception e) {\r\n                    Log.e(\"XXX\", e.getMessage());\r\n                    break;\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    @SuppressLint(\"SuspiciousIndentation\")\r\n    public static void updateDbUnlock(GradeDatabase database, String subSubject, String chapters, boolean isFirebaseCall) {\r\n\r\n\r\n        // for information subSubject=Vocabulary\r\n\r\n        List<GradeData> dbData = new ArrayList<>();\r\n        dbData = database.gradesDaoUpdated().getSubjectDataNL(subSubject);\r\n        Log.d(\"XXX\", subSubject + \",cahp : \" + chapters);\r\n        Log.d(\"XXXDB Data\", dbData + \"\");\r\n        for (int i = 0; i < dbData.size(); i++) {\r\n            Log.d(\"XXX\", \"updateDbUnlock: called \" + dbData.get(i).getChapter_name().equals(chapters) + chapters);\r\n            if (dbData.get(i).getChapter_name().equals(chapters)) {\r\n                Log.d(\"XXX\", \"updateDbUnlock: if\");\r\n                try {\r\n                    database.gradesDaoUpdated().updateIsCompleteEX(true, dbData.get(i).getChapter_name());\r\n\r\n                    Log.d(\"XXX Chaptername\", \"updateDbUnlock: \" + dbData.get(i).getChapter_name());\r\n                    if (isFirebaseCall)\r\n                        database.gradesDaoUpdated().updateIsComplete(true, dbData.get(i).getChapter_name());\r\n\r\n                    database.gradesDaoUpdated().update(true, dbData.get(i + 1).getChapter_name(), subSubject);\r\n                    Log.d(\"XXX\", dbData.get(i + 1).getChapter_name());\r\n                    break;\r\n                } catch (Exception e) {\r\n                    Log.e(\"XXX\", e.getMessage());\r\n                    break;\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n//    public static void updateDbUnlock(GradeDatabase database, String chapter, String subSub) {\r\n//\r\n//        List<GradeData> dbData = new ArrayList<>();\r\n//        dbData = database.gradesDaoUpdated().getSubjectDataNL(chapter);\r\n//        Log.d(\"XXX\", chapter);\r\n//        Log.d(\"XXX\", dbData + \"\");\r\n//        for (int i = 0; i < dbData.size(); i++) {\r\n//            Log.d(\"XXX\", \"updateDbUnlock: called \" + dbData.get(i).getChapter_name().equals(subSub) + subSub);\r\n//            if (dbData.get(i).getChapter_name().equals(subSub)) {\r\n//                Log.d(\"XXX\", \"updateDbUnlock: if\");\r\n//                try {\r\n//                    database.gradesDaoUpdated().updateIsComplete(true, dbData.get(i).getChapter_name());\r\n//                    database.gradesDaoUpdated().update(true, dbData.get(i + 1).getChapter_name());\r\n//                    Log.d(\"XXX\", dbData.get(i + 1).getChapter_name());\r\n//                    break;\r\n//                } catch (Exception e) {\r\n//                    Log.e(\"XXX\", e.getMessage());\r\n//                    break;\r\n//                }\r\n//\r\n//            }\r\n//\r\n//        }\r\n//    }\r\n\r\n\r\n    // getting first false data\r\n    public static Grades_data getFirstFalseData(GradeDatabase database, String grade, String chapter) {\r\n\r\n        List<Grades_data> dbData = new ArrayList<>();\r\n        dbData = database.gradesDao().valus(new SimpleSQLiteQuery(\"SELECT * FROM grades where \" + grade.replaceAll(\" \", \"\").toLowerCase() + \" =1 and chapter LIKE '%\" + chapter + \"%' AND is_complete=0 LIMIT 1\"));\r\n        Log.i(\"CHAPTER\", chapter);\r\n        Log.i(\"DB_DATA\", dbData + \"\");\r\n        try {\r\n            return dbData.get(0);\r\n        } catch (Exception e) {\r\n\r\n            return null;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public static List<Grades_data> gettingSubSubjectData(GradeDatabase database, String grade, String chapter, boolean is_all_needed) {\r\n\r\n        List<Grades_data> dbData = new ArrayList<>();\r\n        if (is_all_needed)\r\n            dbData = database.gradesDao().valus(new SimpleSQLiteQuery(\"SELECT * FROM grades where \" + grade.replaceAll(\" \", \"\").toLowerCase() + \" =1 and chapter LIKE '%\" + chapter + \"%'\"));\r\n        else\r\n            dbData = database.gradesDao().valus(new SimpleSQLiteQuery(\"SELECT * FROM grades where \" + grade.replaceAll(\" \", \"\").toLowerCase() + \" =1 and chapter LIKE '%\" + chapter + \"%' AND is_complete=1\"));\r\n\r\n        Log.i(\"CHAPTER\", chapter);\r\n        Log.i(\"DB_DATA\", dbData + \"\");\r\n        try {\r\n            return dbData;\r\n        } catch (Exception e) {\r\n\r\n            return null;\r\n        }\r\n\r\n    }\r\n\r\n    public static List<Grades_data> gettingSubSubjectDataNew(GradeDatabase database, String grade, String chapter, boolean is_all_needed) {\r\n\r\n        List<Grades_data> dbData = new ArrayList<>();\r\n        if (is_all_needed)\r\n            dbData = database.gradesDao().valus(new SimpleSQLiteQuery(\"SELECT * FROM grades where \" + grade.replaceAll(\" \", \"\").toLowerCase() + \" =1 and chapter LIKE '%\" + chapter + \"%'\"));\r\n        else\r\n            dbData = database.gradesDao().valus(new SimpleSQLiteQuery(\"SELECT * FROM grades where \" + grade.replaceAll(\" \", \"\").toLowerCase() + \" =1 and chapter LIKE '%\" + chapter + \"%' AND is_complete=1\"));\r\n\r\n        Log.i(\"CHAPTER\", chapter);\r\n        Log.i(\"DB_DATA\", dbData + \"\");\r\n        try {\r\n            return dbData;\r\n        } catch (Exception e) {\r\n\r\n            return null;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public static long gettingCorrectValues(ProgressDataBase progressDataBase, String chapter, Boolean resultType) {\r\n\r\n        long value = 0;\r\n\r\n        if (resultType)\r\n            value = progressDataBase.progressDao().correctValues(new SimpleSQLiteQuery(\"SELECT correct FROM progressM where chapter LIKE '%\" + chapter + \"%'\"));\r\n        else\r\n            value = progressDataBase.progressDao().correctValues(new SimpleSQLiteQuery(\"SELECT wrong FROM progressM where chapter LIKE '%\" + chapter + \"%'\"));\r\n\r\n        Log.i(\"CHAPTER\", chapter);\r\n        Log.i(\"DB_DATA\", value + \"\");\r\n        try {\r\n            return value;\r\n        } catch (Exception e) {\r\n\r\n            return 0;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public static List<ProgressM> checkProgressAvailable(ProgressDataBase db, String id, String chapter, Date timeStamp, long time_spend, boolean is_data_needed) {\r\n\r\n        List<ProgressM> list = db.progressDao().isAvailable(chapter);\r\n\r\n        if (!is_data_needed) {\r\n            if (list.size() > 0) {\r\n                updateProgressData(db, id, chapter, time_spend);\r\n            } else {\r\n\r\n                addProgressData(db, id, chapter, timeStamp, time_spend);\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n\r\n    public static void updateProgressData(ProgressDataBase db, String subject, String chapter, long time_spend) {\r\n\r\n        try {\r\n            db.progressDao().update(time_spend, chapter);\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    public static void addProgressData(ProgressDataBase db, String id, String chapter, Date timeStamp, long time_spend) {\r\n\r\n        try {\r\n            Date date = new Date();\r\n            SimpleDateFormat formatter = new SimpleDateFormat(\"dd/MM/yyyy\");\r\n            DateFormat timeFormatter = new SimpleDateFormat(\"hh:mm:ss a\");\r\n            long diff = date.getTime() - timeStamp.getTime();\r\n            ProgressM progressM = new ProgressM();\r\n            progressM.correct = 0;\r\n            progressM.time_to_complete = diff;\r\n            progressM.wrong = 0;\r\n            progressM.time = timeFormatter.format(date) + \"\";\r\n            progressM.is_completed = \"Yes\";\r\n            progressM.sub_id = id;\r\n            progressM.chapter = chapter;\r\n            progressM.time_spend = time_spend;\r\n            progressM.date = formatter.format(date) + \"\";\r\n            progressM.timestamp = date.getTime();\r\n            db.progressDao().insertNotes(progressM);\r\n\r\n        } catch (Exception e) {\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public static void displayCustomDialog(Context context, String title, String body) {\r\n\r\n        HintDialog hintDialog = new HintDialog(context);\r\n        hintDialog.setCancelable(true);\r\n        hintDialog.setAlertTitle(title);\r\n        hintDialog.setAlertDesciption(body);\r\n\r\n        hintDialog.hideActionButton();\r\n        hintDialog.displayAnim();\r\n        hintDialog.setOnActionListener(viewId -> {\r\n\r\n            switch (viewId.getId()) {\r\n\r\n                case R.id.closeButton:\r\n                    hintDialog.dismiss();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        hintDialog.show();\r\n\r\n    }\r\n\r\n\r\n    public static String getPlanIds(int value) {\r\n\r\n        Map<Integer, String> planMap = new HashMap();\r\n        planMap.put(99, \"plan_Khu7N46QUAsX8P\");\r\n        planMap.put(299, \"plan_Khu84r5QKznMKm\");\r\n        return planMap.get(value);\r\n\r\n    }\r\n\r\n\r\n    public static void displayCustomDialogSubscribe(Context context, String title, String body, String priceText) {\r\n\r\n        HintDialog hintDialog = new HintDialog(context);\r\n        hintDialog.setCancelable(true);\r\n        hintDialog.setAlertTitle(title);\r\n        hintDialog.setAlertDesciption(body);\r\n        hintDialog.hideCloseButton();\r\n        hintDialog.displaySubscribeButton(priceText);\r\n        hintDialog.setOnActionListener(viewId -> {\r\n\r\n            switch (viewId.getId()) {\r\n\r\n                case R.id.closeButton:\r\n                    hintDialog.dismiss();\r\n                    break;\r\n                case R.id.gotoTextView:\r\n                    context.startActivity(new Intent(context, PaymentActivity.class));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        hintDialog.show();\r\n\r\n    }\r\n\r\n\r\n    public static boolean checkGrade(String grade) {\r\n\r\n\r\n        List<String> grades = new ArrayList<>();\r\n        grades.add(\"GRADE 1\");\r\n        grades.add(\"GRADE 2\");\r\n        grades.add(\"GRADE 3\");\r\n\r\n        if (grades.contains(grade))\r\n            return true;\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n\r\n    @SuppressLint(\"Range\")\r\n    public static void setEvent(Context context, TextInputLayout textInputLayout) throws ParseException {\r\n\r\n\r\n        Cursor cur = context.getContentResolver().query(CalendarContract.Calendars.CONTENT_URI, null, null, null, null);\r\n        try {\r\n\r\n\r\n            PrefConfig.writeIdInPref(context, textInputLayout.getEditText().getText().toString(), context.getResources().getString(R.string.timer_time));\r\n            SimpleDateFormat formatter = new SimpleDateFormat(\"yyyy/MM/dd HH:mm\");\r\n            SimpleDateFormat dateFormatter = new SimpleDateFormat(\"yyyy/MM/dd\");\r\n            Date currDate = new Date();\r\n            String datetime = dateFormatter.format(currDate) + \" \" + textInputLayout.getEditText().getText().toString().replace(\" \", \"\").split(\"-\")[0];\r\n            String endTime = \"2023/12/31 \" + textInputLayout.getEditText().getText().toString().replace(\" \", \"\").split(\"-\")[1];\r\n            //  String endTime=\"2023/08/12 06:30\";\r\n            var eventID = 0;\r\n            Calendar startCal = Calendar.getInstance();\r\n            startCal.setTime(formatter.parse(datetime));\r\n\r\n            Calendar endCal = Calendar.getInstance();\r\n            endCal.setTime(formatter.parse(endTime));\r\n            var eventdate = startCal.get(Calendar.YEAR) + \"/\" + startCal.get(Calendar.MONTH) + \"/\" + startCal.get(Calendar.DAY_OF_MONTH) + \" \" + startCal.get(Calendar.HOUR_OF_DAY) + \":\" + startCal.get(Calendar.MINUTE);\r\n            Log.e(\"event date\", eventdate);\r\n            // provide CalendarContract.Calendars.CONTENT_URI to\r\n            // ContentResolver to query calendars\r\n\r\n            if (cur.moveToFirst()) {\r\n\r\n                if (isEventInCal(context, eventID + \"\")) {\r\n                    return;\r\n                }\r\n                long calendarID = cur.getLong(cur.getColumnIndex(CalendarContract.Calendars._ID));\r\n                ContentValues eventValues = new ContentValues();\r\n                eventValues.put(CalendarContract.Events.DTSTART, ((startCal.getTimeInMillis())));\r\n                //eventValues.put(CalendarContract.Events.DTEND, ((endCal.getTimeInMillis())));\r\n                eventValues.put(CalendarContract.Events.DURATION, \"+P30M\");\r\n                eventValues.put(CalendarContract.Events.EVENT_TIMEZONE, TimeZone.getDefault().toString());\r\n                eventValues.put(CalendarContract.Events.CALENDAR_ID, calendarID);\r\n                eventValues.put(CalendarContract.Events.TITLE, \"It's time to study!\");\r\n                eventValues.put(CalendarContract.Events.RRULE, \"FREQ=DAILY;COUNT=20;BYDAY=MO,TU,WE,TH,FR;WKST=MO\");\r\n                eventValues.put(CalendarContract.Events.DESCRIPTION, \"BeyondSchool is waiting for your child to experience 20 mins Power-packed study session. Tap the link to open app \\n https://www.beyondschool.live/app\");\r\n                eventValues.put(CalendarContract.Events.ALL_DAY, false);\r\n                eventValues.put(CalendarContract.Events.HAS_ALARM, true);\r\n                eventValues.put(CalendarContract.Events.CUSTOM_APP_PACKAGE, context.getPackageName());\r\n                eventValues.put(CalendarContract.Events.CUSTOM_APP_URI, \"myAppointment://1\");\r\n\r\n                Uri eventUri = context.getContentResolver().insert(CalendarContract.Events.CONTENT_URI, eventValues);\r\n                eventID = (int) ContentUris.parseId(eventUri);\r\n\r\n\r\n                ContentValues reminder = new ContentValues();\r\n                reminder.put(CalendarContract.Reminders.EVENT_ID, eventID);\r\n                reminder.put(CalendarContract.Reminders.MINUTES, 5);\r\n\r\n                reminder.put(CalendarContract.Reminders.METHOD, CalendarContract.Reminders.METHOD_ALERT);\r\n                context.getContentResolver().insert(CalendarContract.Reminders.CONTENT_URI, reminder);\r\n\r\n                Toast.makeText(context, \"Event Added\", Toast.LENGTH_SHORT).show();\r\n                PrefConfig.writeIntInPref(context, (int) eventID, context.getResources().getString(R.string.calender_event_id));\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            Log.i(\"Error_Events\", e.getMessage());\r\n        } finally {\r\n            if (cur != null) {\r\n                cur.close();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    @SuppressLint(\"Range\")\r\n    public static void setEvent(Context context, TextInputLayout textInputLayout, EventAdded eventAdded) throws ParseException {\r\n\r\n\r\n        Cursor cur = context.getContentResolver().query(CalendarContract.Calendars.CONTENT_URI, null, null, null, null);\r\n        try {\r\n\r\n\r\n            PrefConfig.writeIdInPref(context, textInputLayout.getEditText().getText().toString(), context.getResources().getString(R.string.timer_time));\r\n            SimpleDateFormat formatter = new SimpleDateFormat(\"yyyy/MM/dd hh:mm aa\");\r\n            SimpleDateFormat dateFormatter = new SimpleDateFormat(\"yyyy/MM/dd\");\r\n            Date currDate = new Date();\r\n            String datetime = dateFormatter.format(currDate) + \" \" + textInputLayout.getEditText().getText().toString().split(\"-\")[0];\r\n\r\n            var eventID = 0;\r\n            Calendar startCal = Calendar.getInstance();\r\n            startCal.setTime(formatter.parse(datetime));\r\n\r\n            // provide CalendarContract.Calendars.CONTENT_URI to\r\n            // ContentResolver to query calendars\r\n\r\n            if (cur.moveToFirst()) {\r\n\r\n                if (isEventInCal(context, eventID + \"\")) {\r\n                    return;\r\n                }\r\n                long calendarID = cur.getLong(cur.getColumnIndex(CalendarContract.Calendars._ID));\r\n                ContentValues eventValues = new ContentValues();\r\n                eventValues.put(CalendarContract.Events.DTSTART, ((startCal.getTimeInMillis())));\r\n                //eventValues.put(CalendarContract.Events.DTEND, ((endCal.getTimeInMillis())));\r\n                eventValues.put(CalendarContract.Events.DURATION, \"+P30M\");\r\n                eventValues.put(CalendarContract.Events.EVENT_TIMEZONE, TimeZone.getDefault().toString());\r\n                eventValues.put(CalendarContract.Events.CALENDAR_ID, calendarID);\r\n                eventValues.put(CalendarContract.Events.TITLE, \"BeyondSchool is waiting for your child to experience 20 mins Power-packed study session!\");\r\n                eventValues.put(CalendarContract.Events.RRULE, \"FREQ=DAILY;COUNT=90;BYDAY=MO,TU,WE,TH,FR;WKST=MO\");\r\n                eventValues.put(CalendarContract.Events.DESCRIPTION, \"BeyondSchool is waiting for your child to experience 20 mins Power-packed study session. Tap the link to open app \\n https://www.beyondschool.live/app\");\r\n                eventValues.put(CalendarContract.Events.ALL_DAY, false);\r\n                eventValues.put(CalendarContract.Events.HAS_ALARM, true);\r\n                eventValues.put(CalendarContract.Events.CUSTOM_APP_PACKAGE, context.getPackageName());\r\n                eventValues.put(CalendarContract.Events.CUSTOM_APP_URI, \"myAppointment://1\");\r\n\r\n                Uri eventUri = context.getContentResolver().insert(CalendarContract.Events.CONTENT_URI, eventValues);\r\n                eventID = (int) ContentUris.parseId(eventUri);\r\n\r\n\r\n                ContentValues reminder = new ContentValues();\r\n                reminder.put(CalendarContract.Reminders.EVENT_ID, eventID);\r\n                reminder.put(CalendarContract.Reminders.MINUTES, 5);\r\n\r\n                reminder.put(CalendarContract.Reminders.METHOD, CalendarContract.Reminders.METHOD_ALERT);\r\n                context.getContentResolver().insert(CalendarContract.Reminders.CONTENT_URI, reminder);\r\n\r\n                Toast.makeText(context, \"Event Added\", Toast.LENGTH_SHORT).show();\r\n                eventAdded.eventAddedComplete();\r\n                PrefConfig.writeIntInPref(context, (int) eventID, context.getResources().getString(R.string.calender_event_id));\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            Log.i(\"Error_Events\", e.getMessage());\r\n        } finally {\r\n            if (cur != null) {\r\n                cur.close();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public static String checkUpdatePaymentStatus(Context context, String subscriptionId, FirebaseFirestore firebaseFirestore, FirebaseAuth mAuth, EnglishFragment englishFragment) throws ExecutionException, InterruptedException {\r\n\r\n        int val = PrefConfig.readIntInPref(context, context.getResources().getString(R.string.noOfdays), 0);\r\n        val += 1;\r\n        PrefConfig.writeIntDInPref(context, val, context.getResources().getString(R.string.noOfdays));\r\n        CallFirebaseForInfo.setNoOfDays(firebaseFirestore, mAuth, val);\r\n        try {\r\n            Subscription subscription = new FetchSubscriptionStatus(context, subscriptionId,englishFragment).execute().get();\r\n            Log.d(\"TAG\", \"checkUpdatePaymentStatus: \" + subscription.get(\"status\"));\r\n            PrefConfig.writeIdInPref(context, subscription.get(\"status\"), context.getResources().getString(R.string.payment_status));\r\n            return subscription.get(\"status\");\r\n        } catch (Exception e) {\r\n            PrefConfig.writeIdInPref(context, \"pending\", context.getResources().getString(R.string.payment_status));\r\n            return \"pending\";\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * CHECK WHETHER INTERNET CONNECTION IS AVAILABLE OR NOT\r\n     */\r\n    public static boolean checkConnection(Context context) {\r\n        final ConnectivityManager connMgr = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\r\n\r\n        NetworkInfo activeNetworkInfo = connMgr.getActiveNetworkInfo();\r\n\r\n        if (activeNetworkInfo != null) { // connected to the internet\r\n            // Toast.makeText(context, activeNetworkInfo.getTypeName(), Toast.LENGTH_SHORT).show();\r\n\r\n            if (activeNetworkInfo.getType() == ConnectivityManager.TYPE_WIFI) {\r\n                // connected to wifi\r\n                return true;\r\n            } else if (activeNetworkInfo.getType() == ConnectivityManager.TYPE_MOBILE) {\r\n                // connected to the mobile provider's data plan\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    public static boolean isEventInCal(Context context, String cal_meeting_id) {\r\n\r\n        Cursor cursor = context.getContentResolver().query(\r\n                Uri.parse(\"content://com.android.calendar/events\"),\r\n                new String[]{\"_id\"}, \" _id = ? \",\r\n                new String[]{cal_meeting_id}, null);\r\n\r\n        if (cursor.moveToFirst()) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    public interface EventAdded {\r\n\r\n        public void eventAddedComplete();\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/maths/beyond_school_280720220930/utils/UtilityFunctions.java b/app/src/main/java/com/maths/beyond_school_280720220930/utils/UtilityFunctions.java
--- a/app/src/main/java/com/maths/beyond_school_280720220930/utils/UtilityFunctions.java	(revision db9b50887546b04d80c55bf29a97888ffded6dae)
+++ b/app/src/main/java/com/maths/beyond_school_280720220930/utils/UtilityFunctions.java	(date 1669109742479)
@@ -30,6 +30,7 @@
 
 import androidx.annotation.LayoutRes;
 import androidx.annotation.Nullable;
+import androidx.annotation.RequiresApi;
 import androidx.sqlite.db.SimpleSQLiteQuery;
 
 import com.bumptech.glide.Glide;
@@ -776,6 +777,7 @@
     }
 
 
+    @RequiresApi(api = Build.VERSION_CODES.N)
     public static VocabularyCategoryModel getVocabularyDetailsFromType(List<VocabularyCategoryModel> models, VocabularyCategories type) {
         var filterList = models.stream().filter(model -> model.getCategory().equals(type.name())).collect(Collectors.toList());
         if (filterList.size() > 0) {
@@ -974,6 +976,7 @@
 
 
     // Format milisec to h: m: s
+    @RequiresApi(api = Build.VERSION_CODES.O)
     public static String formatTime(long diff) {
 
 
@@ -987,6 +990,7 @@
 
 
     // Calculates the age of kids
+    @RequiresApi(api = Build.VERSION_CODES.O)
     public static int calculateAge(String inputDate) {
 
         LocalDate curDate = LocalDate.now();
@@ -1041,6 +1045,7 @@
 
     }
 
+    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
     public void setStatusBarTransparent(Context mContext) {
         Window window = ((Activity) mContext).getWindow();
         window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
@@ -1147,13 +1152,13 @@
         Log.d("XXX", chapter);
         Log.d("XXX", dbData + "");
         for (int i = 0; i < dbData.size(); i++) {
-            Log.d("XXX", "updateDbUnlock: called " + dbData.get(i).chapter.equals(subSub) + subSub);
-            if (dbData.get(i).chapter.equals(subSub)) {
+            Log.d("XXX", "updateDbUnlock: called " + dbData.get(i).chapter_name.equals(subSub) + subSub);
+            if (dbData.get(i).chapter_name.equals(subSub)) {
                 Log.d("XXX", "updateDbUnlock: if");
                 try {
-                    database.gradesDao().updateIsComplete(true, dbData.get(i).chapter);
-                    database.gradesDao().update(true, dbData.get(i + 1).chapter);
-                    Log.d("XXX", dbData.get(i + 1).chapter);
+                    database.gradesDao().updateIsComplete(true, dbData.get(i).chapter_name);
+                    database.gradesDao().update(true, dbData.get(i + 1).chapter_name);
+                    Log.d("XXX", dbData.get(i + 1).chapter_name);
                     break;
                 } catch (Exception e) {
                     Log.e("XXX", e.getMessage());
