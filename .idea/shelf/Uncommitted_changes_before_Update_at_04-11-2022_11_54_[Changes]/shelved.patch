Index: app/src/main/java/com/maths/beyond_school_280720220930/Random_questions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.maths.beyond_school_280720220930;\r\n\r\nimport android.Manifest;\r\nimport android.app.NotificationManager;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.media.AudioManager;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.CountDownTimer;\r\nimport android.os.Handler;\r\nimport android.os.Looper;\r\nimport android.speech.SpeechRecognizer;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\nimport android.widget.ToggleButton;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\n\r\nimport com.airbnb.lottie.LottieAnimationView;\r\nimport com.google.android.material.bottomsheet.BottomSheetBehavior;\r\nimport com.google.firebase.analytics.FirebaseAnalytics;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\r\nimport com.maths.beyond_school_280720220930.SP.PrefConfig;\r\nimport com.maths.beyond_school_280720220930.database.log.LogDatabase;\r\nimport com.maths.beyond_school_280720220930.database.log.LogEntity;\r\nimport com.maths.beyond_school_280720220930.database.process.ProgressDataBase;\r\nimport com.maths.beyond_school_280720220930.database.process.ProgressM;\r\nimport com.maths.beyond_school_280720220930.extras.ReadText;\r\nimport com.maths.beyond_school_280720220930.extras.RecognizeVoice;\r\nimport com.maths.beyond_school_280720220930.model.KidsData;\r\nimport com.maths.beyond_school_280720220930.notification.StickyNotification;\r\nimport com.maths.beyond_school_280720220930.utils.UtilityFunctions;\r\n\r\nimport java.text.DateFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Date;\r\n\r\nimport io.reactivex.disposables.CompositeDisposable;\r\n\r\npublic class Random_questions extends AppCompatActivity implements RecognizeVoice.GetResult, ReadText.GetResultSpeech {\r\n    ImageView back, logInfo;\r\n    ToggleButton pause_play;\r\n    CardView card;\r\n    TextView Table, right_ans, wrong_ans, question_count, ans;\r\n    int counter, count = 1, TableValue, rtans = 0, wrans = 0, maxLearn = 0;\r\n    public int result = 0, time = 500;\r\n    String ToSet, set;\r\n    LinearLayout layout;\r\n    CountDownTimer countDownTimer;\r\n    CompositeDisposable disposableSpeech;\r\n    Boolean isActive = false, currRes = true;\r\n    RecognizeVoice recognizeVoice;\r\n    ReadText readText;\r\n    ProgressBar progressBarQuestion;\r\n    TextView logTextView;\r\n    LottieAnimationView mic;\r\n    AudioManager amanager;\r\n    int random;\r\n    boolean[] checkArray;\r\n    boolean flag;\r\n    int repeatRec = 0;\r\n    TextView tapInfoText;\r\n    ImageView bunnyImage;\r\n    NotificationManager nManager;\r\n    private CardView logPad;\r\n    private BottomSheetBehavior mBottomSheetBehavior;\r\n    TextView titleText;\r\n    FirebaseAnalytics mFirebaseAnalytics;\r\n    Bundle resultBundle;\r\n    Date start;\r\n    Date end;\r\n    Date timeStamp;\r\n    Toolbar toolbar;\r\n    long delayTime = 2000;\r\n    long delayAtTheEnd = 500;\r\n    String status;\r\n    private FirebaseAuth mAuth;\r\n    private FirebaseUser mCurrentUser;\r\n\r\n    private String kidsId = \"\", kidsName = \"\";\r\n    private int kidsAge = 0;\r\n    FirebaseFirestore kidsDb = FirebaseFirestore.getInstance();\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.M)\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_table_questions);\r\n        Intent intent = getIntent();\r\n        TableValue = intent.getIntExtra(\"ValueOfTable\", 0);\r\n        status = intent.getStringExtra(\"status\");\r\n        rtans = intent.getIntExtra(\"right\", 0);\r\n        wrans = intent.getIntExtra(\"wrong\", 0);\r\n        count = intent.getIntExtra(\"count\", 1);\r\n\r\n        mAuth = FirebaseAuth.getInstance();\r\n        mCurrentUser = mAuth.getCurrentUser();\r\n\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            retrieveKidsData();\r\n        }\r\n\r\n\r\n        try {\r\n            maxLearn = PrefConfig.readIntInPref(getApplicationContext(), getResources().getString(R.string.last_table));\r\n        } catch (Exception e) {\r\n        }\r\n\r\n\r\n        back = findViewById(R.id.imageViewBack);\r\n        card = findViewById(R.id.ShowTable);\r\n        pause_play = findViewById(R.id.playPause);\r\n\r\n        toolbar = (Toolbar) findViewById(R.id.toolBar);\r\n\r\n        logInfo = findViewById(R.id.logInfo);\r\n\r\n        if (PrefConfig.readIdInPref(getApplicationContext(), \"IS_LOG_ENABLE\").equals(\"true\")) {\r\n            logInfo.setVisibility(View.VISIBLE);\r\n\r\n        }\r\n\r\n        logInfo.setOnClickListener(v -> {\r\n            startActivity(new Intent(getApplicationContext(), LogActivity.class));\r\n        });\r\n\r\n        Table = findViewById(R.id.textView26);\r\n        question_count = findViewById(R.id.textView22);\r\n        bunnyImage = findViewById(R.id.bunny);\r\n        right_ans = findViewById(R.id.textView25);\r\n        wrong_ans = findViewById(R.id.textView36);\r\n        layout = findViewById(R.id.layout_set);\r\n        logTextView = findViewById(R.id.logTextView);\r\n        ans = findViewById(R.id.textView27);\r\n        right_ans.setText(String.valueOf(rtans));\r\n        mFirebaseAnalytics = FirebaseAnalytics.getInstance(getApplicationContext());\r\n        resultBundle = new Bundle();\r\n\r\n        wrong_ans.setText(String.valueOf(wrans));\r\n\r\n        logPad = findViewById(R.id.logCard);\r\n        mBottomSheetBehavior = BottomSheetBehavior.from(logPad);\r\n\r\n        progressBarQuestion = findViewById(R.id.questionProgress);\r\n        progressBarQuestion.setMax(10);\r\n        titleText = findViewById(R.id.titleText);\r\n        mic = findViewById(R.id.animationVoice);\r\n        tapInfoText = findViewById(R.id.tapInfoTextView);\r\n        checkArray = new boolean[11];\r\n        random = getRandomInteger(11, 1);\r\n        Arrays.fill(checkArray, false);\r\n        checkArray[0] = true;\r\n        nManager = ((NotificationManager) getApplicationContext().getSystemService(NotificationManager.class));\r\n\r\n\r\n        Table.setText(\"Table of \" + TableValue);\r\n\r\n        if (ContextCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO) != PackageManager.PERMISSION_GRANTED) {\r\n            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.RECORD_AUDIO}, 1);\r\n        }\r\n        mic.setVisibility(View.GONE);\r\n\r\n        amanager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);\r\n        recognizeVoice = new RecognizeVoice(Random_questions.this, this);\r\n        readText = new ReadText(getApplicationContext(), Random_questions.this);\r\n        counter = 0;\r\n\r\n        ArrayAdapter<CharSequence> adapter2 = ArrayAdapter.createFromResource(this, R.array.numbers2, android.R.layout.simple_spinner_item);\r\n        adapter2.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n\r\n\r\n        titleText.setText(\"Test\");\r\n        pause_play.setOnClickListener(view -> {\r\n            ans.setVisibility(View.VISIBLE);\r\n            tapInfoText.setVisibility(View.GONE);\r\n            ans.setText(\"?\");\r\n            if (pause_play.isChecked()) {\r\n                //  progressBar.setVisibility(View.VISIBLE);\r\n                timeStamp = new Date();\r\n                new StickyNotification(getApplicationContext(), Random_questions.class, \"| Table of \" + TableValue + \" | Random\").makeNotification();\r\n                if (count > 10)\r\n                    count = 1;\r\n\r\n                if (isActive) {\r\n                    readText.textToSpeech.stop();\r\n                    recognizeVoice.speech.stopListening();\r\n                }\r\n\r\n                isActive = true;\r\n                try {\r\n                    muteAudioStream();\r\n                    // amanager.setStreamMute(AudioManager.STREAM_SYSTEM, true);\r\n                } catch (Exception e) {\r\n\r\n                }\r\n\r\n                try {\r\n                    if (status.equals(\"practice\") && maxLearn > 1) {\r\n\r\n                        TableValue = getRandomInteger(maxLearn, 1);\r\n                        ReadFullTable(TableValue);\r\n                    } else {\r\n                        ReadFullTable(TableValue);\r\n                    }\r\n                } catch (InterruptedException e) {\r\n                    e.printStackTrace();\r\n                }\r\n                counter = 0;\r\n            }\r\n            if (!pause_play.isChecked()) {\r\n\r\n                isActive = false;\r\n\r\n                try {\r\n                    Thread.sleep(500);\r\n                } catch (InterruptedException e) {\r\n                    e.printStackTrace();\r\n                }\r\n                //progressBar.setVisibility(View.INVISIBLE);\r\n                mic.setVisibility(View.GONE);\r\n                readText.textToSpeech.stop();\r\n                recognizeVoice.speech.stopListening();\r\n                counter = 1;\r\n                nManager.cancelAll();\r\n\r\n                try {\r\n                    unMuteAudioStream();\r\n                    // amanager.setStreamMute(AudioManager.STREAM_SYSTEM, false);\r\n                } catch (Exception e) {\r\n\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n        back.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n\r\n                recognizeVoice.speech.stopListening();\r\n                readText.textToSpeech.shutdown();\r\n                isActive = false;\r\n                nManager.cancelAll();\r\n                try {\r\n                    unMuteAudioStream();\r\n                } catch (InterruptedException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n\r\n            }\r\n        });\r\n        logPadController();\r\n    }\r\n\r\n\r\n    @Override\r\n    protected void onStart() {\r\n        super.onStart();\r\n        Log.i(\"OnStart\", \"OnStart\");\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        super.onBackPressed();\r\n        isActive = false;\r\n\r\n        //progressBar.setVisibility(View.INVISIBLE);\r\n        mic.setVisibility(View.GONE);\r\n        readText.textToSpeech.stop();\r\n        recognizeVoice.speech.stopListening();\r\n        counter = 1;\r\n        nManager.cancelAll();\r\n        try {\r\n            unMuteAudioStream();\r\n            // amanager.setStreamMute(AudioManager.STREAM_SYSTEM, false);\r\n        } catch (Exception e) {\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public void ReadFullTable(int TableValue) throws InterruptedException {\r\n        //recognizeVoice.startListening();\r\n        unMuteAudioStream();\r\n        ans.setText(\"?\");\r\n        Log.i(\"InActivity\", \"ReadFullText\");\r\n\r\n\r\n        result = random * TableValue;\r\n\r\n        // isActive=true;\r\n\r\n        if (isActive) {\r\n            switch (random) {\r\n                case 1: {\r\n                    Log.i(\"InActivity\", random + \"\");\r\n                    ToSet = TableValue + \" ones are ?\";\r\n                    readText.read(ToSet);\r\n                    set = TableValue + \" X 1 =\";\r\n                    Table.setText(set);\r\n                    logTextView.setText(logTextView.getText().toString() + \"QUESTION: \" + ToSet + \"\\n\");\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    ToSet = TableValue + \" twos are ?\";\r\n                    readText.read(ToSet);\r\n                    set = TableValue + \" X 2 = \";\r\n                    Table.setText(set);\r\n                    logTextView.setText(logTextView.getText().toString() + \"QUESTION: \" + ToSet + \"\\n\");\r\n                    break;\r\n                }\r\n                case 3: {\r\n                    ToSet = TableValue + \" threes are ?\";\r\n                    readText.read(ToSet);\r\n                    set = TableValue + \" X 3 = \";\r\n                    Table.setText(set);\r\n                    logTextView.setText(logTextView.getText().toString() + \"QUESTION: \" + ToSet + \"\\n\");\r\n                    break;\r\n                }\r\n                case 4: {\r\n                    ToSet = TableValue + \" fours are ?\";\r\n                    readText.read(ToSet);\r\n                    set = TableValue + \" X 4 = \";\r\n                    Table.setText(set);\r\n                    logTextView.setText(logTextView.getText().toString() + \"QUESTION: \" + ToSet + \"\\n\");\r\n                    break;\r\n                }\r\n                case 5: {\r\n                    ToSet = TableValue + \" fives are ?\";\r\n                    readText.read(ToSet);\r\n                    set = TableValue + \" X 5 = \";\r\n                    Table.setText(set);\r\n                    logTextView.setText(logTextView.getText().toString() + \"QUESTION: \" + ToSet + \"\\n\");\r\n                    break;\r\n                }\r\n                case 6: {\r\n                    ToSet = TableValue + \" sixs are \";\r\n                    readText.read(ToSet);\r\n                    set = TableValue + \" X 6 = \";\r\n                    Table.setText(set);\r\n                    logTextView.setText(logTextView.getText().toString() + \"QUESTION: \" + ToSet + \"\\n\");\r\n                    break;\r\n                }\r\n                case 7: {\r\n                    ToSet = TableValue + \" sevens are \";\r\n                    readText.read(ToSet);\r\n                    set = TableValue + \" X 7 = \";\r\n                    Table.setText(set);\r\n                    logTextView.setText(logTextView.getText().toString() + \"QUESTION: \" + ToSet + \"\\n\");\r\n                    break;\r\n                }\r\n                case 8: {\r\n                    ToSet = TableValue + \" eights are \";\r\n                    readText.read(ToSet);\r\n                    set = TableValue + \" X 8 = \";\r\n                    Table.setText(set);\r\n                    logTextView.setText(logTextView.getText().toString() + \"QUESTION: \" + ToSet + \"\\n\");\r\n                    break;\r\n                }\r\n                case 9: {\r\n\r\n                    ToSet = TableValue + \" nines are ?\";\r\n                    readText.read(ToSet);\r\n                    set = TableValue + \" X 9 = \";\r\n                    Table.setText(set);\r\n                    logTextView.setText(logTextView.getText().toString() + \"QUESTION: \" + ToSet + \"\\n\");\r\n                    break;\r\n\r\n                }\r\n                case 10: {\r\n                    ToSet = TableValue + \" tens are \";\r\n                    readText.read(ToSet);\r\n                    set = TableValue + \" X 10 = \";\r\n                    Table.setText(set);\r\n                    logTextView.setText(logTextView.getText().toString() + \"QUESTION: \" + ToSet + \"\\n\");\r\n\r\n                    break;\r\n                }\r\n                case 11: {\r\n                    Toast.makeText(this, \"case 11\", Toast.LENGTH_SHORT).show();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (count == 10) {\r\n            pause_play.setEnabled(false);\r\n        }\r\n        if (count <= 10) {\r\n            question_count.setText(String.valueOf(count) + \"/10\");\r\n            progressBarQuestion.setProgress(count);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n        if (requestCode == 1) {\r\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n                Toast.makeText(this, \"permission granted\", Toast.LENGTH_SHORT).show();\r\n            } else {\r\n                Toast.makeText(this, \"permission denied\", Toast.LENGTH_SHORT).show();\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        isActive = false;\r\n        pause_play.setChecked(false);\r\n        mic.setVisibility(View.GONE);\r\n        readText.textToSpeech.stop();\r\n        recognizeVoice.speech.stopListening();\r\n        counter = 1;\r\n        try {\r\n            unMuteAudioStream();\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n        // amanager.setStreamMute(AudioManager.STREAM_SYSTEM, false);\r\n        //progressBar.setVisibility(View.INVISIBLE);\r\n\r\n        if (!logTextView.getText().toString().equals(\"LOG\")) {\r\n\r\n            if (PrefConfig.readIdInPref(getApplicationContext(), \"IS_LOG_ENABLE\").equals(\"true\")) {\r\n                addData();\r\n            }\r\n            addProgressData();\r\n        }\r\n\r\n        last_status();\r\n        try {\r\n\r\n            if (count >= 10) {\r\n                if (PrefConfig.readIntInPref(getApplicationContext(), getResources().getString(R.string.last_table)) < TableValue) {\r\n                    PrefConfig.writeIntInPref(getApplicationContext(), TableValue, getResources().getString(R.string.last_table));\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n        }\r\n\r\n//        recognizeVoice.speech.destroy();\r\n        super.onPause();\r\n        Log.i(\"activity\", \"onPause\");\r\n\r\n    }\r\n\r\n    private void last_status() {\r\n\r\n        try {\r\n            if (count < 11) {\r\n\r\n                PrefConfig.writeIntInPref(getApplicationContext(), TableValue, getResources().getString(R.string.multiplicand));\r\n                PrefConfig.writeIntInPref(getApplicationContext(), count, getResources().getString(R.string.multiplier));\r\n                PrefConfig.writeIntInPref(getApplicationContext(), rtans, getResources().getString(R.string.right));\r\n                PrefConfig.writeIntInPref(getApplicationContext(), wrans, getResources().getString(R.string.wrong));\r\n                PrefConfig.writeIdInPref(getApplicationContext(), status, getResources().getString(R.string.status));\r\n\r\n            } else {\r\n\r\n            }\r\n        } catch (Exception e) {\r\n        }\r\n\r\n    }\r\n\r\n    private void addData() {\r\n\r\n        try {\r\n            LogDatabase db = LogDatabase.getDbInstance(this.getApplicationContext());\r\n            LogEntity logInfo = new LogEntity(\"\", \"\");\r\n//            logInfo.log_content = logTextView.getText().toString();\r\n//            logInfo.timestamp = timeStamp.getTime() + \"\";\r\n\r\n            db.logDao().insertNotes(logInfo);\r\n        } catch (Exception e) {\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private void addProgressData() {\r\n\r\n        try {\r\n            Date date = new Date();\r\n            SimpleDateFormat formatter = new SimpleDateFormat(\"dd/MM/yyyy\");\r\n            DateFormat timeFormatter = new SimpleDateFormat(\"hh:mm:ss a\");\r\n\r\n            long diff = date.getTime() - timeStamp.getTime();\r\n            ProgressDataBase db = ProgressDataBase.getDbInstance(this.getApplicationContext());\r\n            ProgressM progressM = new ProgressM();\r\n            progressM.correct = rtans;\r\n            progressM.time_to_complete = diff;\r\n            progressM.wrong = wrans;\r\n            progressM.time = timeFormatter.format(date) + \"\";\r\n            progressM.is_completed = \"Yes\";\r\n            progressM.table = TableValue + \"\";\r\n            progressM.date = formatter.format(date) + \"\";\r\n            progressM.timestamp = date.getTime();\r\n            db.progressDao().insertNotes(progressM);\r\n\r\n        } catch (Exception e) {\r\n\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        amanager.setStreamMute(AudioManager.STREAM_SYSTEM, true);\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        nManager.cancelAll();\r\n        recognizeVoice.speech.stopListening();\r\n        recognizeVoice.speech.destroy();\r\n        mic.setVisibility(View.GONE);\r\n        try {\r\n            unMuteAudioStream();\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n//        amanager.setStreamMute(AudioManager.STREAM_SYSTEM, false);\r\n    }\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.O)\r\n    @Override\r\n    public void gettingResult(String title) throws InterruptedException {\r\n\r\n        Log.i(\"InActivity\", \"onResult\" + title);\r\n\r\n        ans.setText(title);\r\n        Boolean lcsResult = new UtilityFunctions().matchingSeq(title.trim(), result + \"\");\r\n\r\n\r\n        count++;\r\n        checkArray[random] = true;\r\n        random = getRandomInteger(11, 1);\r\n        for (int i = 0; i < 11; i++) {\r\n            if (checkArray[i] == false) {\r\n                flag = false;\r\n                break;\r\n            } else flag = true;\r\n        }\r\n        Log.i(\"rendom\", String.valueOf(flag));\r\n        while (true) {\r\n\r\n            if (flag == true) {\r\n                break;\r\n            }\r\n            if (checkArray[random] == true) {\r\n                random = getRandomInteger(11, 1);\r\n                Log.i(\"rendom\", String.valueOf(random));\r\n            } else break;\r\n        }\r\n        recognizeVoice.stopListening();\r\n        mic.setVisibility(View.GONE);\r\n\r\n        try {\r\n            unMuteAudioStream();\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n        try {\r\n            if (lcsResult) {\r\n\r\n                end = new Date();\r\n                long diff = end.getTime() - start.getTime();\r\n                logTextView.setText(logTextView.getText().toString() + new UtilityFunctions().formatTime(diff) + \"\\n\");\r\n\r\n                sendAnalyticsData(result + \"\", title, true, (int) (diff / 1000), Table.getText().toString());\r\n                delayTime = 1500;\r\n                delayAtTheEnd = 900;\r\n                rtans++;\r\n                readText.read(\"CORRECT\");\r\n                right_ans.setText(String.valueOf(rtans));\r\n            } else {\r\n                end = new Date();\r\n                long diff = end.getTime() - start.getTime();\r\n                logTextView.setText(logTextView.getText().toString() + new UtilityFunctions().formatTime(diff) + \"\\n\");\r\n                sendAnalyticsData(result + \"\", title, false, (int) (diff / 1000), Table.getText().toString());\r\n                delayTime = 3000;\r\n                delayAtTheEnd = 1800;\r\n                wrans++;\r\n                readText.read(\"INCORRECT, Correct is \" + result);\r\n                wrong_ans.setText(String.valueOf(wrans));\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            end = new Date();\r\n            long diff = end.getTime() - start.getTime();\r\n            logTextView.setText(logTextView.getText().toString() + new UtilityFunctions().formatTime(diff) + \"\\n\");\r\n            sendAnalyticsData(result + \"\", title, true, (int) (diff / 1000), Table.getText().toString());\r\n            delayTime = 3000;\r\n            delayAtTheEnd = 1800;\r\n            readText.read(\"INCORRECT, Correct is \" + result);\r\n            wrans++;\r\n            wrong_ans.setText(String.valueOf(wrans));\r\n        }\r\n        if (count > 10) {\r\n            Log.i(\"inactivity\", \"gt10\");\r\n\r\n            unMuteAudioStream();\r\n            Thread.sleep(delayAtTheEnd);\r\n            Intent intent = new Intent(Random_questions.this, ScoreActivity.class);\r\n            intent.putExtra(\"score\", rtans);\r\n            intent.putExtra(\"activity\", \"random\");\r\n            intent.putExtra(\"status\", status);\r\n            intent.putExtra(\"tname\", TableValue);\r\n            startActivity(intent);\r\n            finish();\r\n        }\r\n\r\n\r\n        Handler handler = new Handler();\r\n        final Runnable r = new Runnable() {\r\n            public void run() {\r\n                if (count <= 10) {\r\n                    if (counter == 0)\r\n                        isActive = true;\r\n                    repeatRec = 0;\r\n                    try {\r\n                        if (status.equals(\"practice\") && maxLearn > 1) {\r\n\r\n                            TableValue = getRandomInteger(maxLearn, 1);\r\n                            ReadFullTable(TableValue);\r\n                        } else {\r\n                            ReadFullTable(TableValue);\r\n                        }\r\n                    } catch (InterruptedException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    recognizeVoice.stopListening();\r\n                } else {\r\n                    recognizeVoice.stopListening();\r\n                    //   mic.setVisibility(View.GONE);\r\n                }\r\n            }\r\n        };\r\n        handler.postDelayed(r, delayTime);\r\n\r\n\r\n    }\r\n\r\n    private void logPadController() {\r\n\r\n        if (PrefConfig.readIdInPref(getApplicationContext(), getResources().getString(R.string.log_check)).equals(\"true\")) {\r\n\r\n\r\n            bunnyImage.setOnClickListener(v -> {\r\n\r\n                if (mBottomSheetBehavior.getState() != BottomSheetBehavior.STATE_EXPANDED) {\r\n                    mBottomSheetBehavior.setState(BottomSheetBehavior.STATE_EXPANDED);\r\n\r\n                } else {\r\n                    mBottomSheetBehavior.setState(BottomSheetBehavior.STATE_COLLAPSED);\r\n                }\r\n\r\n            });\r\n\r\n\r\n            // doing some stuffs when bottom sheet is opening or closing like roatting button icon............................\r\n            mBottomSheetBehavior.addBottomSheetCallback(new BottomSheetBehavior.BottomSheetCallback() {\r\n                @Override\r\n                public void onStateChanged(@NonNull View bottomSheet, int newState) {\r\n\r\n\r\n                }\r\n\r\n                @Override\r\n                public void onSlide(@NonNull View bottomSheet, float slideOffset) {\r\n\r\n\r\n                }\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.O)\r\n    private void retrieveKidsData() {\r\n\r\n        kidsDb.collection(\"users\").document(mCurrentUser.getUid()).collection(\"kids\").get()\r\n                .addOnSuccessListener(queryDocumentSnapshots -> {\r\n\r\n\r\n                    if (queryDocumentSnapshots.isEmpty()) {\r\n                        //     Toast.makeText(this, \"No data\", Toast.LENGTH_SHORT).show();\r\n                        Log.i(\"No_data\", \"No_data\");\r\n                    } else {\r\n                        for (QueryDocumentSnapshot queryDocumentSnapshot : queryDocumentSnapshots) {\r\n\r\n                            KidsData kidsData = queryDocumentSnapshot.toObject(KidsData.class);\r\n                            kidsData.setKids_id(queryDocumentSnapshot.getId());\r\n                            kidsId = kidsData.getKids_id();\r\n                            kidsName = kidsData.getName();\r\n\r\n                            kidsAge = new UtilityFunctions().calculateAge(kidsData.getAge());\r\n\r\n                            Log.i(\"KidsData\", kidsData.getName() + \"\");\r\n                        }\r\n                    }\r\n\r\n                });\r\n    }\r\n\r\n    public void unMuteAudioStream() throws InterruptedException {\r\n        Thread.sleep(500);\r\n        amanager.setStreamMute(AudioManager.STREAM_SYSTEM, false);\r\n\r\n        try {\r\n            amanager.setStreamMute(AudioManager.STREAM_DTMF, false);\r\n        } catch (Exception e) {\r\n        }\r\n        //\r\n        amanager.setStreamMute(AudioManager.STREAM_NOTIFICATION, false);\r\n        amanager.setStreamMute(AudioManager.STREAM_ACCESSIBILITY, false);\r\n        logTextView.setText(logTextView.getText().toString() + \"AudioSate: unMute\\n\");\r\n    }\r\n\r\n    public void muteAudioStream() {\r\n        amanager.setStreamMute(AudioManager.STREAM_SYSTEM, true);\r\n        try {\r\n            amanager.setStreamMute(AudioManager.STREAM_DTMF, true);\r\n        } catch (Exception e) {\r\n        }\r\n        amanager.setStreamMute(AudioManager.STREAM_NOTIFICATION, true);\r\n        amanager.setStreamMute(AudioManager.STREAM_ACCESSIBILITY, true);\r\n        logTextView.setText(logTextView.getText().toString() + \"AudioSate: mute\\n\");\r\n    }\r\n\r\n    @Override\r\n    public void getLogResult(String title) {\r\n\r\n        logTextView.setText(logTextView.getText().toString() + title);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void errorAction(int i) throws InterruptedException {\r\n        Log.i(\"Error\", \"err\");\r\n\r\n\r\n        if (count <= 10 && i == SpeechRecognizer.ERROR_NO_MATCH) {\r\n            mic.setVisibility(View.GONE);\r\n\r\n\r\n            if (repeatRec < 3) {\r\n                repeatRec++;\r\n                //  Toast.makeText(this, \"attempt\"+repeatRec, Toast.LENGTH_SHORT).show();\r\n                recognizeVoice.startListening();\r\n                mic.setVisibility(View.VISIBLE);\r\n            } else {\r\n                try {\r\n                    Handler handler = new Handler();\r\n                    final Runnable r = new Runnable() {\r\n                        public void run() {\r\n                            if (counter == 0)\r\n                                isActive = true;\r\n                            repeatRec = 0;\r\n                            try {\r\n                                if (status.equals(\"practice\") && maxLearn > 1) {\r\n\r\n                                    TableValue = getRandomInteger(maxLearn, 1);\r\n                                    ReadFullTable(TableValue);\r\n                                } else {\r\n                                    ReadFullTable(TableValue);\r\n                                }\r\n                            } catch (InterruptedException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                        }\r\n                    };\r\n                    handler.postDelayed(r, 1000);\r\n                } catch (Exception e) {\r\n                    if (counter == 0)\r\n                        isActive = true;\r\n\r\n                    if (status.equals(\"practice\") && maxLearn > 1) {\r\n\r\n                        TableValue = getRandomInteger(maxLearn, 1);\r\n                        ReadFullTable(TableValue);\r\n                    } else {\r\n                        ReadFullTable(TableValue);\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        if (count > 10) {\r\n\r\n\r\n//            Log.i(\"inactivity\",\"gt10\");\r\n//            Thread.sleep(delayAtTheEnd);\r\n////            counter = 0;\r\n////            pause_play.setChecked(false);\r\n////            rtans = 0;\r\n////            wrans = 0;\r\n////            right_ans.setText(\"0\");\r\n////            wrong_ans.setText(\"0\");\r\n////            amanager.setStreamMute(AudioManager.STREAM_SYSTEM, false);\r\n////            collectdata.setText(\"\");\r\n////            ans.setText(\"\");\r\n////            nManager.cancelAll();\r\n////            progressBarQuestion.setProgress(0);\r\n////            question_count.setText(String.valueOf(0) + \"/10\");\r\n////            pause_play.setEnabled(true);\r\n//            unMuteAudioStream();\r\n//            Intent intent=new Intent(Random_questions.this,ScoreActivity.class);\r\n//            intent.putExtra(\"score\",rtans);\r\n//            intent.putExtra(\"activity\",\"random\");\r\n//            intent.putExtra(\"status\",status);\r\n//            intent.putExtra(\"tname\",TableValue);\r\n//            startActivity(intent);\r\n//            finish();\r\n\r\n//            Handler handler = new Handler();\r\n//            final Runnable r = new Runnable() {\r\n//                public void run() {\r\n//\r\n//                    counter = 0;\r\n//                    pause_play.setChecked(false);\r\n//                    rtans = 0;\r\n//                    wrans = 0;\r\n//                    right_ans.setText(\"0\");\r\n//                    wrong_ans.setText(\"0\");\r\n//                    amanager.setStreamMute(AudioManager.STREAM_SYSTEM, false);\r\n//                    collectdata.setText(\"\");\r\n//                    ans.setText(\"\");\r\n//                    nManager.cancelAll();\r\n//                }\r\n//            };\r\n//            handler.postDelayed(r, 1000);\r\n\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    @Override\r\n    public void gettingResultSpeech() {\r\n\r\n        final Handler handler = new Handler(Looper.getMainLooper());\r\n        handler.postDelayed(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n\r\n                Log.i(\"InActivityrun\", \"OnDone\");\r\n                if (isActive) {\r\n                    currRes = true;\r\n                    isActive = false;\r\n                    muteAudioStream();\r\n                    recognizeVoice.startListening();\r\n                    mic.setVisibility(View.VISIBLE);\r\n                    start = new Date();\r\n                }\r\n\r\n            }\r\n        }, 80);\r\n    }\r\n\r\n    public static int getRandomInteger(int maximum, int minimum) {\r\n        return ((int) (Math.random() * (maximum - minimum))) + minimum;\r\n    }\r\n\r\n\r\n    public void sendAnalyticsData(String result, String detected, Boolean tag, int timeTaken, String s) {\r\n\r\n        resultBundle.putString(\"original_result\", result);\r\n        resultBundle.putInt(\"table\", TableValue);\r\n        resultBundle.putString(\"detected_result\", detected);\r\n        resultBundle.putBoolean(\"is_correct\", tag);\r\n        resultBundle.putInt(\"timeTaken\", timeTaken);\r\n        resultBundle.putString(\"question\", s);\r\n        resultBundle.putString(\"question\", s);\r\n        resultBundle.putString(\"parent_id\", mCurrentUser.getUid());\r\n        resultBundle.putString(\"kids_id\", kidsId);\r\n        resultBundle.putString(\"kids_name\", kidsName);\r\n        resultBundle.putInt(\"kids_age\", kidsAge);\r\n        if (status.equals(\"practice\"))\r\n            resultBundle.putString(\"type\", \"maths_multiplication_table_learning\");\r\n        else\r\n            resultBundle.putString(\"type\", \"maths_multiplication_random\");\r\n        mFirebaseAnalytics.logEvent(\"maths\", resultBundle);\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/maths/beyond_school_280720220930/Random_questions.java b/app/src/main/java/com/maths/beyond_school_280720220930/Random_questions.java
--- a/app/src/main/java/com/maths/beyond_school_280720220930/Random_questions.java	(revision b40401d29ed89e0bcba3248488be6dbf0a5a82c6)
+++ b/app/src/main/java/com/maths/beyond_school_280720220930/Random_questions.java	(date 1667541517758)
@@ -521,7 +521,7 @@
             progressM.wrong = wrans;
             progressM.time = timeFormatter.format(date) + "";
             progressM.is_completed = "Yes";
-            progressM.table = TableValue + "";
+         //   progressM.table = TableValue + "";
             progressM.date = formatter.format(date) + "";
             progressM.timestamp = date.getTime();
             db.progressDao().insertNotes(progressM);
Index: app/src/main/java/com/maths/beyond_school_280720220930/table_questions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.maths.beyond_school_280720220930;\r\n\r\nimport static android.os.PowerManager.PARTIAL_WAKE_LOCK;\r\n\r\nimport android.Manifest;\r\nimport android.app.NotificationManager;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.media.AudioManager;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.CountDownTimer;\r\nimport android.os.Handler;\r\nimport android.os.Looper;\r\nimport android.os.PowerManager;\r\nimport android.speech.SpeechRecognizer;\r\nimport android.util.Log;\r\nimport android.view.Menu;\r\nimport android.view.MenuInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\nimport android.widget.ToggleButton;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\n\r\nimport com.airbnb.lottie.LottieAnimationView;\r\nimport com.google.android.material.bottomsheet.BottomSheetBehavior;\r\nimport com.google.firebase.analytics.FirebaseAnalytics;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\r\nimport com.maths.beyond_school_280720220930.SP.PrefConfig;\r\nimport com.maths.beyond_school_280720220930.database.log.LogDatabase;\r\nimport com.maths.beyond_school_280720220930.database.log.LogEntity;\r\nimport com.maths.beyond_school_280720220930.database.process.ProgressDataBase;\r\nimport com.maths.beyond_school_280720220930.database.process.ProgressM;\r\nimport com.maths.beyond_school_280720220930.extras.ReadText;\r\nimport com.maths.beyond_school_280720220930.extras.RecognizeVoice;\r\nimport com.maths.beyond_school_280720220930.model.KidsData;\r\nimport com.maths.beyond_school_280720220930.notification.StickyNotification;\r\nimport com.maths.beyond_school_280720220930.utils.UtilityFunctions;\r\n\r\nimport java.text.DateFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\n\r\nimport io.reactivex.disposables.CompositeDisposable;\r\nimport io.reactivex.subjects.BehaviorSubject;\r\n\r\npublic class table_questions extends AppCompatActivity implements RecognizeVoice.GetResult, ReadText.GetResultSpeech {\r\n    ImageView back, logInfo;\r\n    ToggleButton pause_play;\r\n    CardView card;\r\n    TextView Table, right_ans, wrong_ans, question_count, ans;\r\n    int counter, count = 1, TableValue, rtans = 0, wrans = 0;\r\n    public int result = 0, time = 500;\r\n    String ToSet, set;\r\n    LinearLayout layout;\r\n    CountDownTimer countDownTimer;\r\n    CompositeDisposable disposableSpeech;\r\n    Boolean isActive = false, currRes = true;\r\n    RecognizeVoice recognizeVoice;\r\n    ReadText readText;\r\n    ProgressBar progressBarQuestion;\r\n    TextView collectdata;\r\n    LottieAnimationView mic;\r\n    AudioManager amanager;\r\n    NotificationManager nManager;\r\n    TextView titleText, logTextView;\r\n    private CardView logPad;\r\n    int repeatRec = 0;\r\n    TextView tapInfoText;\r\n    ImageView bunnyImage;\r\n    private BottomSheetBehavior mBottomSheetBehavior;\r\n    FirebaseAnalytics mFirebaseAnalytics;\r\n    public static BehaviorSubject<Integer> resultState = BehaviorSubject.create();\r\n    Bundle resultBundle;\r\n    Toolbar toolbar;\r\n    Date start;\r\n    Date end;\r\n    Date timeStamp;\r\n    long delayTime = 2000;\r\n    long delayAtTheEnd = 500;\r\n    String status;\r\n    FirebaseAuth mAuth;\r\n    FirebaseUser mCurrentUser;\r\n\r\n    String kidsId = \"\", kidsName = \"\";\r\n\r\n    FirebaseFirestore kidsDb = FirebaseFirestore.getInstance();\r\n    private int kidsAge = 0;\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.M)\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_table_questions);\r\n\r\n        Context mContext = getApplicationContext();\r\n        PowerManager powerManager = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);\r\n        final PowerManager.WakeLock wakeLock = powerManager.newWakeLock(PARTIAL_WAKE_LOCK, \"motionDetection:keepAwake\");\r\n        wakeLock.acquire();\r\n\r\n        mAuth = FirebaseAuth.getInstance();\r\n        mCurrentUser = mAuth.getCurrentUser();\r\n\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            retrieveKidsData();\r\n        }\r\n\r\n        logInfo = findViewById(R.id.logInfo);\r\n\r\n        if (PrefConfig.readIdInPref(getApplicationContext(), \"IS_LOG_ENABLE\").equals(\"true\")) {\r\n            logInfo.setVisibility(View.VISIBLE);\r\n\r\n        }\r\n\r\n        logInfo.setOnClickListener(v -> {\r\n            startActivity(new Intent(getApplicationContext(), LogActivity.class));\r\n        });\r\n\r\n        setSupportActionBar(toolbar);\r\n\r\n\r\n        mFirebaseAnalytics = FirebaseAnalytics.getInstance(mContext);\r\n        resultBundle = new Bundle();\r\n\r\n        resultState.onNext(result);\r\n        nManager = ((NotificationManager) getApplicationContext().getSystemService(NotificationManager.class));\r\n        Intent intent = getIntent();\r\n        TableValue = intent.getIntExtra(\"ValueOfTable\", 0);\r\n        status = intent.getStringExtra(\"status\");\r\n        count = intent.getIntExtra(\"count\", 1);\r\n        rtans = intent.getIntExtra(\"right\", 0);\r\n        wrans = intent.getIntExtra(\"wrong\", 0);\r\n\r\n        back = findViewById(R.id.imageViewBack);\r\n        card = findViewById(R.id.ShowTable);\r\n        pause_play = findViewById(R.id.playPause);\r\n        Table = findViewById(R.id.textView26);\r\n        question_count = findViewById(R.id.textView22);\r\n        right_ans = findViewById(R.id.textView25);\r\n        wrong_ans = findViewById(R.id.textView36);\r\n        layout = findViewById(R.id.layout_set);\r\n        ans = findViewById(R.id.textView27);\r\n        right_ans.setText(String.valueOf(rtans));\r\n        logTextView = findViewById(R.id.logTextView);\r\n        titleText = findViewById(R.id.titleText);\r\n        wrong_ans.setText(String.valueOf(wrans));\r\n        bunnyImage = findViewById(R.id.bunny);\r\n//        disposableSpeech=new CompositeDisposable();\r\n        progressBarQuestion = findViewById(R.id.questionProgress);\r\n        progressBarQuestion.setMax(10);\r\n        tapInfoText = findViewById(R.id.tapInfoTextView);\r\n        logPad = findViewById(R.id.logCard);\r\n        mBottomSheetBehavior = BottomSheetBehavior.from(logPad);\r\n       // collectdata = findViewById(R.id.textView24);\r\n        collectdata.setVisibility(View.GONE);\r\n        mic = findViewById(R.id.animationVoice);\r\n\r\n        //15:23\r\n\r\n\r\n        Table.setText(\"Table of \" + TableValue);\r\n\r\n        if (ContextCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO) != PackageManager.PERMISSION_GRANTED) {\r\n            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.RECORD_AUDIO}, 1);\r\n        }\r\n        mic.setVisibility(View.GONE);\r\n\r\n        amanager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);\r\n\r\n        recognizeVoice = new RecognizeVoice(table_questions.this, this);\r\n        readText = new ReadText(getApplicationContext(), table_questions.this);\r\n        counter = 0;\r\n        ArrayAdapter<CharSequence> adapter2 = ArrayAdapter.createFromResource(this, R.array.numbers2, android.R.layout.simple_spinner_item);\r\n        adapter2.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n\r\n\r\n        titleText.setText(\"Practice Table\");\r\n\r\n        pause_play.setOnClickListener(view -> {\r\n\r\n            ans.setVisibility(View.VISIBLE);\r\n            ans.setText(\"?\");\r\n            tapInfoText.setVisibility(View.GONE);\r\n\r\n            if (pause_play.isChecked()) {\r\n\r\n                timeStamp = new Date();\r\n                muteAudioStream();\r\n                //  progressBar.setVisibility(View.VISIBLE);\r\n                if (count > 10)\r\n                    count = 1;\r\n                if (isActive) {\r\n                    readText.textToSpeech.stop();\r\n                    recognizeVoice.speech.stopListening();\r\n                }\r\n\r\n                isActive = true;\r\n\r\n                //amanager.setStreamMute(AudioManager.STREAM_SYSTEM, true);\r\n                try {\r\n                    ReadFullTable(TableValue);\r\n                } catch (InterruptedException e) {\r\n                    e.printStackTrace();\r\n                }\r\n                counter = 0;\r\n\r\n                new StickyNotification(getApplicationContext(), table_questions.class, \"Table of \" + TableValue + \" | without hint\").makeNotification();\r\n\r\n            }\r\n            if (!pause_play.isChecked()) {\r\n                pauseAll();\r\n                try {\r\n                    unMuteAudioStream();\r\n                } catch (InterruptedException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n                nManager.cancelAll();\r\n            }\r\n        });\r\n\r\n\r\n        back.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n                nManager.cancelAll();\r\n                recognizeVoice.speech.stopListening();\r\n                readText.textToSpeech.shutdown();\r\n                isActive = false;\r\n                // amanager.setStreamMute(AudioManager.STREAM_SYSTEM, false);\r\n                try {\r\n                    unMuteAudioStream();\r\n                } catch (InterruptedException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n            }\r\n        });\r\n        logPadController();\r\n    }\r\n\r\n\r\n    @Override\r\n    protected void onStart() {\r\n        super.onStart();\r\n        Log.i(\"OnStart\", \"OnStart\");\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        MenuInflater inflater = getMenuInflater();\r\n        inflater.inflate(R.menu.log_menu, menu);\r\n        return true;\r\n\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(@NonNull MenuItem item) {\r\n        switch (item.getItemId()) {\r\n            case R.id.action_log:\r\n                if (PrefConfig.readIdInPref(getApplicationContext(), \"IS_LOG_ENABLE\").equals(\"true\")) {\r\n                    startActivity(new Intent(getApplicationContext(), LogActivity.class));\r\n                }\r\n                return true;\r\n            default:\r\n                return super.onOptionsItemSelected(item);\r\n        }\r\n    }\r\n\r\n\r\n    public void unMuteAudioStream() throws InterruptedException {\r\n        Thread.sleep(500);\r\n        amanager.setStreamMute(AudioManager.STREAM_SYSTEM, false);\r\n\r\n        try {\r\n            amanager.setStreamMute(AudioManager.STREAM_DTMF, false);\r\n        } catch (Exception e) {\r\n        }\r\n        //\r\n        amanager.setStreamMute(AudioManager.STREAM_NOTIFICATION, false);\r\n        amanager.setStreamMute(AudioManager.STREAM_ACCESSIBILITY, false);\r\n\r\n        logTextView.setText(logTextView.getText().toString() + \"AudioSate: unMute\\n\");\r\n    }\r\n\r\n    public void muteAudioStream() {\r\n        amanager.setStreamMute(AudioManager.STREAM_SYSTEM, true);\r\n        try {\r\n            amanager.setStreamMute(AudioManager.STREAM_DTMF, true);\r\n        } catch (Exception e) {\r\n        }\r\n        amanager.setStreamMute(AudioManager.STREAM_NOTIFICATION, true);\r\n        amanager.setStreamMute(AudioManager.STREAM_ACCESSIBILITY, true);\r\n        logTextView.setText(logTextView.getText().toString() + \"AudioSate: mute\\n\");\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        super.onBackPressed();\r\n        nManager.cancelAll();\r\n        //  amanager.setStreamMute(AudioManager.STREAM_SYSTEM, false);\r\n        try {\r\n            unMuteAudioStream();\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n        recognizeVoice.speech.stopListening();\r\n        readText.textToSpeech.shutdown();\r\n        isActive = false;\r\n\r\n\r\n\r\n    }\r\n\r\n    public void pauseAll() {\r\n\r\n        isActive = false;\r\n        // amanager.setStreamMute(AudioManager.STREAM_SYSTEM, false);\r\n        try {\r\n            unMuteAudioStream();\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n        //   progressBar.setVisibility(View.INVISIBLE);\r\n        pause_play.setChecked(false);\r\n        mic.setVisibility(View.GONE);\r\n        readText.textToSpeech.stop();\r\n        recognizeVoice.speech.stopListening();\r\n        counter = 1;\r\n\r\n    }\r\n\r\n\r\n    private void logPadController() {\r\n\r\n\r\n        if (PrefConfig.readIdInPref(getApplicationContext(), \"IS_LOG_ENABLE\").equals(\"true\")) {\r\n            bunnyImage.setOnClickListener(v -> {\r\n\r\n                if (mBottomSheetBehavior.getState() != BottomSheetBehavior.STATE_EXPANDED) {\r\n                    mBottomSheetBehavior.setState(BottomSheetBehavior.STATE_EXPANDED);\r\n\r\n                } else {\r\n                    mBottomSheetBehavior.setState(BottomSheetBehavior.STATE_COLLAPSED);\r\n                }\r\n\r\n            });\r\n\r\n\r\n            // doing some stuffs when bottom sheet is opening or closing like roatting button icon............................\r\n            mBottomSheetBehavior.addBottomSheetCallback(new BottomSheetBehavior.BottomSheetCallback() {\r\n                @Override\r\n                public void onStateChanged(@NonNull View bottomSheet, int newState) {\r\n\r\n\r\n                }\r\n\r\n                @Override\r\n                public void onSlide(@NonNull View bottomSheet, float slideOffset) {\r\n\r\n\r\n                }\r\n            });\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public void ReadFullTable(int TableValue) throws InterruptedException {\r\n        //recognizeVoice.startListening();\r\n        unMuteAudioStream();\r\n        ans.setText(\"?\");\r\n        Log.i(\"InActivity\", \"ReadFullText\");\r\n        result = count * TableValue;\r\n        resultState.onNext(result);\r\n\r\n        // isActive=true;\r\n\r\n        if (isActive) {\r\n            switch (count) {\r\n                case 1: {\r\n                    Log.i(\"InActivity\", count + \"\");\r\n                    ToSet = TableValue + \" ones are ?\";\r\n                    readText.read(ToSet);\r\n                    set = TableValue + \" X 1 = \";\r\n                    Table.setText(set);\r\n                    logTextView.setText(logTextView.getText().toString() + \"QUESTION: \" + ToSet + \"\\n\");\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    ToSet = TableValue + \" twos are ?\";\r\n                    readText.read(ToSet);\r\n                    set = TableValue + \" X 2 = \";\r\n                    Table.setText(set);\r\n                    logTextView.setText(logTextView.getText().toString() + \"QUESTION: \" + ToSet + \"\\n\");\r\n                    break;\r\n                }\r\n                case 3: {\r\n                    ToSet = TableValue + \" threes are ?\";\r\n                    readText.read(ToSet);\r\n                    set = TableValue + \" X 3 = \";\r\n                    Table.setText(set);\r\n                    logTextView.setText(logTextView.getText().toString() + \"QUESTION: \" + ToSet + \"\\n\");\r\n                    break;\r\n                }\r\n                case 4: {\r\n                    ToSet = TableValue + \" fours are ?\";\r\n                    readText.read(ToSet);\r\n                    set = TableValue + \" X 4 = \";\r\n                    Table.setText(set);\r\n                    logTextView.setText(logTextView.getText().toString() + \"QUESTION: \" + ToSet + \"\\n\");\r\n                    break;\r\n                }\r\n                case 5: {\r\n                    ToSet = TableValue + \" fives are ?\";\r\n                    readText.read(ToSet);\r\n                    set = TableValue + \" X 5 = \";\r\n                    Table.setText(set);\r\n                    logTextView.setText(logTextView.getText().toString() + \"QUESTION: \" + ToSet + \"\\n\");\r\n                    break;\r\n                }\r\n                case 6: {\r\n                    ToSet = TableValue + \" sixs are ?\";\r\n                    readText.read(ToSet);\r\n                    set = TableValue + \" X 6 = \";\r\n                    Table.setText(set);\r\n                    logTextView.setText(logTextView.getText().toString() + \"QUESTION: \" + ToSet + \"\\n\");\r\n                    break;\r\n                }\r\n                case 7: {\r\n                    ToSet = TableValue + \" sevens are ?\";\r\n                    readText.read(ToSet);\r\n                    set = TableValue + \" X 7 = \";\r\n                    Table.setText(set);\r\n                    logTextView.setText(logTextView.getText().toString() + \"QUESTION: \" + ToSet + \"\\n\");\r\n                    break;\r\n                }\r\n                case 8: {\r\n                    ToSet = TableValue + \" eights are ?\";\r\n                    readText.read(ToSet);\r\n                    set = TableValue + \" X 8 = \";\r\n                    Table.setText(set);\r\n                    logTextView.setText(logTextView.getText().toString() + \"QUESTION: \" + ToSet + \"\\n\");\r\n                    break;\r\n                }\r\n                case 9: {\r\n                    ToSet = TableValue + \" nines are ?\";\r\n                    readText.read(ToSet);\r\n                    set = TableValue + \" X 9 = \";\r\n                    Table.setText(set);\r\n                    logTextView.setText(logTextView.getText().toString() + \"QUESTION: \" + ToSet + \"\\n\");\r\n                    break;\r\n                }\r\n                case 10: {\r\n                    ToSet = TableValue + \" tens are ?\";\r\n                    readText.read(ToSet);\r\n                    set = TableValue + \" X 10 = \";\r\n                    Table.setText(set);\r\n                    logTextView.setText(logTextView.getText().toString() + \"QUESTION: \" + ToSet + \"\\n\");\r\n                    pause_play.setEnabled(false);\r\n                    break;\r\n                }\r\n                case 11: {\r\n                    Toast.makeText(this, \"11\", Toast.LENGTH_SHORT).show();\r\n                    break;\r\n                }\r\n            }\r\n\r\n        }\r\n        if (count <= 10) {\r\n            question_count.setText(String.valueOf(count) + \"/10\");\r\n            progressBarQuestion.setProgress(count);\r\n\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n        if (requestCode == 1) {\r\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n                Toast.makeText(this, \"permission granted\", Toast.LENGTH_SHORT).show();\r\n            } else {\r\n                Toast.makeText(this, \"permission denied\", Toast.LENGTH_SHORT).show();\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        recognizeVoice.speech.stopListening();\r\n//        recognizeVoice.speech.destroy();\r\n        pauseAll();\r\n        super.onPause();\r\n        Log.i(\"activity\", \"onPause\");\r\n        //   amanager.setStreamMute(AudioManager.STREAM_SYSTEM, false);\r\n        try {\r\n            unMuteAudioStream();\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (!logTextView.getText().toString().equals(\"LOG\")) {\r\n            if (PrefConfig.readIdInPref(getApplicationContext(), \"IS_LOG_ENABLE\").equals(\"true\")) {\r\n                addData();\r\n            }\r\n            addProgressData();\r\n        }\r\n\r\n        last_status();\r\n        try {\r\n\r\n            if (count >= 10) {\r\n                if (PrefConfig.readIntInPref(getApplicationContext(), getResources().getString(R.string.last_table)) < TableValue) {\r\n                    PrefConfig.writeIntInPref(getApplicationContext(), TableValue, getResources().getString(R.string.last_table));\r\n                }\r\n            }\r\n\r\n\r\n        } catch (Exception e) {\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private void addData() {\r\n\r\n        try {\r\n            LogDatabase db = LogDatabase.getDbInstance(this.getApplicationContext());\r\n            LogEntity logInfo = new LogEntity(logTextView.getText().toString(), timeStamp.getTime() + \"\");\r\n\r\n            db.logDao().insertNotes(logInfo);\r\n        } catch (Exception e) {\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    private void last_status() {\r\n\r\n        try {\r\n            if (count < 11) {\r\n\r\n                PrefConfig.writeIntInPref(getApplicationContext(), TableValue, getResources().getString(R.string.multiplicand));\r\n                PrefConfig.writeIntInPref(getApplicationContext(), count, getResources().getString(R.string.multiplier));\r\n                PrefConfig.writeIntInPref(getApplicationContext(), rtans, getResources().getString(R.string.right));\r\n                PrefConfig.writeIntInPref(getApplicationContext(), wrans, getResources().getString(R.string.wrong));\r\n                PrefConfig.writeIdInPref(getApplicationContext(), status, getResources().getString(R.string.status));\r\n\r\n            } else {\r\n\r\n            }\r\n        } catch (Exception e) {\r\n        }\r\n\r\n    }\r\n\r\n    private void addProgressData() {\r\n\r\n        try {\r\n            Date date = new Date();\r\n            SimpleDateFormat formatter = new SimpleDateFormat(\"dd/MM/yyyy\");\r\n            DateFormat timeFormatter = new SimpleDateFormat(\"hh:mm:ss a\");\r\n\r\n            long diff = date.getTime() - timeStamp.getTime();\r\n            ProgressDataBase db = ProgressDataBase.getDbInstance(this.getApplicationContext());\r\n            ProgressM progressM = new ProgressM();\r\n            progressM.correct = rtans;\r\n            progressM.time_to_complete = diff;\r\n            progressM.wrong = wrans;\r\n            progressM.time = timeFormatter.format(date) + \"\";\r\n            progressM.is_completed = \"Yes\";\r\n            progressM.table = TableValue + \"\";\r\n            progressM.date = formatter.format(date) + \"\";\r\n            progressM.timestamp = date.getTime();\r\n            db.progressDao().insertNotes(progressM);\r\n\r\n        } catch (Exception e) {\r\n\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        amanager.setStreamMute(AudioManager.STREAM_SYSTEM, true);\r\n        // muteAudioStream();\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        nManager.cancelAll();\r\n        recognizeVoice.speech.stopListening();\r\n        recognizeVoice.speech.destroy();\r\n        mic.setVisibility(View.GONE);\r\n        //amanager.setStreamMute(AudioManager.STREAM_SYSTEM, false);\r\n        try {\r\n            unMuteAudioStream();\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.O)\r\n    @Override\r\n    public void gettingResult(String title) throws InterruptedException {\r\n\r\n        Log.i(\"InActivity\", \"onResult\" + title);\r\n\r\n        if (title.equals(\"buddy stop\")) {\r\n            mic.setVisibility(View.GONE);\r\n            pause_play.setChecked(false);\r\n            pauseAll();\r\n        } else {\r\n\r\n\r\n            ans.setText(title);\r\n            String temp = collectdata.getText().toString();\r\n            Boolean lcsResult = new UtilityFunctions().matchingSeq(title.trim(), result + \"\");\r\n            Log.i(\"lcsResult\", lcsResult + \"\");\r\n            if (!temp.equals(\"\") && lcsResult)\r\n                collectdata.setText(temp + \",\" + result);\r\n\r\n            else if (!temp.equals(\"\") && !lcsResult)\r\n                collectdata.setText(temp + \",\" + title.trim());\r\n\r\n            else if (temp.equals(\"\") && lcsResult) {\r\n                try {\r\n                    collectdata.setText(result + \"\");\r\n                } catch (Exception e) {\r\n                }\r\n\r\n            } else\r\n                collectdata.setText(title.trim());\r\n\r\n            count++;\r\n            recognizeVoice.stopListening();\r\n            mic.setVisibility(View.GONE);\r\n\r\n            try {\r\n                unMuteAudioStream();\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n            try {\r\n                if (lcsResult) {\r\n\r\n                    end = new Date();\r\n                    long diff = end.getTime() - start.getTime();\r\n                    logTextView.setText(logTextView.getText().toString() + new UtilityFunctions().formatTime(diff) + \"\\n\");\r\n\r\n                    sendAnalyticsData(result + \"\", title, true, (int) (diff / 1000), Table.getText().toString());\r\n                    delayTime = 1500;\r\n                    delayAtTheEnd = 900;\r\n                    rtans++;\r\n                    readText.read(\"CORRECT\");\r\n                    right_ans.setText(String.valueOf(rtans));\r\n                } else {\r\n                    end = new Date();\r\n                    long diff = end.getTime() - start.getTime();\r\n                    logTextView.setText(logTextView.getText().toString() + new UtilityFunctions().formatTime(diff) + \"\\n\");\r\n                    sendAnalyticsData(result + \"\", title, false, (int) (diff / 1000), Table.getText().toString());\r\n                    delayTime = 3000;\r\n                    delayAtTheEnd = 1800;\r\n                    wrans++;\r\n                    readText.read(\"INCORRECT, Correct is \" + result);\r\n                    wrong_ans.setText(String.valueOf(wrans));\r\n                }\r\n\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n                end = new Date();\r\n                long diff = end.getTime() - start.getTime();\r\n                logTextView.setText(logTextView.getText().toString() + new UtilityFunctions().formatTime(diff) + \"\\n\");\r\n                sendAnalyticsData(result + \"\", title, true, (int) (diff / 1000), Table.getText().toString());\r\n                delayTime = 3000;\r\n                delayAtTheEnd = 1800;\r\n                readText.read(\"INCORRECT, Correct is \" + result);\r\n                wrans++;\r\n                wrong_ans.setText(String.valueOf(wrans));\r\n            }\r\n            if (count > 10) {\r\n                Log.i(\"inactivity\", \"gt10\");\r\n\r\n                unMuteAudioStream();\r\n                Thread.sleep(delayAtTheEnd);\r\n                Intent intent = new Intent(table_questions.this, ScoreActivity.class);\r\n                intent.putExtra(\"score\", rtans);\r\n                intent.putExtra(\"activity\", \"table_q\");\r\n                intent.putExtra(\"status\", status);\r\n                intent.putExtra(\"tname\", TableValue);\r\n                startActivity(intent);\r\n                finish();\r\n            }\r\n            Handler handler = new Handler();\r\n            final Runnable r = new Runnable() {\r\n                public void run() {\r\n                    if (count <= 10) {\r\n                        if (counter == 0)\r\n                            isActive = true;\r\n                        repeatRec = 0;\r\n                        try {\r\n                            ReadFullTable(TableValue);\r\n                        } catch (InterruptedException e) {\r\n                            e.printStackTrace();\r\n                        }\r\n                        recognizeVoice.stopListening();\r\n                    } else {\r\n                        recognizeVoice.stopListening();\r\n\r\n                    }\r\n                }\r\n            };\r\n            handler.postDelayed(r, delayTime);\r\n\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void getLogResult(String title) {\r\n\r\n\r\n        logTextView.setText(logTextView.getText().toString() + title);\r\n    }\r\n\r\n    @Override\r\n    public void errorAction(int i) throws InterruptedException {\r\n        Log.i(\"Error\", \"err\");\r\n\r\n        if (count <= 10 && i == SpeechRecognizer.ERROR_NO_MATCH) {\r\n\r\n            if (repeatRec < 3) {\r\n                repeatRec++;\r\n                //  Toast.makeText(this, \"attempt\"+repeatRec, Toast.LENGTH_SHORT).show();\r\n                recognizeVoice.startListening();\r\n                mic.setVisibility(View.VISIBLE);\r\n            } else {\r\n                mic.setVisibility(View.GONE);\r\n                try {\r\n                    Handler handler = new Handler();\r\n                    final Runnable r = new Runnable() {\r\n                        public void run() {\r\n                            if (counter == 0)\r\n                                isActive = true;\r\n                            repeatRec = 0;\r\n                            try {\r\n                                ReadFullTable(TableValue);\r\n                            } catch (InterruptedException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                        }\r\n                    };\r\n                    handler.postDelayed(r, 1000);\r\n                } catch (Exception e) {\r\n                    if (counter == 0)\r\n                        isActive = true;\r\n                    ReadFullTable(TableValue);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n\r\n//        if (i==SpeechRecognizer.ERROR_CLIENT){\r\n//            recognizeVoice.startListening();\r\n//            mic.setVisibility(View.VISIBLE);\r\n//        }\r\n\r\n//        if (count > 10) {\r\n//            Log.i(\"inactivity\",\"gt10\");\r\n//\r\n//            Thread.sleep(delayAtTheEnd);\r\n//            unMuteAudioStream();\r\n//            Intent intent=new Intent(table_questions.this,ScoreActivity.class);\r\n//            intent.putExtra(\"activity\",\"table_q\");\r\n//            intent.putExtra(\"score\",rtans);\r\n//            intent.putExtra(\"status\",status);\r\n//            intent.putExtra(\"tname\",TableValue);\r\n//            startActivity(intent);\r\n//            finish();\r\n////            Handler handler = new Handler();\r\n////            final Runnable r = new Runnable() {\r\n////                public void run() {\r\n////                   // recognizeVoice.speech.stopListening();\r\n////                    counter = 0;\r\n////                    pause_play.setChecked(false);\r\n////                    rtans = 0;\r\n////                    wrans = 0;\r\n////                    right_ans.setText(\"0\");\r\n////                    wrong_ans.setText(\"0\");\r\n////                    amanager.setStreamMute(AudioManager.STREAM_SYSTEM, false);\r\n////                    collectdata.setText(\"\");\r\n////                    ans.setText(\"\");\r\n////                    nManager.cancelAll();\r\n////                    pause_play.setVisibility(View.VISIBLE);\r\n////                }\r\n////            };\r\n////            handler.postDelayed(r, 1000);\r\n//\r\n//\r\n//        }\r\n\r\n\r\n    }\r\n\r\n\r\n    @Override\r\n    public void gettingResultSpeech() {\r\n\r\n\r\n        final Handler handler = new Handler(Looper.getMainLooper());\r\n        handler.postDelayed(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n\r\n                Log.i(\"InActivityrun\", \"OnDone\");\r\n                if (isActive) {\r\n                    currRes = true;\r\n                    isActive = false;\r\n                    muteAudioStream();\r\n                    recognizeVoice.startListening();\r\n                    mic.setVisibility(View.VISIBLE);\r\n                    Log.i(\"InActivityrun\", \"insideOnDone\");\r\n                    start = new Date();\r\n\r\n                }\r\n            }\r\n        }, 80);\r\n\r\n    }\r\n\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.O)\r\n    private void retrieveKidsData() {\r\n\r\n        kidsDb.collection(\"users\").document(mCurrentUser.getUid()).collection(\"kids\").get()\r\n                .addOnSuccessListener(queryDocumentSnapshots -> {\r\n\r\n\r\n                    if (queryDocumentSnapshots.isEmpty()) {\r\n                        //     Toast.makeText(this, \"No data\", Toast.LENGTH_SHORT).show();\r\n                        Log.i(\"No_data\", \"No_data\");\r\n                    } else {\r\n                        for (QueryDocumentSnapshot queryDocumentSnapshot : queryDocumentSnapshots) {\r\n\r\n                            KidsData kidsData = queryDocumentSnapshot.toObject(KidsData.class);\r\n                            kidsData.setKids_id(queryDocumentSnapshot.getId());\r\n                            kidsId = kidsData.getKids_id();\r\n                            kidsName = kidsData.getName();\r\n                            kidsAge = new UtilityFunctions().calculateAge(kidsData.getAge());\r\n\r\n                            Log.i(\"KidsData\", kidsData.getName() + \"\");\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n\r\n\r\n    public void sendAnalyticsData(String result, String detected, Boolean tag, int timeTaken, String s) {\r\n\r\n        resultBundle.putString(\"original_result\", result);\r\n        resultBundle.putInt(\"table\", TableValue);\r\n        resultBundle.putString(\"detected_result\", detected);\r\n        resultBundle.putBoolean(\"is_correct\", tag);\r\n        resultBundle.putInt(\"timeTaken\", timeTaken);\r\n        resultBundle.putString(\"question\", s);\r\n        resultBundle.putString(\"parent_id\", mCurrentUser.getUid());\r\n        resultBundle.putString(\"kids_id\", kidsId);\r\n        resultBundle.putString(\"kids_name\", kidsName);\r\n        resultBundle.putInt(\"kids_age\", kidsAge);\r\n        resultBundle.putString(\"type\", \"maths_multiplication_table_with_hint\");\r\n        mFirebaseAnalytics.logEvent(\"maths\", resultBundle);\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/maths/beyond_school_280720220930/table_questions.java b/app/src/main/java/com/maths/beyond_school_280720220930/table_questions.java
--- a/app/src/main/java/com/maths/beyond_school_280720220930/table_questions.java	(revision b40401d29ed89e0bcba3248488be6dbf0a5a82c6)
+++ b/app/src/main/java/com/maths/beyond_school_280720220930/table_questions.java	(date 1667541538916)
@@ -590,7 +590,7 @@
             progressM.wrong = wrans;
             progressM.time = timeFormatter.format(date) + "";
             progressM.is_completed = "Yes";
-            progressM.table = TableValue + "";
+            //progressM.table = TableValue + "";
             progressM.date = formatter.format(date) + "";
             progressM.timestamp = date.getTime();
             db.progressDao().insertNotes(progressM);
Index: app/src/main/java/com/maths/beyond_school_280720220930/utils/Constants.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.maths.beyond_school_280720220930.utils;\r\n\r\npublic abstract class Constants {\r\n    public static final String EXTRA_VOCABULARY_CATEGORY = \"vocabulary_category\";\r\n    public static final String EXTRA_VOCABULARY_DETAIL_CATEGORY = \"vocabulary_detail_category\";\r\n    public static final String EXTRA_SPELLING_DETAIL = \"spelling_detail\";\r\n    public static final String EXTRA_SPELLING_CATEGORY = \"spelling_category\";\r\n    public static final String EXTRA_SPELLING_LIST = \"spelling_list\";\r\n    public static final String EXTRA_GRAMMAR_CATEGORY = \"grammar_category\";\r\n\r\n    public static final String EXTRA_ONLINE_FLAG = \"online_flag\";\r\n\r\n    public static final String EXTRA_TITLE = \"title\";\r\n\r\n    public static final String EXTRA_QUESTION_FOR_TEST = \"question_for_test\";\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/maths/beyond_school_280720220930/utils/Constants.java b/app/src/main/java/com/maths/beyond_school_280720220930/utils/Constants.java
--- a/app/src/main/java/com/maths/beyond_school_280720220930/utils/Constants.java	(revision b40401d29ed89e0bcba3248488be6dbf0a5a82c6)
+++ b/app/src/main/java/com/maths/beyond_school_280720220930/utils/Constants.java	(date 1667540857698)
@@ -7,6 +7,7 @@
     public static final String EXTRA_SPELLING_CATEGORY = "spelling_category";
     public static final String EXTRA_SPELLING_LIST = "spelling_list";
     public static final String EXTRA_GRAMMAR_CATEGORY = "grammar_category";
+    public static final String EXTRA_CATEGORY_ID = "subject_id";
 
     public static final String EXTRA_ONLINE_FLAG = "online_flag";
 
Index: app/src/main/java/com/maths/beyond_school_280720220930/english_activity/grammar/test/GrammarTestActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.maths.beyond_school_280720220930.english_activity.grammar.test;\r\n\r\nimport static com.maths.beyond_school_280720220930.utils.Constants.EXTRA_GRAMMAR_CATEGORY;\r\nimport static com.maths.beyond_school_280720220930.utils.Constants.EXTRA_ONLINE_FLAG;\r\nimport static com.maths.beyond_school_280720220930.utils.Constants.EXTRA_QUESTION_FOR_TEST;\r\nimport static com.maths.beyond_school_280720220930.utils.Constants.EXTRA_TITLE;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.media.MediaPlayer;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.View;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport com.google.firebase.analytics.FirebaseAnalytics;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.maths.beyond_school_280720220930.LogActivity;\r\nimport com.maths.beyond_school_280720220930.R;\r\nimport com.maths.beyond_school_280720220930.SP.PrefConfig;\r\nimport com.maths.beyond_school_280720220930.ScoreActivity;\r\nimport com.maths.beyond_school_280720220930.database.english.EnglishGradeDatabase;\r\nimport com.maths.beyond_school_280720220930.database.english.grammer.model.GrammarModel;\r\nimport com.maths.beyond_school_280720220930.database.english.grammer.model.GrammarType;\r\nimport com.maths.beyond_school_280720220930.database.grade_tables.GradeDatabase;\r\nimport com.maths.beyond_school_280720220930.database.log.LogDatabase;\r\nimport com.maths.beyond_school_280720220930.database.process.ProgressDataBase;\r\nimport com.maths.beyond_school_280720220930.databinding.ActivityGrammarTestBinding;\r\nimport com.maths.beyond_school_280720220930.english_activity.grammar.GrammarTypeConverter;\r\nimport com.maths.beyond_school_280720220930.english_activity.vocabulary.EnglishViewPager;\r\nimport com.maths.beyond_school_280720220930.firebase.CallFirebaseForInfo;\r\nimport com.maths.beyond_school_280720220930.retrofit.ApiClient;\r\nimport com.maths.beyond_school_280720220930.retrofit.ApiInterface;\r\nimport com.maths.beyond_school_280720220930.retrofit.model.content.ContentModel;\r\nimport com.maths.beyond_school_280720220930.translation_engine.ConversionCallback;\r\nimport com.maths.beyond_school_280720220930.translation_engine.TextToSpeechBuilder;\r\nimport com.maths.beyond_school_280720220930.translation_engine.translator.TextToSpeckConverter;\r\nimport com.maths.beyond_school_280720220930.utils.CollectionUtils;\r\nimport com.maths.beyond_school_280720220930.utils.UtilityFunctions;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.Objects;\r\nimport java.util.concurrent.ExecutionException;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.stream.Collectors;\r\n\r\nimport io.reactivex.Observable;\r\nimport io.reactivex.android.schedulers.AndroidSchedulers;\r\nimport io.reactivex.functions.Consumer;\r\nimport retrofit2.Call;\r\nimport retrofit2.Response;\r\nimport retrofit2.Retrofit;\r\n\r\npublic class GrammarTestActivity extends AppCompatActivity {\r\n\r\n    private static final String TAG = \"GrammarTestActivity\";\r\n    private final Context context = GrammarTestActivity.this;\r\n    private ActivityGrammarTestBinding binding;\r\n    private static String category;\r\n    private EnglishGradeDatabase englishGradeDatabase;\r\n    private List<GrammarModel> grammarModelList;\r\n    private TextToSpeckConverter tts = null;\r\n    private TextToSpeckConverter ttsHelper = null;\r\n    private MediaPlayer mediaPlayer = null;\r\n    private ButtonClick listener = null;\r\n    private int correctAnswerCount = 0, wrongAnswerCount = 0;\r\n    private long statTime = 0;\r\n    private static final int MAX_TRY_AGAIN_COUNT = 2;\r\n    private int tryAgainCount = 1;\r\n\r\n\r\n    private GradeDatabase databaseGrade;\r\n    private String kidsGrade;\r\n    private FirebaseFirestore kidsDb;\r\n    private String kidsId;\r\n\r\n    private LogDatabase logDatabase;\r\n    private String logs = \"\";\r\n    private long startTime = 0;\r\n    private FirebaseAnalytics analytics;\r\n    private FirebaseAuth auth;\r\n    private int kidAge;\r\n    private String kidName;\r\n    private final JSONArray kidsActivityJsonArray = new JSONArray();\r\n    private ProgressDataBase progressDataBase;\r\n    public static final int TIMER_VALUE = 15;\r\n    private String parentsContactId = \"\";\r\n\r\n    private Boolean isOnline = false;\r\n\r\n    private ContentModel.Meta meta;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = ActivityGrammarTestBinding.inflate(getLayoutInflater());\r\n        setContentView(binding.getRoot());\r\n\r\n        englishGradeDatabase = EnglishGradeDatabase.getDbInstance(context);\r\n\r\n        logDatabase = LogDatabase.getDbInstance(context);\r\n        databaseGrade = GradeDatabase.getDbInstance(context);\r\n        progressDataBase = ProgressDataBase.getDbInstance(context);\r\n\r\n        kidsGrade = PrefConfig.readIdInPref(getApplicationContext(), getResources().getString(R.string.kids_grade));\r\n        kidsId = PrefConfig.readIdInPref(getApplicationContext(), getResources().getString(R.string.kids_id));\r\n        kidsDb = FirebaseFirestore.getInstance();\r\n        auth = FirebaseAuth.getInstance();\r\n        analytics = FirebaseAnalytics.getInstance(this);\r\n        var id = \"\";\r\n        if (auth.getCurrentUser() != null) {\r\n            id = auth.getCurrentUser().getUid();\r\n        }\r\n        analytics.setUserId(id);\r\n        kidAge = UtilityFunctions.calculateAge(PrefConfig.readIdInPref(getApplicationContext(), getResources().getString(R.string.kids_dob)));\r\n        kidsId = PrefConfig.readIdInPref(getApplicationContext(), getResources().getString(R.string.kids_id));\r\n        kidName = PrefConfig.readIdInPref(getApplicationContext(), getResources().getString(R.string.kids_name));\r\n        parentsContactId = PrefConfig.readIdInPref(context, getResources().getString(R.string.parent_contact_details));\r\n        setToolbar();\r\n        getDataFromIntent();\r\n        learnButtonClick();\r\n    }\r\n\r\n    private void learnButtonClick() {\r\n        binding.giveTestButton.setOnClickListener(v -> {\r\n            finish();\r\n        });\r\n    }\r\n\r\n    private void getDataFromIntent() {\r\n        if (!getIntent().hasExtra(EXTRA_GRAMMAR_CATEGORY)) {\r\n            UtilityFunctions.simpleToast(context, \"No data found\");\r\n            return;\r\n        }\r\n        category = getIntent().getStringExtra(EXTRA_GRAMMAR_CATEGORY);\r\n        isOnline = getIntent().getBooleanExtra(EXTRA_ONLINE_FLAG, false);\r\n        if (isOnline) {\r\n            getSubjectData();\r\n        } else setViewPager();\r\n    }\r\n\r\n\r\n    private void setViewPager() {\r\n        if (!isOnline) if (offlineData()) return;\r\n        List<Fragment> fragmentList = mapToFragment(grammarModelList);\r\n        var pagerAdapter = new EnglishViewPager(fragmentList, getSupportFragmentManager(), getLifecycle());\r\n        binding.viewPagerIdentifyingNouns.setAdapter(pagerAdapter);\r\n        binding.viewPagerIdentifyingNouns.setUserInputEnabled(false);\r\n        setButton();\r\n        setOptionButtonClick();\r\n    }\r\n\r\n    private void getSubjectData() {\r\n        Retrofit retrofit = ApiClient.getClient();\r\n        var api = retrofit.create(ApiInterface.class);\r\n        api.getVocabularySubject(\r\n                PrefConfig.readIdInPref(context, getResources().getString(R.string.kids_grade)).toLowerCase().replace(\" \",\"\"),\r\n                \"english\",\r\n                getIntent().getStringExtra(EXTRA_TITLE).toLowerCase(),\r\n                category).enqueue(new retrofit2.Callback<>() {\r\n            @Override\r\n            public void onResponse(Call<ContentModel> call, Response<ContentModel> response) {\r\n                Log.d(TAG, \"onResponse: \" + response.code());\r\n                if (response.body() != null) {\r\n                    Log.d(TAG, \"onResponse: \" + response.body().getContent().toString());\r\n                    setData(response.body().getContent());\r\n                    meta = response.body().getMeta();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(Call<ContentModel> call, Throwable t) {\r\n                Log.e(TAG, \"onFailure: \" + t.getLocalizedMessage());\r\n            }\r\n        });\r\n    }\r\n\r\n    private void setData(List<ContentModel.Content> content) {\r\n        var typeConverter = new GrammarTypeConverter();\r\n        grammarModelList = typeConverter.mapToList(content);\r\n        setViewPager();\r\n    }\r\n\r\n    private boolean offlineData() {\r\n        var list = englishGradeDatabase.grammarDao().getAllGrammar();\r\n        grammarModelList = getFilterGrammar(list);\r\n        if (grammarModelList == null) {\r\n            UtilityFunctions.simpleToast(context, \"No data found\");\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private void initMediaPlayer() {\r\n        mediaPlayer = UtilityFunctions.playClapSound(this);\r\n    }\r\n\r\n\r\n    private void setButton() {\r\n        binding.playPause.setOnClickListener(v -> {\r\n            if (binding.playPause.isChecked()) {\r\n                initTTS();\r\n                initMediaPlayer();\r\n                startSpeaking();\r\n                timer();\r\n            } else destroyEngine();\r\n        });\r\n    }\r\n\r\n    private void startSpeaking() {\r\n        startTime = new Date().getTime();\r\n        playPauseAnimation(true);\r\n        var questionContent = !isOnline ? UtilityFunctions.getQuestionForGrammarTest(context, category) : meta.getQuestion();\r\n        var question = (binding.viewPagerIdentifyingNouns.getCurrentItem() < 2) ? questionContent : \"\";\r\n        tts.initialize(question, this);\r\n    }\r\n\r\n    private void initTTS() {\r\n        var task = new TTSAsyncTask();\r\n        try {\r\n            tts = task.execute(new ConversionCallback() {\r\n                @Override\r\n                public void onCompletion() {\r\n                    setOptionButton();\r\n                    setVisibilityOfLinearLayout(true);\r\n                    playPauseAnimation(false);\r\n                    checkAnswer();\r\n                }\r\n\r\n                @Override\r\n                public void onErrorOccurred(String errorMessage) {\r\n\r\n                }\r\n\r\n                @Override\r\n                public void getLogResult(String title) {\r\n                    ConversionCallback.super.getLogResult(title);\r\n                    logs += title + \"\\n\";\r\n                }\r\n            }).get();\r\n\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void checkAnswer() {\r\n        var endTime = new Date().getTime();\r\n        var diff = endTime - startTime;\r\n        var currentModel = grammarModelList.get(binding.viewPagerIdentifyingNouns.getCurrentItem());\r\n        var currentAnswer = currentModel.getWord().toLowerCase(Locale.ROOT).trim();\r\n        var currentDes = currentModel.getDescription().toLowerCase(Locale.ROOT).trim();\r\n        if (category.equals(getResources().getString(R.string.grammar_3)))\r\n            logs += \"Question : \" + UtilityFunctions.getQuestionForGrammarTest(context, category) + \"Answer\" + currentDes + \"time taken\" + diff + \"\\n\";\r\n        else\r\n            logs += \"Question : \" + UtilityFunctions.getQuestionForGrammarTest(context, category) + \"Answer\" + currentAnswer + \"time taken\" + diff + \"\\n\";\r\n        listener = text -> {\r\n            Log.d(\"XXX\", \"checkAnswer: \" + text + \" \" + currentAnswer);\r\n            if (category.equals(getResources().getString(R.string.grammar_3))) {\r\n                if (currentDes.contains(text)) {\r\n                    tryAgainCount = 1;\r\n                    playPauseAnimation(true);\r\n                    try {\r\n                        mediaPlayer.start();\r\n                    } catch (IllegalStateException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                 putJsonData(\"Question : \" + UtilityFunctions.getQuestionForGrammarTest(context, category), currentDes, diff, true);\r\n                 sendDataToAnalytics(currentDes, text, diff, true);\r\n\r\n                    helperTTS(UtilityFunctions.getCompliment(true), true, 0);\r\n                    correctAnswerCount++;\r\n                } else {\r\n                    playPauseAnimation(true);\r\n                    if (tryAgainCount > MAX_TRY_AGAIN_COUNT) {\r\n                        wrongAnswerCount++;\r\n                       putJsonData(\"Question : \" + UtilityFunctions.getQuestionForGrammarTest(context, category), currentDes, diff, false);\r\n                       sendDataToAnalytics(currentDes, text, diff, false);\r\n                        helperTTS(UtilityFunctions.getCompliment(false), true, 0);\r\n                        tryAgainCount = 1;\r\n                        return;\r\n                    }\r\n                    tryAgainCount++;\r\n                    playPauseAnimation(true);\r\n                    tts.initialize(UtilityFunctions.getCompliment(false), this);\r\n\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (text.equals(currentAnswer)) {\r\n                tryAgainCount = 1;\r\n                playPauseAnimation(true);\r\n                correctAnswerCount++;\r\n                mediaPlayer.start();\r\n               putJsonData(\"Question : \" + UtilityFunctions.getQuestionForGrammarTest(context, category), text, diff, true);\r\n               sendDataToAnalytics(currentAnswer, text, diff, true);\r\n                helperTTS(UtilityFunctions.getCompliment(true), true, 0);\r\n            } else {\r\n                if (tryAgainCount > MAX_TRY_AGAIN_COUNT) {\r\n                    playPauseAnimation(true);\r\n                    wrongAnswerCount++;\r\n                  sendDataToAnalytics(currentAnswer, text, diff, false);\r\n                  putJsonData(\"Question : \" + UtilityFunctions.getQuestionForGrammarTest(context, category), text, diff, false);\r\n                    helperTTS(UtilityFunctions.getCompliment(false), true, 0);\r\n                    tryAgainCount = 1;\r\n                    return;\r\n                }\r\n                tryAgainCount++;\r\n                playPauseAnimation(true);\r\n                tts.initialize(UtilityFunctions.getCompliment(false), this);\r\n            }\r\n\r\n        };\r\n    }\r\n\r\n    private void sendDataToAnalytics(String currentWord, String result, long diff, boolean b) {\r\n        UtilityFunctions.sendDataToAnalytics(analytics, Objects.requireNonNull(auth.getCurrentUser()).getUid(), kidsId, kidName, \"English-Test-\" +(!isOnline?\"grammar\":getIntent().getStringExtra(EXTRA_TITLE).toLowerCase()), kidAge, currentWord, result, b, (int) (diff), UtilityFunctions.getQuestionForGrammarTest(context, category), \"English\", parentsContactId);\r\n    }\r\n\r\n    private void helperTTS(String message, boolean canNavigate, int request) {\r\n        try {\r\n            ttsHelper = new TTSHelperAsyncTask().execute(new ConversionCallback() {\r\n                @Override\r\n                public void onCompletion() {\r\n                    if (canNavigate) {\r\n                        setVisibilityOfLinearLayout(false);\r\n                        try {\r\n                            mediaPlayer.pause();\r\n                        } catch (IllegalStateException e) {\r\n                            e.printStackTrace();\r\n                        }\r\n                        if (binding.viewPagerIdentifyingNouns.getCurrentItem() == grammarModelList.size() - 1) {\r\n                            playPauseAnimation(false);\r\n                            setToggleButtonChecked(false);\r\n                            uploadData();\r\n                            return;\r\n                        }\r\n\r\n                        UtilityFunctions.runOnUiThread(() -> binding.viewPagerIdentifyingNouns.setCurrentItem(binding.viewPagerIdentifyingNouns.getCurrentItem() + 1));\r\n                        updateMarksViews();\r\n                        startSpeaking();\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onErrorOccurred(String errorMessage) {\r\n                    logs += errorMessage + \"\\n\";\r\n                }\r\n            }).get().initialize(message, this);\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            logs += e.getMessage() + \"\\n\";\r\n        }\r\n    }\r\n\r\n    private void updateMarksViews() {\r\n        UtilityFunctions.runOnUiThread(() -> {\r\n            binding.correctText.setText(String.valueOf(correctAnswerCount));\r\n            binding.wrongText.setText(String.valueOf(wrongAnswerCount));\r\n        });\r\n    }\r\n\r\n    private void setOptionButton() {\r\n        UtilityFunctions.runOnUiThread(() -> {\r\n            var currentModel = grammarModelList.get(binding.viewPagerIdentifyingNouns.getCurrentItem());\r\n            var extra = currentModel.getExtra();\r\n            var split = extra.split(\",\");\r\n            if (split.length <= 1) {\r\n                UtilityFunctions.simpleToast(context, \"No data found\");\r\n                return;\r\n            }\r\n            if (split.length == 2) {\r\n                binding.key1.setText(split[0].trim());\r\n                binding.key2.setText(split[1].trim());\r\n                binding.key3.setVisibility(View.GONE);\r\n                binding.key4.setVisibility(View.GONE);\r\n                binding.linearLayout.setWeightSum(2);\r\n            }\r\n            if (split.length == 3) {\r\n                binding.key1.setText(split[0].trim());\r\n                binding.key2.setText(split[1].trim());\r\n                binding.key3.setText(split[2].trim());\r\n                binding.linearLayout.setWeightSum(3);\r\n                binding.key3.setVisibility(View.VISIBLE);\r\n                binding.key4.setVisibility(View.GONE);\r\n            }\r\n            if (split.length == 4) {\r\n                binding.key1.setText(split[0].trim());\r\n                binding.key2.setText(split[1].trim());\r\n                binding.key3.setText(split[2].trim());\r\n                binding.key4.setText(split[3].trim());\r\n                binding.linearLayout.setWeightSum(4);\r\n                binding.key3.setVisibility(View.VISIBLE);\r\n                binding.key4.setVisibility(View.VISIBLE);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void setOptionButtonClick() {\r\n        binding.key1.setOnClickListener(v -> {\r\n            if (listener != null)\r\n                listener.onClick(binding.key1.getText().toString().toLowerCase(Locale.ROOT).trim());\r\n        });\r\n        binding.key2.setOnClickListener(v -> {\r\n            if (listener != null)\r\n                listener.onClick(binding.key2.getText().toString().toLowerCase(Locale.ROOT).trim());\r\n        });\r\n        binding.key3.setOnClickListener(v -> {\r\n            if (listener != null)\r\n                listener.onClick(binding.key3.getText().toString().toLowerCase(Locale.ROOT).trim());\r\n        });\r\n        binding.key4.setOnClickListener(v -> {\r\n            if (listener != null)\r\n                listener.onClick(binding.key4.getText().toString().toLowerCase(Locale.ROOT).trim());\r\n        });\r\n    }\r\n\r\n\r\n    private void setToggleButtonChecked(boolean isChecked) {\r\n        UtilityFunctions.runOnUiThread(() -> binding.playPause.setChecked(isChecked));\r\n    }\r\n\r\n    private void playPauseAnimation(Boolean play) {\r\n        UtilityFunctions.runOnUiThread(() -> {\r\n            if (play) binding.imageViewTeacher.playAnimation();\r\n            else binding.imageViewTeacher.pauseAnimation();\r\n        });\r\n    }\r\n\r\n    private void setVisibilityOfLinearLayout(boolean isVisible) {\r\n        UtilityFunctions.runOnUiThread(() -> {\r\n            binding.linearLayout.setVisibility(isVisible ? View.VISIBLE : View.INVISIBLE);\r\n        });\r\n    }\r\n\r\n    @SuppressWarnings(\"deprecation\")\r\n    static class TTSAsyncTask extends AsyncTask<ConversionCallback, Void, TextToSpeckConverter> {\r\n        @Override\r\n        protected TextToSpeckConverter doInBackground(ConversionCallback... conversionCallbacks) {\r\n            return TextToSpeechBuilder.builder(conversionCallbacks[0]);\r\n        }\r\n    }\r\n\r\n    @SuppressWarnings(\"deprecation\")\r\n    static class TTSHelperAsyncTask extends AsyncTask<ConversionCallback, Void, TextToSpeckConverter> {\r\n        @Override\r\n        protected TextToSpeckConverter doInBackground(ConversionCallback... conversionCallbacks) {\r\n            return TextToSpeechBuilder.builder(conversionCallbacks[0]);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    private List<Fragment> mapToFragment(List<GrammarModel> grammarModels) {\r\n        return CollectionUtils.mapWithIndex(grammarModels.stream(), (index, item) -> new RowItemTestFragment(item, index + 1, category)).collect(Collectors.toList());\r\n    }\r\n\r\n    private List<GrammarModel> getFilterGrammar(List<GrammarType> list) {\r\n        var c = \"\";\r\n        if (category.equals(getResources().getString(R.string.grammar_4)))\r\n            c = getResources().getString(R.string.grammar_4_1);\r\n        else if (category.equals(getResources().getString(R.string.grammar_5)))\r\n            c = getResources().getString(R.string.grammar_5_1);\r\n        else c = category;\r\n        for (var grammarType : list) {\r\n            if (grammarType.getType().equals(c)) {\r\n                // list to array list\r\n                return UtilityFunctions.shuffleArray(new ArrayList(grammarType.getGrammarModelList()));\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private void setToolbar() {\r\n        binding.toolBar.imageViewBack.setOnClickListener(v -> {\r\n            onBackPressed();\r\n        });\r\n        binding.toolBar.titleText.setText((getIntent().hasExtra(EXTRA_TITLE)) ? getIntent().getStringExtra(EXTRA_TITLE) : getResources().getString(R.string.grammar));\r\n        binding.textViewCategory.setText((getIntent().hasExtra(EXTRA_QUESTION_FOR_TEST) ? getIntent().getStringExtra(EXTRA_QUESTION_FOR_TEST) : getResources().getString(R.string.grammar)));\r\n\r\n        binding.toolBar.getRoot().inflateMenu(R.menu.log_menu);\r\n        binding.toolBar.getRoot().setOnMenuItemClickListener(item -> {\r\n            if (item.getItemId() == R.id.action_log) {\r\n                startActivity(new Intent(getApplicationContext(), LogActivity.class));\r\n\r\n                return true;\r\n            }\r\n            return super.onOptionsItemSelected(item);\r\n\r\n        });\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        checkLogIsEnable();\r\n        destroyEngine();\r\n    }\r\n\r\n    public void destroyEngine() {\r\n        playPauseAnimation(false);\r\n        setToggleButtonChecked(false);\r\n        setVisibilityOfLinearLayout(false);\r\n        if (tts != null) {\r\n            tts.destroy();\r\n        }\r\n        if (mediaPlayer != null) {\r\n            mediaPlayer.release();\r\n        }\r\n        if (ttsHelper != null) {\r\n            ttsHelper.destroy();\r\n        }\r\n    }\r\n\r\n\r\n    private void uploadData() {\r\n        try {\r\n\r\n            var chapter=!isOnline?\"grammar\":getIntent().getStringExtra(EXTRA_TITLE);\r\n            if (correctAnswerCount >= UtilityFunctions.getNinetyPercentage(grammarModelList.size())) {\r\n                UtilityFunctions.updateDbUnlock(databaseGrade, chapter, category);\r\n                CallFirebaseForInfo.checkActivityData(kidsDb, kidsActivityJsonArray, \"pass\", auth, kidsId,kidsGrade.toLowerCase().replace(\" \",\"\") ,category, chapter, correctAnswerCount, wrongAnswerCount, grammarModelList.size(), \"english\");\r\n\r\n                progressDataBase.progressDao().updateScore(correctAnswerCount, wrongAnswerCount, category);\r\n\r\n            } else {\r\n                CallFirebaseForInfo.checkActivityData(kidsDb, kidsActivityJsonArray, \"fail\", auth, kidsId,kidsGrade.toLowerCase().replace(\" \",\"\") ,category, chapter, correctAnswerCount, wrongAnswerCount, grammarModelList.size(), \"english\");\r\n            }\r\n        } catch (JSONException e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            gotoScoreCard();\r\n        }\r\n    }\r\n\r\n    private void putJsonData(String question, String ans, long timeTaken, boolean isCorrect) {\r\n        JSONObject activityData = new JSONObject();\r\n        try {\r\n            activityData.put(\"question\", question);\r\n            activityData.put(\"ans\", ans);\r\n            activityData.put(\"time_taken\", timeTaken);\r\n            activityData.put(\"is_correct\", isCorrect);\r\n\r\n        } catch (JSONException e) {\r\n            logs += e.getMessage() + \"\\n\";\r\n        }\r\n        kidsActivityJsonArray.put(activityData);\r\n    }\r\n\r\n\r\n    private void gotoScoreCard() {\r\n        Intent intent = new Intent(getApplicationContext(), ScoreActivity.class);\r\n        intent.putExtra(\"wrongAns\", wrongAnswerCount);\r\n        intent.putExtra(\"correctAns\", correctAnswerCount);\r\n        intent.putExtra(\"chapter\", category.replace(\"Grammar\", \"\"));\r\n        startActivity(intent);\r\n        finish();\r\n    }\r\n\r\n    private void checkLogIsEnable() {\r\n        if (PrefConfig.readIdInPref(getApplicationContext(), \"IS_LOG_ENABLE\").equals(\"true\"))\r\n            saveLog();\r\n    }\r\n\r\n    private void saveLog() {\r\n        Log.d(TAG, \"saveLog: Called \" + logs);\r\n        if (!logs.isEmpty()) UtilityFunctions.saveLog(logDatabase, logs);\r\n    }\r\n\r\n    private void timer() {\r\n        boolean isTimerRunning = false;\r\n        Observable.interval(60, TimeUnit.SECONDS).observeOn(AndroidSchedulers.mainThread()).doOnNext(new Consumer<Long>() {\r\n            public void accept(Long x) throws Exception {\r\n                // update your view here\r\n\r\n                binding.layoutExtTimer.timerProgress.setMax(15);\r\n                binding.layoutExtTimer.timerProgress.setProgress(Integer.parseInt((x + 1) + \"\"));\r\n                binding.layoutExtTimer.timeText.setText((x + 1) + \"\");\r\n                Log.i(\"task\", x + \"\");\r\n            }\r\n        }).takeUntil(aLong -> aLong == TIMER_VALUE).doOnComplete(() ->\r\n                // do whatever you need on complete\r\n                Log.i(\"TSK\", \"task\")).subscribe();\r\n    }\r\n\r\n    interface ButtonClick {\r\n        void onClick(String text);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/maths/beyond_school_280720220930/english_activity/grammar/test/GrammarTestActivity.java b/app/src/main/java/com/maths/beyond_school_280720220930/english_activity/grammar/test/GrammarTestActivity.java
--- a/app/src/main/java/com/maths/beyond_school_280720220930/english_activity/grammar/test/GrammarTestActivity.java	(revision b40401d29ed89e0bcba3248488be6dbf0a5a82c6)
+++ b/app/src/main/java/com/maths/beyond_school_280720220930/english_activity/grammar/test/GrammarTestActivity.java	(date 1667542488780)
@@ -1,5 +1,6 @@
 package com.maths.beyond_school_280720220930.english_activity.grammar.test;
 
+import static com.maths.beyond_school_280720220930.utils.Constants.EXTRA_CATEGORY_ID;
 import static com.maths.beyond_school_280720220930.utils.Constants.EXTRA_GRAMMAR_CATEGORY;
 import static com.maths.beyond_school_280720220930.utils.Constants.EXTRA_ONLINE_FLAG;
 import static com.maths.beyond_school_280720220930.utils.Constants.EXTRA_QUESTION_FOR_TEST;
@@ -29,6 +30,7 @@
 import com.maths.beyond_school_280720220930.database.grade_tables.GradeDatabase;
 import com.maths.beyond_school_280720220930.database.log.LogDatabase;
 import com.maths.beyond_school_280720220930.database.process.ProgressDataBase;
+import com.maths.beyond_school_280720220930.database.process.ProgressM;
 import com.maths.beyond_school_280720220930.databinding.ActivityGrammarTestBinding;
 import com.maths.beyond_school_280720220930.english_activity.grammar.GrammarTypeConverter;
 import com.maths.beyond_school_280720220930.english_activity.vocabulary.EnglishViewPager;
@@ -98,8 +100,10 @@
     private String parentsContactId = "";
 
     private Boolean isOnline = false;
-
+    private long timeSpend = 0;
     private ContentModel.Meta meta;
+    private List<ProgressM> progressData;
+    private boolean isTimerRunning=false;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -506,6 +510,23 @@
         super.onPause();
         checkLogIsEnable();
         destroyEngine();
+        checkProgressData();
+        UtilityFunctions.checkProgressAvailable(progressDataBase, (isOnline ? getIntent().getStringExtra(EXTRA_CATEGORY_ID) : "Grammar"), category, new Date(), timeSpend + Integer.parseInt(binding.layoutExtTimer.timeText.getText().toString()), false);
+    }
+
+
+
+    private void checkProgressData() {
+        progressData = UtilityFunctions.checkProgressAvailable(progressDataBase, (isOnline ? getIntent().getStringExtra(EXTRA_CATEGORY_ID) : "Grammar"), category, new Date(), 0, true);
+
+        try {
+            if (progressData != null) {
+                timeSpend = progressData.get(0).time_spend;
+            }
+        } catch (Exception e) {
+            timeSpend = 0;
+        }
+
     }
 
     public void destroyEngine() {
@@ -579,7 +600,10 @@
     }
 
     private void timer() {
-        boolean isTimerRunning = false;
+        if (isTimerRunning) {
+            return;
+        }
+
         Observable.interval(60, TimeUnit.SECONDS).observeOn(AndroidSchedulers.mainThread()).doOnNext(new Consumer<Long>() {
             public void accept(Long x) throws Exception {
                 // update your view here
@@ -587,6 +611,7 @@
                 binding.layoutExtTimer.timerProgress.setMax(15);
                 binding.layoutExtTimer.timerProgress.setProgress(Integer.parseInt((x + 1) + ""));
                 binding.layoutExtTimer.timeText.setText((x + 1) + "");
+                isTimerRunning = true;
                 Log.i("task", x + "");
             }
         }).takeUntil(aLong -> aLong == TIMER_VALUE).doOnComplete(() ->
Index: app/src/main/java/com/maths/beyond_school_280720220930/DashBoardActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.maths.beyond_school_280720220930;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.core.content.res.ResourcesCompat;\r\nimport androidx.core.widget.NestedScrollView;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.graphics.Typeface;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.ImageView;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.TextView;\r\n\r\n\r\nimport com.github.mikephil.charting.charts.BarChart;\r\nimport com.github.mikephil.charting.components.Legend;\r\nimport com.github.mikephil.charting.data.BarData;\r\nimport com.github.mikephil.charting.data.BarDataSet;\r\nimport com.github.mikephil.charting.data.BarEntry;\r\nimport com.github.mikephil.charting.data.Entry;\r\nimport com.github.mikephil.charting.formatter.IndexAxisValueFormatter;\r\nimport com.github.mikephil.charting.highlight.Highlight;\r\nimport com.github.mikephil.charting.interfaces.datasets.IBarDataSet;\r\nimport com.github.mikephil.charting.listener.OnChartValueSelectedListener;\r\nimport com.github.mikephil.charting.model.GradientColor;\r\nimport com.google.android.material.datepicker.MaterialDatePicker;\r\nimport com.maths.beyond_school_280720220930.adapters.ProgressAdapter;\r\nimport com.maths.beyond_school_280720220930.database.process.ProgressDataBase;\r\nimport com.maths.beyond_school_280720220930.database.process.ProgressM;\r\nimport com.maths.beyond_school_280720220930.extras.IntegerFormatter;\r\nimport com.maths.beyond_school_280720220930.model.Progress;\r\nimport com.maths.beyond_school_280720220930.model.ProgressDate;\r\nimport com.maths.beyond_school_280720220930.model.ProgressTableWise;\r\n\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.Collections;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.TimeZone;\r\n\r\npublic class DashBoardActivity extends AppCompatActivity implements OnChartValueSelectedListener {\r\n\r\n    BarChart barChart;\r\n    TextView titleText,totalQuestion,totalCorrect,totalWrong,tTotalQuestion,tTotalCorrect,tTotalWrong,noDataText,noData;\r\n    RecyclerView progressRecyclerView;\r\n    private ProgressAdapter progressAdapter;\r\n    NestedScrollView completeLayout;\r\n    private List<Progress> progressList;\r\n    Typeface typeface;\r\n    TextView filter;\r\n    List<ProgressDate> progressByDates;\r\n    List<ProgressTableWise> listTableWise;\r\n    long totalQ=0,totalW=0,totalC=0,tTotalQ=0,tTotalW=0,tTotalC=0;\r\n    ImageView back;\r\n    ProgressBar tProgress;\r\n    TextView progressDate;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_dash_board);\r\n\r\n\r\n        titleText = findViewById(R.id.titleText);\r\n        titleText.setText(\"Dashboard\");\r\n        back=findViewById(R.id.imageViewBack);\r\n        typeface = ResourcesCompat.getFont(getApplicationContext(), R.font.reemkufi_medium);\r\n        barChart = findViewById(R.id.barChart);\r\n        totalQuestion=findViewById(R.id.totalQuestion);\r\n        totalCorrect=findViewById(R.id.totalRight);\r\n        totalWrong=findViewById(R.id.totalWrong);\r\n        progressDate=findViewById(R.id.progressDate);\r\n\r\n        tProgress=findViewById(R.id.tProgressResult);\r\n\r\n        completeLayout=findViewById(R.id.completeLayout);\r\n\r\n        tTotalQuestion=findViewById(R.id.tQuestions);\r\n        tTotalCorrect=findViewById(R.id.tCorrect);\r\n        tTotalWrong=findViewById(R.id.tWrong);\r\n\r\n        filter=findViewById(R.id.filterBy);\r\n        noDataText=findViewById(R.id.noDataText);\r\n        noData=findViewById(R.id.noData);\r\n\r\n        progressRecyclerView = findViewById(R.id.progressReport);\r\n\r\n        progressList = new ArrayList<>();\r\n        progressByDates=new ArrayList<>();\r\n\r\n        barChart.setDrawBarShadow(false);\r\n       // barChart.setDrawValueAboveBar(true);\r\n        barChart.getDescription().setEnabled(false);\r\n        barChart.setNoDataTextTypeface(typeface);\r\n\r\n        // if more than 60 entries are displayed in the barChart, no values will be\r\n        // drawn\r\n        barChart.setMaxVisibleValueCount(1000);\r\n        // scaling can now only be done on x- and y-axis separately\r\n        barChart.setPinchZoom(false);\r\n        barChart.setDrawGridBackground(true);\r\n        barChart.setTouchEnabled(true);\r\n        barChart.setDragEnabled(true);\r\n        barChart.getAxisLeft().setDrawLabels(false);\r\n        barChart.getAxisRight().setDrawLabels(false);\r\n\r\n        Legend l = barChart.getLegend();\r\n        l.setVerticalAlignment(Legend.LegendVerticalAlignment.BOTTOM);\r\n        l.setHorizontalAlignment(Legend.LegendHorizontalAlignment.LEFT);\r\n        l.setOrientation(Legend.LegendOrientation.HORIZONTAL);\r\n        l.setDrawInside(true);\r\n        l.setForm(Legend.LegendForm.CIRCLE);\r\n        l.setFormSize(9f);\r\n        l.setTextSize(10f);\r\n        l.setTypeface(typeface);\r\n        l.setXEntrySpace(4f);\r\n\r\n\r\n\r\n        barChart.setOnChartValueSelectedListener(this);\r\n\r\n        progressRecyclerView.setLayoutManager(new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.VERTICAL, false));\r\n        progressAdapter = new ProgressAdapter(getApplicationContext());\r\n        progressRecyclerView.setAdapter(progressAdapter);\r\n\r\n        getSumOfCorrect();\r\n        loadNoteList();\r\n\r\n\r\n        setData(7, 60);\r\n        calculateTotalValues();\r\n        calculateTotalCurrentValues();\r\n\r\n        back.setOnClickListener(v->onBackPressed());\r\n\r\n\r\n        MaterialDatePicker.Builder materialDateBuilder = MaterialDatePicker.Builder.datePicker();\r\n\r\n        // now define the properties of the\r\n        // materialDateBuilder that is title text as SELECT A DATE\r\n        materialDateBuilder.setTitleText(\"SELECT A DATE\");\r\n\r\n        // now create the instance of the material date\r\n        // picker\r\n        final MaterialDatePicker materialDatePicker = materialDateBuilder.build();\r\n\r\n        // handle select date button which opens the\r\n        // material design date picker\r\n        filter.setOnClickListener(\r\n                new View.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(View v) {\r\n                        // getSupportFragmentManager() to\r\n                        // interact with the fragments\r\n                        // associated with the material design\r\n                        // date picker tag is to get any error\r\n                        // in logcat\r\n                        materialDatePicker.show(getSupportFragmentManager(), \"MATERIAL_DATE_PICKER\");\r\n                    }\r\n                });\r\n\r\n        // now handle the positive button click from the\r\n        // material design date picker\r\n        materialDatePicker.addOnPositiveButtonClickListener(selection -> {\r\n\r\n            Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\r\n            calendar.setTimeInMillis(Long.parseLong(selection.toString()));\r\n            SimpleDateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\r\n            String formattedDate  = format.format(calendar.getTime());\r\n            filter.setText(formattedDate);\r\n            loadNoteListByDate(formattedDate);\r\n\r\n        });\r\n\r\n    }\r\n\r\n\r\n    public void calculateTotalValues(){\r\n\r\n        for (int i=0;i<progressByDates.size();i++){\r\n\r\n            totalQ=totalQ+progressByDates.get(i).getTotal_correct()+progressByDates.get(i).getTotal_wrong();\r\n            totalW=totalW+progressByDates.get(i).getTotal_wrong();\r\n            totalC=totalC+progressByDates.get(i).getTotal_correct();\r\n\r\n        }\r\n\r\n        totalQuestion.setText(totalQ+\"\");\r\n        totalCorrect.setText(totalC+\"\\nCorrect\");\r\n        totalWrong.setText(totalW+\"\\nWrong\");\r\n\r\n    }\r\n\r\n    public void calculateTotalCurrentValues(){\r\n\r\n        Date date=new Date();\r\n        SimpleDateFormat formatter = new SimpleDateFormat(\"dd/MM/yyyy\");\r\n\r\n        for (int i=0;i<progressByDates.size();i++){\r\n\r\n            if (progressByDates.get(i).getDate().equals(formatter.format(date)+\"\"))\r\n            {\r\n                tTotalQ=tTotalQ+progressByDates.get(i).getTotal_correct()+progressByDates.get(i).getTotal_wrong();\r\n                tTotalW=tTotalW+progressByDates.get(i).getTotal_wrong();\r\n                tTotalC=tTotalC+progressByDates.get(i).getTotal_correct();\r\n            }\r\n            else{\r\n           //     break;\r\n            }\r\n\r\n\r\n        }\r\n\r\n        tTotalQuestion.setText(tTotalQ+\"\");\r\n        tTotalCorrect.setText(tTotalC+\"\");\r\n        tTotalWrong.setText(tTotalW+\"\");\r\n        tProgress.setMax((int)tTotalQ);\r\n        tProgress.setProgress((int)tTotalC);\r\n\r\n    }\r\n\r\n\r\n    private void loadNoteList() {\r\n\r\n        ProgressDataBase db = ProgressDataBase.getDbInstance(this.getApplicationContext());\r\n        List<ProgressM> notesList = db.progressDao().getAllProgress();\r\n\r\n        if (notesList.size()==0){\r\n            noDataText.setVisibility(View.VISIBLE);\r\n            progressRecyclerView.setVisibility(View.GONE);\r\n        }\r\n\r\n        else{\r\n            noDataText.setVisibility(View.GONE);\r\n            progressRecyclerView.setVisibility(View.VISIBLE);\r\n        }\r\n        Log.i(\"List\", notesList + \"\");\r\n        progressAdapter.setNotesList(notesList);\r\n\r\n    }\r\n\r\n\r\n    private void loadTableScoreByDate(String date) {\r\n\r\n        ProgressDataBase db = ProgressDataBase.getDbInstance(this.getApplicationContext());\r\n        List<ProgressTableWise> notesList = db.progressDao().getSumOFTableDataByDate(date);\r\n        Date date_=new Date();\r\n        SimpleDateFormat formatter = new SimpleDateFormat(\"dd/MM/yyyy\");\r\n\r\n        if (!formatter.format(date_).equals(date))\r\n            progressDate.setText(\"Progress on \"+date);\r\n        else\r\n            progressDate.setText(\"Today's Progress\");\r\n\r\n        tTotalC=0;\r\n        tTotalW=0;\r\n        tTotalQ=0;\r\n\r\n        for (int i=0;i<notesList.size();i++){\r\n        tTotalQ=tTotalQ+notesList.get(i).getTotal_correct()+notesList.get(i).getTotal_wrong();\r\n        tTotalW=tTotalW+notesList.get(i).getTotal_wrong();\r\n        tTotalC=tTotalC+notesList.get(i).getTotal_correct();\r\n        }\r\n\r\n        tTotalQuestion.setText(tTotalQ+\"\");\r\n        tTotalCorrect.setText(tTotalC+\"\");\r\n        tTotalWrong.setText(tTotalW+\"\");\r\n        tProgress.setMax((int)tTotalQ);\r\n        tProgress.setProgress((int)tTotalC);\r\n\r\n       if (notesList.size()==0){\r\n           noDataText.setVisibility(View.VISIBLE);\r\n           progressRecyclerView.setVisibility(View.GONE);\r\n       }\r\n\r\n        else{\r\n            noDataText.setVisibility(View.GONE);\r\n            progressRecyclerView.setVisibility(View.VISIBLE);\r\n        }\r\n\r\n        Log.i(\"ListSUMTABLE\", notesList + \"\");\r\n        progressAdapter.setNotesList(notesList,date);\r\n\r\n    }\r\n\r\n\r\n    private void loadNoteListByDate(String dt)  {\r\n\r\n\r\n        ProgressDataBase db = ProgressDataBase.getDbInstance(this.getApplicationContext());\r\n        List<ProgressM> notesList = db.progressDao().getAllProgressByDate(dt);\r\n        Log.i(\"List\", notesList + \"\");\r\n        if (notesList.size()==0){\r\n            noDataText.setVisibility(View.VISIBLE);\r\n            progressRecyclerView.setVisibility(View.GONE);\r\n        }\r\n\r\n        else{\r\n            noDataText.setVisibility(View.GONE);\r\n            progressRecyclerView.setVisibility(View.VISIBLE);\r\n        }\r\n\r\n        progressAdapter.setNotesList(notesList);\r\n\r\n    }\r\n\r\n\r\n    private void getSumOfCorrect() {\r\n        ProgressDataBase db = ProgressDataBase.getDbInstance(this.getApplicationContext());\r\n        progressByDates = db.progressDao().getSumOFData();\r\n    }\r\n\r\n\r\n    private void setData(int count, float range) {\r\n\r\n        ArrayList year = new ArrayList();\r\n\r\n        year.add(\"\");\r\n        year.add(\"Day 1\");\r\n        year.add(\"Day 2\");\r\n        year.add(\"Day 3\");\r\n        year.add(\"Day 4\");\r\n        year.add(\"Day 5\");\r\n        year.add(\"Day 6\");\r\n        year.add(\"Day 7\");\r\n\r\n        float start = 1f;\r\n        ArrayList<BarEntry> values = new ArrayList<>();\r\n\r\n\r\n        Collections.reverse(progressByDates);\r\n\r\n        if (progressByDates.size()>0){\r\n            noData.setVisibility(View.GONE);\r\n            completeLayout.setVisibility(View.VISIBLE);\r\n            for (int i=0;i<7;i++){\r\n\r\n                try{\r\n                    values.add(new BarEntry(i+1, progressByDates.get(i).getTotal_correct()+progressByDates.get(i).getTotal_wrong()));\r\n                }catch (Exception e){\r\n                    values.add(new BarEntry(i+1, 0));\r\n                }\r\n\r\n            }\r\n        }\r\n        else{\r\n            noData.setVisibility(View.VISIBLE);\r\n            completeLayout.setVisibility(View.GONE);\r\n        }\r\n\r\n\r\n\r\n        BarDataSet set1;\r\n        if (barChart.getData() != null &&\r\n                barChart.getData().getDataSetCount() > 0) {\r\n            set1 = (BarDataSet) barChart.getData().getDataSetByIndex(0);\r\n            set1.setValues(values);\r\n            barChart.getData().notifyDataChanged();\r\n            barChart.notifyDataSetChanged();\r\n        } else {\r\n            set1 = new BarDataSet(values, \"Your 7 Days Progress\");\r\n            set1.setDrawIcons(false);\r\n            int startColor = ContextCompat.getColor(this, R.color.teal_700);\r\n            int endColor = ContextCompat.getColor(this, R.color.teal_200);\r\n\r\n            List<GradientColor> gradientFills = new ArrayList<>();\r\n            gradientFills.add(new GradientColor(startColor, endColor));\r\n            gradientFills.add(new GradientColor(startColor, endColor));\r\n            gradientFills.add(new GradientColor(startColor, endColor));\r\n            gradientFills.add(new GradientColor(startColor, endColor));\r\n            gradientFills.add(new GradientColor(startColor, endColor));\r\n            set1.setGradientColors(gradientFills);\r\n            ArrayList<IBarDataSet> dataSets = new ArrayList<>();\r\n            dataSets.add(set1);\r\n            BarData data = new BarData(dataSets);\r\n            data.setValueTextSize(10f);\r\n\r\n            data.setValueFormatter(new IntegerFormatter());\r\n            data.setValueTypeface(typeface);\r\n            data.setBarWidth(0.9f);\r\n            barChart.getXAxis().setValueFormatter(new IndexAxisValueFormatter(year));\r\n            barChart.animateY(1500);\r\n            barChart.setData(data);\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onValueSelected(Entry e, Highlight h) {\r\n\r\n\r\n        try{\r\n            loadTableScoreByDate(progressByDates.get((int)e.getX()-1).getDate());\r\n        }catch (Exception e1){\r\n            loadTableScoreByDate(\"..\");\r\n        }\r\n\r\n       // Toast.makeText(this, e.getY()+\",\"+e.getX(), Toast.LENGTH_SHORT).show();\r\n    }\r\n\r\n    @Override\r\n    public void onNothingSelected() {\r\n\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/maths/beyond_school_280720220930/DashBoardActivity.java b/app/src/main/java/com/maths/beyond_school_280720220930/DashBoardActivity.java
--- a/app/src/main/java/com/maths/beyond_school_280720220930/DashBoardActivity.java	(revision b40401d29ed89e0bcba3248488be6dbf0a5a82c6)
+++ b/app/src/main/java/com/maths/beyond_school_280720220930/DashBoardActivity.java	(date 1667541517745)
@@ -246,48 +246,48 @@
     }
 
 
-    private void loadTableScoreByDate(String date) {
-
-        ProgressDataBase db = ProgressDataBase.getDbInstance(this.getApplicationContext());
-        List<ProgressTableWise> notesList = db.progressDao().getSumOFTableDataByDate(date);
-        Date date_=new Date();
-        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
-
-        if (!formatter.format(date_).equals(date))
-            progressDate.setText("Progress on "+date);
-        else
-            progressDate.setText("Today's Progress");
-
-        tTotalC=0;
-        tTotalW=0;
-        tTotalQ=0;
-
-        for (int i=0;i<notesList.size();i++){
-        tTotalQ=tTotalQ+notesList.get(i).getTotal_correct()+notesList.get(i).getTotal_wrong();
-        tTotalW=tTotalW+notesList.get(i).getTotal_wrong();
-        tTotalC=tTotalC+notesList.get(i).getTotal_correct();
-        }
-
-        tTotalQuestion.setText(tTotalQ+"");
-        tTotalCorrect.setText(tTotalC+"");
-        tTotalWrong.setText(tTotalW+"");
-        tProgress.setMax((int)tTotalQ);
-        tProgress.setProgress((int)tTotalC);
-
-       if (notesList.size()==0){
-           noDataText.setVisibility(View.VISIBLE);
-           progressRecyclerView.setVisibility(View.GONE);
-       }
-
-        else{
-            noDataText.setVisibility(View.GONE);
-            progressRecyclerView.setVisibility(View.VISIBLE);
-        }
-
-        Log.i("ListSUMTABLE", notesList + "");
-        progressAdapter.setNotesList(notesList,date);
-
-    }
+//    private void loadTableScoreByDate(String date) {
+//
+//        ProgressDataBase db = ProgressDataBase.getDbInstance(this.getApplicationContext());
+//      //  List<ProgressTableWise> notesList = db.progressDao().getSumOFTableDataByDate(date);
+//        Date date_=new Date();
+//        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
+//
+//        if (!formatter.format(date_).equals(date))
+//            progressDate.setText("Progress on "+date);
+//        else
+//            progressDate.setText("Today's Progress");
+//
+//        tTotalC=0;
+//        tTotalW=0;
+//        tTotalQ=0;
+//
+//        for (int i=0;i<notesList.size();i++){
+//        tTotalQ=tTotalQ+notesList.get(i).getTotal_correct()+notesList.get(i).getTotal_wrong();
+//        tTotalW=tTotalW+notesList.get(i).getTotal_wrong();
+//        tTotalC=tTotalC+notesList.get(i).getTotal_correct();
+//        }
+//
+//        tTotalQuestion.setText(tTotalQ+"");
+//        tTotalCorrect.setText(tTotalC+"");
+//        tTotalWrong.setText(tTotalW+"");
+//        tProgress.setMax((int)tTotalQ);
+//        tProgress.setProgress((int)tTotalC);
+//
+//       if (notesList.size()==0){
+//           noDataText.setVisibility(View.VISIBLE);
+//           progressRecyclerView.setVisibility(View.GONE);
+//       }
+//
+//        else{
+//            noDataText.setVisibility(View.GONE);
+//            progressRecyclerView.setVisibility(View.VISIBLE);
+//        }
+//
+//        Log.i("ListSUMTABLE", notesList + "");
+//        progressAdapter.setNotesList(notesList,date);
+//
+//    }
 
 
     private void loadNoteListByDate(String dt)  {
@@ -391,17 +391,22 @@
     }
 
 
+//    @Override
+//    public void onValueSelected(Entry e, Highlight h) {
+//
+//
+//        try{
+//            loadTableScoreByDate(progressByDates.get((int)e.getX()-1).getDate());
+//        }catch (Exception e1){
+//            loadTableScoreByDate("..");
+//        }
+//
+//       // Toast.makeText(this, e.getY()+","+e.getX(), Toast.LENGTH_SHORT).show();
+//    }
+
     @Override
     public void onValueSelected(Entry e, Highlight h) {
 
-
-        try{
-            loadTableScoreByDate(progressByDates.get((int)e.getX()-1).getDate());
-        }catch (Exception e1){
-            loadTableScoreByDate("..");
-        }
-
-       // Toast.makeText(this, e.getY()+","+e.getX(), Toast.LENGTH_SHORT).show();
     }
 
     @Override
Index: app/src/main/java/com/maths/beyond_school_280720220930/fragments/EnglishFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.maths.beyond_school_280720220930.fragments;\r\n\r\nimport static com.maths.beyond_school_280720220930.utils.Constants.EXTRA_TITLE;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.ActionBarDrawerToggle;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\n\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.LinearLayout;\r\n\r\nimport com.google.android.material.bottomsheet.BottomSheetBehavior;\r\nimport com.google.android.material.button.MaterialButton;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.maths.beyond_school_280720220930.AlarmAtTime;\r\nimport com.maths.beyond_school_280720220930.HomeScreen;\r\nimport com.maths.beyond_school_280720220930.R;\r\nimport com.maths.beyond_school_280720220930.SP.PrefConfig;\r\nimport com.maths.beyond_school_280720220930.TabbedHomePage;\r\nimport com.maths.beyond_school_280720220930.ViewCurriculum;\r\nimport com.maths.beyond_school_280720220930.adapters.SectionSubSubjectRecyclerAdapter;\r\nimport com.maths.beyond_school_280720220930.adapters.SubjectRecyclerAdapter;\r\nimport com.maths.beyond_school_280720220930.adapters.SubjectRecyclerAdapterUpdated;\r\nimport com.maths.beyond_school_280720220930.database.grade_tables.GradeData;\r\nimport com.maths.beyond_school_280720220930.database.grade_tables.GradeDatabase;\r\nimport com.maths.beyond_school_280720220930.database.grade_tables.Grades_data;\r\nimport com.maths.beyond_school_280720220930.databinding.ActivityHomeScreenBinding;\r\nimport com.maths.beyond_school_280720220930.databinding.FragmentEnglishBinding;\r\nimport com.maths.beyond_school_280720220930.dialogs.HintDialog;\r\nimport com.maths.beyond_school_280720220930.english_activity.grammar.GrammarActivity;\r\nimport com.maths.beyond_school_280720220930.english_activity.spelling.EnglishSpellingActivity;\r\nimport com.maths.beyond_school_280720220930.extras.CustomProgressDialogue;\r\nimport com.maths.beyond_school_280720220930.model.SectionSubSubject;\r\nimport com.maths.beyond_school_280720220930.model.SubSubject;\r\nimport com.maths.beyond_school_280720220930.utils.Constants;\r\nimport com.maths.beyond_school_280720220930.utils.UtilityFunctions;\r\n\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Date;\r\nimport java.util.List;\r\n\r\n\r\npublic class EnglishFragment extends Fragment {\r\n\r\n    private FragmentEnglishBinding binding;\r\n    private static final String TAG = \"EnglishFragment\";\r\n    private List<String> mathSub;\r\n    private List<String> engSub;\r\n    private String kidsGrade = \"\";\r\n    private String kidsName = \"\";\r\n    private GradeDatabase gradeDatabase;\r\n    private List<Grades_data> subMathsData;\r\n    private List<Grades_data> subEngData;\r\n    private SubjectRecyclerAdapter subjectRecyclerAdapter;\r\n    String[] math = {\"Addition\", \"Subtraction\", \"Multiplication Tables\", \"Division\"};\r\n    String[] eng = {\"Vocabulary\"};\r\n    private List<SubSubject> subMathList;\r\n    private List<SubSubject> subEngList;\r\n    private List<SectionSubSubject> sectionList;\r\n    private int[] resMath = {R.drawable.ic_addition, R.drawable.ic_sub, R.drawable.ic_mul, R.drawable.ic_division};\r\n    private int[] resEng = {R.drawable.ic_vocab_p, R.drawable.ic_spell_p, R.drawable.ic_spell_p, R.drawable.ic_spell_p};\r\n\r\n    private String[] tableList;\r\n    private SectionSubSubjectRecyclerAdapter sectionSubSubjectRecyclerAdapter;\r\n    private FirebaseAuth mAuth;\r\n    private FirebaseUser mCurrentUser;\r\n    private int startIndex = 0;\r\n    private FirebaseFirestore kidsDb = FirebaseFirestore.getInstance();\r\n    ActionBarDrawerToggle toggle;\r\n    private int REQUEST_RECORD_AUDIO = 1;\r\n    private List<String> chapterListEng;\r\n    private List<String> chapterListMath;\r\n    private CustomProgressDialogue customProgressDialogue;\r\n    private BottomSheetBehavior mBottomSheetBehavior;\r\n    private List<GradeData> subjectDataNew;\r\n    private SubjectRecyclerAdapterUpdated subjectRecyclerAdapterUpdated;\r\n    private String userType = \"\";\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n\r\n        binding = FragmentEnglishBinding.bind(view);\r\n\r\n        mAuth = FirebaseAuth.getInstance();\r\n        mCurrentUser = mAuth.getCurrentUser();\r\n\r\n        subjectDataNew = new ArrayList<>();\r\n        startIndex = PrefConfig.readIntDInPref(getContext(), getResources().getString(R.string.alter_maths_value));\r\n        userType = PrefConfig.readIdInPref(getContext(), getResources().getString(R.string.user_type));\r\n        customProgressDialogue = new CustomProgressDialogue(getContext());\r\n        mathSub = new ArrayList<>();\r\n        engSub = new ArrayList<>();\r\n\r\n        subMathsData = new ArrayList<>();\r\n        subEngData = new ArrayList<>();\r\n\r\n        subMathList = new ArrayList<>();\r\n        subEngList = new ArrayList<>();\r\n        sectionList = new ArrayList<>();\r\n\r\n        tableList = getResources().getStringArray(R.array.table_name);\r\n        subjectRecyclerAdapter = new SubjectRecyclerAdapter(subMathsData, getContext());\r\n\r\n\r\n        kidsGrade = PrefConfig.readIdInPref(getContext(), getResources().getString(R.string.kids_grade));\r\n\r\n        kidsName = PrefConfig.readIdInPref(getContext(), getResources().getString(R.string.kids_name));\r\n        gradeDatabase = GradeDatabase.getDbInstance(getContext());\r\n\r\n        mathSub = Arrays.asList(math);\r\n        engSub = Arrays.asList(eng);\r\n\r\n\r\n        setSubSubjectProgress();\r\n\r\n\r\n    }\r\n\r\n\r\n    private void uiChnages() {\r\n\r\n        userType = PrefConfig.readIdInPref(getContext(), getResources().getString(R.string.user_type));\r\n        binding.evaluationTestTile.setVisibility(View.GONE);\r\n\r\n        if (!userType.equals(\"old_user\")) {\r\n            binding.completeProgressTile.setVisibility(View.GONE);\r\n        } else {\r\n            binding.completeProgressTile.setVisibility(View.VISIBLE);\r\n            binding.startExeButtonLayout.setVisibility(View.GONE);\r\n        }\r\n\r\n        binding.startExeButtonLayout.setOnClickListener(v -> {\r\n            PrefConfig.writeIdInPref(getContext(), \"old_user\", getResources().getString(R.string.user_type));\r\n            binding.nestedScrollView.setSmoothScrollingEnabled(true);\r\n            binding.nestedScrollView.scrollTo(0, 0);\r\n            binding.startExeButtonLayout.setVisibility(View.GONE);\r\n            binding.completeProgressTile.setVisibility(View.VISIBLE);\r\n            //startActivity(new Intent(getContext(), ViewCurriculum.class));\r\n        });\r\n\r\n        binding.gotoViewCurriculumOne.setOnClickListener(v -> {\r\n            PrefConfig.writeIdInPref(getContext(), \"old_user\", getResources().getString(R.string.user_type));\r\n            startActivity(new Intent(getContext(), ViewCurriculum.class));\r\n        });\r\n\r\n        binding.gotoViewCurriculumTwo.setOnClickListener(v -> {\r\n            PrefConfig.writeIdInPref(getContext(), \"old_user\", getResources().getString(R.string.user_type));\r\n            startActivity(new Intent(getContext(), ViewCurriculum.class));\r\n        });\r\n        dateChecking();\r\n\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n\r\n\r\n        // Inflate the layout for this fragment\r\n        return inflater.inflate(R.layout.fragment_english, container, false);\r\n    }\r\n\r\n\r\n    private void displayAddProfileAlertDialog() {\r\n\r\n        HintDialog hintDialog = new HintDialog(getContext());\r\n        hintDialog.setCancelable(true);\r\n        hintDialog.setAlertTitle(\"Set Reminder\");\r\n        hintDialog.setAlertDesciption(\"Hey, You can set a reminder which can notify about your study time\");\r\n\r\n        hintDialog.actionButton(\"Set Reminder\");\r\n        hintDialog.actionButtonBackgroundColor(R.color.primary);\r\n        hintDialog.setOnActionListener(viewId -> {\r\n\r\n            switch (viewId.getId()) {\r\n\r\n                case R.id.closeButton:\r\n                    hintDialog.dismiss();\r\n                    break;\r\n                case R.id.buttonAction:\r\n                    startActivity(new Intent(getContext(), AlarmAtTime.class));\r\n                    hintDialog.dismiss();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        hintDialog.show();\r\n\r\n    }\r\n\r\n\r\n    private void dateChecking() {\r\n\r\n        Log.d(TAG, \"dateChecking: \");\r\n\r\n\r\n\r\n\r\n\r\n        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"dd/MM/yyyy\");\r\n\r\n        if (!PrefConfig.readIdInPref(getContext(), getResources().getString(R.string.alter_maths)).equals(simpleDateFormat.format(new Date()))) {\r\n\r\n            // Added functionality when we got a new date\r\n\r\n            if (PrefConfig.readIdInPref(getContext(), getResources().getString(R.string.timer_time)).equals(\"\")) {\r\n                displayAddProfileAlertDialog();\r\n            }\r\n            PrefConfig.writeIdInPref(getContext(), simpleDateFormat.format(new Date()), getResources().getString(R.string.alter_maths));\r\n            if (PrefConfig.readIntDInPref(getContext(), getResources().getString(R.string.alter_maths_value)) == 0) {\r\n                PrefConfig.writeIntDInPref(getContext(), 2, getResources().getString(R.string.alter_maths_value));\r\n                startIndex = 2;\r\n            } else {\r\n                PrefConfig.writeIntDInPref(getContext(), 0, getResources().getString(R.string.alter_maths_value));\r\n                startIndex = 0;\r\n            }\r\n            getUiData(true);\r\n            //  customProgressDialogue.show();\r\n        } else {\r\n\r\n            Log.i(\"List_data sd\", PrefConfig.readNormalListInPref(getContext(), getResources().getString(R.string.saved_english_value)) + \"\");\r\n\r\n            if (PrefConfig.readNormalListInPref(getContext(), getResources().getString(R.string.saved_english_value)).size() == 0){\r\n                getUiData(true);\r\n                if (PrefConfig.readIdInPref(getContext(), getResources().getString(R.string.timer_time)).equals(\"\")) {\r\n                    displayAddProfileAlertDialog();\r\n                }\r\n            }\r\n            else\r\n                getUiData(false);\r\n            if (startIndex == 0) {\r\n                PrefConfig.writeIntDInPref(getContext(), 0, getResources().getString(R.string.alter_maths_value));\r\n            } else {\r\n                PrefConfig.writeIntDInPref(getContext(), 2, getResources().getString(R.string.alter_maths_value));\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    private void getUiData(boolean isNewCall) throws ArrayIndexOutOfBoundsException, NullPointerException {\r\n\r\n        subMathsData.clear();\r\n        subEngData.clear();\r\n        chapterListEng = new ArrayList<>();\r\n        chapterListMath = new ArrayList<>();\r\n        chapterListMath.clear();\r\n        chapterListEng.clear();\r\n\r\n        subjectRecyclerAdapter.notifyDataSetChanged();\r\n        Log.d(TAG, \"getUiData: \");\r\n\r\n        if (isNewCall) {\r\n\r\n            getDataFromDatabase(isNewCall);\r\n            customProgressDialogue.dismiss();\r\n            Log.d(TAG, \"getUiData: if\");\r\n\r\n        } else {\r\n            getDataFromDatabase(isNewCall);\r\n            chapterListEng.clear();\r\n            chapterListMath.clear();\r\n            Log.d(TAG, \"getUiData: else\");\r\n\r\n        }\r\n    }\r\n    //getting data from local db\r\n\r\n    private void getDataFromDatabase(boolean isNewCall) {\r\n\r\n        subjectDataNew.clear();\r\n\r\n        Log.d(\"TAG\", \"getDataFromDatabase:call \");\r\n        if (isNewCall) {\r\n            if (eng.length <= 2) {\r\n                try {\r\n                    for (String st : eng) {\r\n                        subjectDataNew.add(gradeDatabase.gradesDaoUpdated().getSubjectDataIncompleteFirst(st).get(0));\r\n                        chapterListEng.add(gradeDatabase.gradesDaoUpdated().getSubjectDataIncompleteFirst(st).get(0).getId());\r\n                        Log.d(\"XXXXX\", \"getDataFromDatabase: IF SIZE \" + subjectDataNew);\r\n//            gradeDatabase.gradesDaoUpdated().getSubjectDataLimited(st).observe(this, grades_data -> {\r\n//                Log.d(\"XXX\", \"getDataFromDatabase: \"+grades_data.size());\r\n//                subjectRecyclerAdapterUpdated.submitList(grades_data);\r\n//            });\r\n                    }\r\n                } catch (Exception e) {\r\n                    Log.d(TAG, \"getDataFromDatabase: Database not found\");\r\n                }\r\n            } else {\r\n                List<Integer> ls = new ArrayList();\r\n                chapterListEng.clear();\r\n\r\n                ls = UtilityFunctions.getRandomTwoIntegerUpto(eng.length, 0);\r\n                Log.d(\"LIST_SIZE\", \"getDataFromDatabase: \" + ls.size());\r\n                for (int index : ls) {\r\n                    subjectDataNew.add(gradeDatabase.gradesDaoUpdated().getSubjectDataIncompleteFirst(eng[index]).get(0));\r\n                    chapterListEng.add(gradeDatabase.gradesDaoUpdated().getSubjectDataIncompleteFirst(eng[index]).get(0).getId());\r\n                    Log.d(\"XXXXX\", \"getDataFromDatabase:  ELSE SIZE\" + subjectDataNew);\r\n                }\r\n\r\n            }\r\n            PrefConfig.writeNormalListInPref(getContext(), chapterListEng, getResources().getString(R.string.saved_english_value));\r\n\r\n        } else {\r\n            try {\r\n                chapterListEng = PrefConfig.readNormalListInPref(getContext(), getResources().getString(R.string.saved_english_value));\r\n                for (String st : chapterListEng) {\r\n                    subjectDataNew.add(gradeDatabase.gradesDaoUpdated().getSubjectDataViaID(st).get(0));\r\n                    Log.d(\"XXXX\", \"getDataFromDatabase: OLD \" + subjectDataNew);\r\n//            gradeDatabase.gradesDaoUpdated().getSubjectDataLimited(st).observe(this, grades_data -> {\r\n//                Log.d(\"XXX\", \"getDataFromDatabase: \"+grades_data.size());\r\n//                subjectRecyclerAdapterUpdated.submitList(grades_data);\r\n//            });\r\n                }\r\n\r\n            } catch (Exception e) {\r\n\r\n                chapterListEng.clear();\r\n\r\n                if (eng.length <= 2) {\r\n                    for (String st : eng) {\r\n                        subjectDataNew.add(gradeDatabase.gradesDaoUpdated().getSubjectDataIncompleteFirst(st).get(0));\r\n                        chapterListEng.add(gradeDatabase.gradesDaoUpdated().getSubjectDataIncompleteFirst(st).get(0).getId());\r\n                        Log.d(TAG, \"getDataFromDatabase:SIZE 2 \" + subjectDataNew);\r\n//            gradeDatabase.gradesDaoUpdated().getSubjectDataLimited(st).observe(this, grades_data -> {\r\n//                Log.d(\"XXX\", \"getDataFromDatabase: \"+grades_data.size());\r\n//                subjectRecyclerAdapterUpdated.submitList(grades_data);\r\n//            });\r\n                    }\r\n                } else {\r\n                    List<Integer> ls = new ArrayList();\r\n                    Log.d(TAG, \"LIST_SIZE: \" + ls.size());\r\n                    ls = UtilityFunctions.getRandomTwoIntegerUpto(eng.length, 0);\r\n                    for (int index : ls) {\r\n                        subjectDataNew.add(gradeDatabase.gradesDaoUpdated().getSubjectDataIncompleteFirst(eng[index]).get(0));\r\n                        chapterListEng.add(gradeDatabase.gradesDaoUpdated().getSubjectDataIncompleteFirst(eng[index]).get(0).getId());\r\n                        Log.d(TAG, \"getDataFromDatabase:ELSE SIZE \" + subjectDataNew);\r\n                    }\r\n\r\n                }\r\n                PrefConfig.writeNormalListInPref(getContext(), chapterListEng, getResources().getString(R.string.saved_english_value));\r\n\r\n            }\r\n\r\n        }\r\n\r\n        binding.englishRecyclerView.setLayoutManager(new LinearLayoutManager(getContext(), LinearLayoutManager.VERTICAL, false));\r\n        subjectRecyclerAdapterUpdated = new SubjectRecyclerAdapterUpdated(getContext(), gradeData -> {\r\n\r\n\r\n            Intent intent;\r\n            Log.d(TAG, \"setRecyclerViewData: \" + gradeData.getRequest());\r\n            if (gradeData.getSubject().equals(\"Spelling_CommonWords\")) {\r\n                intent = new Intent(getContext(), EnglishSpellingActivity.class);\r\n                intent.putExtra(Constants.EXTRA_SPELLING_DETAIL, gradeData.getChapter_name());\r\n            } else {\r\n                intent = new Intent(getContext(), GrammarActivity.class);\r\n                intent.putExtra(Constants.EXTRA_GRAMMAR_CATEGORY, gradeData.getChapter_name());\r\n            }\r\n            intent.putExtra(Constants.EXTRA_ONLINE_FLAG, true);\r\n            intent.putExtra(EXTRA_TITLE, gradeData.getSubject());\r\n            startActivity(intent);\r\n\r\n        });\r\n        binding.englishRecyclerView.setAdapter(subjectRecyclerAdapterUpdated);\r\n        subjectRecyclerAdapterUpdated.submitList(subjectDataNew);\r\n    }\r\n\r\n\r\n    private void setSubSubjectProgress() {\r\n\r\n        subMathList.clear();\r\n        subEngList.clear();\r\n        sectionList.clear();\r\n\r\n\r\n        eng = gradeDatabase.gradesDaoUpdated().getChapterNames();\r\n//        for (int i = 0; i < math.length; i++) {\r\n//            int total = UtilityFunctions.gettingSubSubjectData(gradeDatabase, kidsGrade, math[i].split(\" \")[0], true).size();\r\n//            int completed = UtilityFunctions.gettingSubSubjectData(gradeDatabase, kidsGrade, math[i], false).size();\r\n//            if (!math[i].equals(\"Multiplication Tables\")) {\r\n//                subMathList.add(new SubSubject(math[i], total, completed, resMath[i]));\r\n//            } else {\r\n//                Log.i(\"Mul_Data\", total + \",\" + UtilityFunctions.gettingSubSubjectData(gradeDatabase, kidsGrade, math[i].split(\" \")[0], false));\r\n//                int mulUpto = PrefConfig.readIntInPref(getApplicationContext(), getResources().getString(R.string.multiplication_upto));\r\n//                total = Integer.parseInt(UtilityFunctions.gettingSubSubjectData(gradeDatabase, kidsGrade, math[i].split(\" \")[0], true).get(total - 1).chapter.split(\" \")[3]);\r\n//                if (mulUpto == 1)\r\n//                    subMathList.add(new SubSubject(math[i], total, 0, resMath[i]));\r\n//                else\r\n//                    subMathList.add(new SubSubject(math[i], total, mulUpto, resMath[i]));\r\n//            }\r\n//        }\r\n//\r\n//        sectionList.add(new SectionSubSubject(\"Mathematics\", subMathList));\r\n\r\n        for (int i = 0; i < eng.length; i++) {\r\n            int total = gradeDatabase.gradesDaoUpdated().getSubjectCount(eng[i]);\r\n            //TODO: MUST BE UPDATE\r\n            int completed = gradeDatabase.gradesDaoUpdated().getSubjectCompleteCount(eng[i]);\r\n            //int completed = UtilityFunctions.gettingSubSubjectData(gradeDatabase, kidsGrade, eng[i], false).size();\r\n            subEngList.add(new SubSubject(eng[i], total, completed, resEng[i]));\r\n        }\r\n\r\n        sectionList.add(new SectionSubSubject(\"\", subEngList));\r\n\r\n\r\n        binding.progressRecyclerView.setLayoutManager(new LinearLayoutManager(getContext(), LinearLayoutManager.HORIZONTAL, false));\r\n        sectionSubSubjectRecyclerAdapter = new SectionSubSubjectRecyclerAdapter(sectionList, getContext());\r\n        binding.progressRecyclerView.setAdapter(sectionSubSubjectRecyclerAdapter);\r\n\r\n        uiChnages();\r\n\r\n//        final AlertDialog.Builder alert = new AlertDialog.Builder(getContext());\r\n//        View mView = getLayoutInflater().inflate(R.layout.progress_report_dialog, null);\r\n//\r\n//        alert.setView(mView);\r\n//        final AlertDialog alertDialog = alert.create();\r\n//        alertDialog.setCancelable(true);\r\n//        alertDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\r\n//        RecyclerView progressView = mView.findViewById(R.id.progressRecyclerView);\r\n//        ImageView closeButton = mView.findViewById(R.id.closeButton);\r\n//\r\n//\r\n//\r\n//\r\n//        try {\r\n//            alertDialog.show();\r\n//        } catch (Exception e) {\r\n//\r\n//        }\r\n//\r\n//        closeButton.setOnClickListener(v -> alertDialog.dismiss());\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        setSubSubjectProgress();\r\n        userType = PrefConfig.readIdInPref(getContext(), getResources().getString(R.string.user_type));\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/maths/beyond_school_280720220930/fragments/EnglishFragment.java b/app/src/main/java/com/maths/beyond_school_280720220930/fragments/EnglishFragment.java
--- a/app/src/main/java/com/maths/beyond_school_280720220930/fragments/EnglishFragment.java	(revision b40401d29ed89e0bcba3248488be6dbf0a5a82c6)
+++ b/app/src/main/java/com/maths/beyond_school_280720220930/fragments/EnglishFragment.java	(date 1667540857674)
@@ -372,6 +372,7 @@
                 intent.putExtra(Constants.EXTRA_GRAMMAR_CATEGORY, gradeData.getChapter_name());
             }
             intent.putExtra(Constants.EXTRA_ONLINE_FLAG, true);
+            intent.putExtra(Constants.EXTRA_CATEGORY_ID, gradeData.getId());
             intent.putExtra(EXTRA_TITLE, gradeData.getSubject());
             startActivity(intent);
 
Index: app/src/main/java/com/maths/beyond_school_280720220930/english_activity/grammar/GrammarActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.maths.beyond_school_280720220930.english_activity.grammar;\r\n\r\nimport static com.maths.beyond_school_280720220930.utils.Constants.EXTRA_GRAMMAR_CATEGORY;\r\nimport static com.maths.beyond_school_280720220930.utils.Constants.EXTRA_ONLINE_FLAG;\r\nimport static com.maths.beyond_school_280720220930.utils.Constants.EXTRA_QUESTION_FOR_TEST;\r\nimport static com.maths.beyond_school_280720220930.utils.Constants.EXTRA_TITLE;\r\n\r\nimport android.app.AlertDialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.graphics.Color;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.media.MediaPlayer;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.text.Html;\r\nimport android.text.Spannable;\r\nimport android.text.SpannableString;\r\nimport android.text.Spanned;\r\nimport android.text.style.ForegroundColorSpan;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.animation.Animation;\r\nimport android.view.animation.AnimationUtils;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport com.google.firebase.analytics.FirebaseAnalytics;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.maths.beyond_school_280720220930.LogActivity;\r\nimport com.maths.beyond_school_280720220930.R;\r\nimport com.maths.beyond_school_280720220930.SP.PrefConfig;\r\nimport com.maths.beyond_school_280720220930.database.english.EnglishGradeDatabase;\r\nimport com.maths.beyond_school_280720220930.database.english.grammer.model.GrammarModel;\r\nimport com.maths.beyond_school_280720220930.database.english.grammer.model.GrammarType;\r\nimport com.maths.beyond_school_280720220930.database.process.ProgressDataBase;\r\nimport com.maths.beyond_school_280720220930.database.process.ProgressM;\r\nimport com.maths.beyond_school_280720220930.databinding.ActivityGrammarBinding;\r\nimport com.maths.beyond_school_280720220930.databinding.AnimSingleLayoutBinding;\r\nimport com.maths.beyond_school_280720220930.dialogs.HintDialog;\r\nimport com.maths.beyond_school_280720220930.english_activity.grammar.test.GrammarTestActivity;\r\nimport com.maths.beyond_school_280720220930.english_activity.vocabulary.EnglishViewPager;\r\nimport com.maths.beyond_school_280720220930.model.AnimData;\r\nimport com.maths.beyond_school_280720220930.retrofit.ApiClient;\r\nimport com.maths.beyond_school_280720220930.retrofit.ApiInterface;\r\nimport com.maths.beyond_school_280720220930.retrofit.model.content.ContentModel;\r\nimport com.maths.beyond_school_280720220930.translation_engine.ConversionCallback;\r\nimport com.maths.beyond_school_280720220930.translation_engine.TextToSpeechBuilder;\r\nimport com.maths.beyond_school_280720220930.translation_engine.translator.TextToSpeckConverter;\r\nimport com.maths.beyond_school_280720220930.utils.AnimationUtil;\r\nimport com.maths.beyond_school_280720220930.utils.CollectionUtils;\r\nimport com.maths.beyond_school_280720220930.utils.Constants;\r\nimport com.maths.beyond_school_280720220930.utils.UtilityFunctions;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.Objects;\r\nimport java.util.concurrent.ExecutionException;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.stream.Collectors;\r\n\r\nimport io.reactivex.Observable;\r\nimport io.reactivex.android.schedulers.AndroidSchedulers;\r\nimport io.reactivex.functions.Consumer;\r\nimport retrofit2.Call;\r\nimport retrofit2.Response;\r\nimport retrofit2.Retrofit;\r\n\r\npublic class GrammarActivity extends AppCompatActivity {\r\n\r\n    private static final String TAG = \"GrammarActivity\";\r\n    private final Context context = GrammarActivity.this;\r\n    private ActivityGrammarBinding binding;\r\n    private static String category;\r\n    private EnglishGradeDatabase englishGradeDatabase;\r\n    private List<GrammarModel> grammarModelList;\r\n    private List<Fragment> fragmentList;\r\n\r\n    private TextToSpeckConverter tts = null;\r\n    private TextToSpeckConverter ttsHelper = null;\r\n    private MediaPlayer mediaPlayer = null;\r\n    private ButtonClick listener = null;\r\n\r\n    private final int REQUEST_INTRO = 44 * 2;\r\n    public static final int TIMER_VALUE = 15;\r\n    private AlertDialog.Builder alert = null;\r\n    private AlertDialog alertDialog = null;\r\n\r\n\r\n    private TextToSpeckConverter ttsHelperAnim;\r\n    private int num = 0;\r\n    private List<AnimData> animEng;\r\n\r\n    private LinearLayout addAnimLayout, finalView;\r\n    private TextView descTextView, finalText;\r\n    private Animation slideLeftAnim, slideRightAnim, fadeIn;\r\n\r\n    private long timeSpend = 0;\r\n    private List<ProgressM> progressData;\r\n    private ProgressDataBase progressDataBase;\r\n\r\n    private boolean isOnline = false;\r\n\r\n    private ContentModel.Meta meta = null;\r\n    private String kidsGrade;\r\n    private String kidsId;\r\n    private int kidAge;\r\n    private String kidName;\r\n    private String logs = \"\";\r\n    private long startTime = 0;\r\n    private FirebaseAnalytics analytics;\r\n    private FirebaseAuth auth;\r\n    private String parentsContactId;\r\n\r\n    private boolean isTimerRunning = false;\r\n\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = ActivityGrammarBinding.inflate(getLayoutInflater());\r\n        setContentView(binding.getRoot());\r\n        englishGradeDatabase = EnglishGradeDatabase.getDbInstance(context);\r\n        progressDataBase = ProgressDataBase.getDbInstance(this);\r\n        progressData = new ArrayList<>();\r\n\r\n\r\n        kidAge = UtilityFunctions.calculateAge(PrefConfig.readIdInPref(getApplicationContext(), getResources().getString(R.string.kids_dob)));\r\n        kidsId = PrefConfig.readIdInPref(getApplicationContext(), getResources().getString(R.string.kids_id));\r\n        kidName = PrefConfig.readIdInPref(getApplicationContext(), getResources().getString(R.string.kids_name));\r\n        parentsContactId = PrefConfig.readIdInPref(context, getResources().getString(R.string.parent_contact_details));\r\n        auth = FirebaseAuth.getInstance();\r\n        analytics = FirebaseAnalytics.getInstance(this);\r\n        initMediaPlayer();\r\n        setToolbar();\r\n        getDataFromIntent();\r\n    }\r\n\r\n    private void firstOpen() {\r\n        var isOpen = !PrefConfig.readBooleanInPref(context, category);\r\n        var isVisible = !category.equals(getResources().getString(R.string.grammar_2));\r\n        binding.hintButton.setVisibility(isVisible ? View.VISIBLE : View.GONE);\r\n        if (isOpen && isVisible) displayTutorialDialog();\r\n        else setIntro();\r\n    }\r\n\r\n    private void displayDialog() {\r\n        binding.hintButton.setOnClickListener(v -> {\r\n            displayTutorialDialog();\r\n        });\r\n    }\r\n\r\n    private void displayTutorialDialog() {\r\n        try {\r\n            destroyEngine();\r\n            displayTutorialAnimation();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void handleTestButtonClick() {\r\n        binding.giveTestButton.setOnClickListener(v -> {\r\n            navigateToTest();\r\n        });\r\n    }\r\n\r\n    private void initMediaPlayer() {\r\n        if (mediaPlayer == null) mediaPlayer = UtilityFunctions.playClapSound(this);\r\n        mediaPlayer = UtilityFunctions.playClapSound(this);\r\n    }\r\n\r\n    private void getDataFromIntent() {\r\n        if (!getIntent().hasExtra(EXTRA_GRAMMAR_CATEGORY)) {\r\n            UtilityFunctions.simpleToast(context, \"No data found\");\r\n        } else {\r\n            category = getIntent().getStringExtra(EXTRA_GRAMMAR_CATEGORY);\r\n            binding.textViewCategory.setText(category.replace(\"Grammar\", \"\"));\r\n            isOnline = getIntent().getBooleanExtra(EXTRA_ONLINE_FLAG, false);\r\n            if (isOnline) {\r\n                getSubjectData();\r\n            } else {\r\n                firstOpen();\r\n                setViewPager();\r\n                displayDialog();\r\n            }\r\n            handleTestButtonClick();\r\n        }\r\n    }\r\n\r\n    private void getSubjectData() {\r\n        Retrofit retrofit = ApiClient.getClient();\r\n        var api = retrofit.create(ApiInterface.class);\r\n        api.getVocabularySubject(PrefConfig.readIdInPref(context, getResources().getString(R.string.kids_grade)).toLowerCase().replace(\" \", \"\"), \"english\", getIntent().getStringExtra(EXTRA_TITLE).toLowerCase(), category).enqueue(new retrofit2.Callback<>() {\r\n            @Override\r\n            public void onResponse(Call<ContentModel> call, Response<ContentModel> response) {\r\n                Log.d(TAG, \"onResponse: \" + response.code());\r\n                if (response.body() != null) {\r\n                    Log.d(TAG, \"onResponse: \" + response.body().getContent().toString());\r\n                    setData(response.body().getContent());\r\n                    meta = response.body().getMeta();\r\n                    firstOpen();\r\n                    displayDialog();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(Call<ContentModel> call, Throwable t) {\r\n                Log.e(TAG, \"onFailure: \" + t.getLocalizedMessage());\r\n            }\r\n        });\r\n    }\r\n\r\n    private void setData(List<ContentModel.Content> content) {\r\n        var typeConverter = new GrammarTypeConverter();\r\n        grammarModelList = typeConverter.mapToList(content);\r\n        setViewPager();\r\n    }\r\n\r\n    private void setViewPager() {\r\n        if (!isOnline) if (getDataFromOfflineSource()) return;\r\n\r\n        fragmentList = mapToFragment(grammarModelList);\r\n        var pagerAdapter = new EnglishViewPager(fragmentList, getSupportFragmentManager(), getLifecycle());\r\n        binding.viewPagerIdentifyingNouns.setAdapter(pagerAdapter);\r\n        binding.viewPagerIdentifyingNouns.setUserInputEnabled(false);\r\n        setButton();\r\n        setOptionButtonClick();\r\n    }\r\n\r\n    private boolean getDataFromOfflineSource() {\r\n        var list = englishGradeDatabase.grammarDao().getAllGrammar();\r\n        grammarModelList = getFilterGrammar(list);\r\n        if (grammarModelList == null) {\r\n            UtilityFunctions.simpleToast(context, \"No data found\");\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private void setButton() {\r\n        binding.playPause.setOnClickListener(v -> {\r\n            if (binding.playPause.isChecked()) {\r\n                initTTS();\r\n                timer();\r\n\r\n                startSpeaking();\r\n            } else destroyEngine();\r\n        });\r\n    }\r\n\r\n\r\n    private void setIntro() {\r\n        initTTS();\r\n        timer();\r\n        playPauseAnimation(true);\r\n        setToggleButtonChecked(true);\r\n        helperTTS(!isOnline ? UtilityFunctions.getIntroForGrammar(context, category) : \"\", false, REQUEST_INTRO);\r\n    }\r\n\r\n    private void startSpeaking() {\r\n\r\n        startTime = new Date().getTime();\r\n        var currentModel = grammarModelList.get(binding.viewPagerIdentifyingNouns.getCurrentItem());\r\n        var question = !isOnline ? UtilityFunctions.getQuestionForGrammar(context, currentModel, category)[0] : meta.getQuestion();\r\n        var des = currentModel.getDescription().trim();\r\n        if (binding.viewPagerIdentifyingNouns.getCurrentItem() < 0 && !isOnline)\r\n            tts.setTextViewAndSentence(question);\r\n\r\n        if (isOnline) {\r\n            if (binding.viewPagerIdentifyingNouns.getCurrentItem() <= 0)\r\n                helperTTS(question, false, 44 * 4);\r\n            else helperTTS(\"\", false, 44 * 4);\r\n\r\n        } else {\r\n            if (binding.viewPagerIdentifyingNouns.getCurrentItem() <= 0)\r\n                tts.initialize(question, this);\r\n            else tts.initialize(\"\", this);\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    private void initTTS() {\r\n        var task = new TTSAsyncTask();\r\n        try {\r\n            tts = task.execute(new ConversionCallback() {\r\n                @Override\r\n                public void onCompletion() {\r\n                    Log.d(TAG, \"tts: called\");\r\n                    if (!tts.getTextRanceListener()) {\r\n                        UtilityFunctions.runOnUiThread(() -> {\r\n                            var currentModel = grammarModelList.get(binding.viewPagerIdentifyingNouns.getCurrentItem());\r\n                            var currentFragment = (RowItemFragment) fragmentList.get(binding.viewPagerIdentifyingNouns.getCurrentItem());\r\n                            if (category.equals(getResources().getString(R.string.grammar_3)))\r\n                                currentFragment.getTextView().setText(Html.fromHtml(\"<font color='#64c1c7'>\" + currentModel.getWord() + \"</font>\\n\", Html.FROM_HTML_MODE_COMPACT));\r\n                            else\r\n                                currentFragment.getTextView().setText(Html.fromHtml(currentModel.getDescription(), Html.FROM_HTML_MODE_COMPACT));\r\n\r\n                        });\r\n                        setOptionButton();\r\n                        setVisibilityOfLinearLayout(true);\r\n                        playPauseAnimation(false);\r\n                        checkAnswer();\r\n                        Log.d(TAG, \"onCompletion: Called \");\r\n                        return;\r\n                    }\r\n                    Log.d(TAG, \"else: called\");\r\n                    var currentModel = grammarModelList.get(binding.viewPagerIdentifyingNouns.getCurrentItem());\r\n                    var question = !isOnline ? UtilityFunctions.getQuestionForGrammar(context, currentModel, category)[1] :/* \"Select the correct answer\"*/ \" \";\r\n                    tts.setTextViewAndSentence(null);\r\n                    tts.initialize(question, GrammarActivity.this);\r\n                }\r\n\r\n                @Override\r\n                public void onErrorOccurred(String errorMessage) {\r\n                    Log.e(TAG, \"onErrorOccurred: \" + errorMessage);\r\n                }\r\n\r\n                @Override\r\n                public void getLogResult(String title) {\r\n                    ConversionCallback.super.getLogResult(title);\r\n                    Log.d(TAG, \"getLogResult: \" + title);\r\n                }\r\n            }).get();\r\n\r\n            tts.setTextRangeListener((utteranceId, sentence, start, end, frame) -> {\r\n                UtilityFunctions.runOnUiThread(() -> {\r\n                    var textView = (TextView) this.findViewById(R.id.text_view_des_grammar);\r\n                    if (textView != null) {\r\n                        var s = grammarModelList.get(binding.viewPagerIdentifyingNouns.getCurrentItem()).getDescription()\r\n                                .replace(\"<b>\", \"\").replace(\"</b>\", \"\")\r\n                                .replace(\"blank\", \"_____\").replace(\"<br>\", \"\\n\");\r\n                        Spannable textWithHighlights = new SpannableString(s);\r\n                        textWithHighlights.setSpan(new ForegroundColorSpan(ContextCompat.getColor(this, R.color.primary)), start, end, Spanned.SPAN_INCLUSIVE_INCLUSIVE);\r\n                        textView.setText(textWithHighlights);\r\n                    }\r\n                });\r\n            });\r\n\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void checkAnswer() {\r\n        var endTime = new Date().getTime();\r\n        var diff = endTime - startTime;\r\n        var currentModel = grammarModelList.get(binding.viewPagerIdentifyingNouns.getCurrentItem());\r\n        var currentAnswer = currentModel.getWord().toLowerCase(Locale.ROOT).trim().replace(\".\",\"\");\r\n        var currentDes = currentModel.getDescription().toLowerCase(Locale.ROOT).trim();\r\n        listener = text -> {\r\n            Log.d(\"XXX\", \"checkAnswer: \" + text + \" \" + currentAnswer);\r\n            if (category.equals(getResources().getString(R.string.grammar_3))) {\r\n\r\n                if (currentDes.contains(text)) {\r\n                    playPauseAnimation(true);\r\n                    mediaPlayer.start();\r\n                    sendDataToAnalytics(currentDes, text, diff, true);\r\n                    helperTTS(UtilityFunctions.getCompliment(true), true, 0);\r\n                } else {\r\n                    sendDataToAnalytics(currentDes, text, diff, false);\r\n                    playPauseAnimation(true);\r\n                    tts.initialize(UtilityFunctions.getCompliment(false), this);\r\n                }\r\n                return;\r\n            }\r\n            if (text.trim().replace(\".\",\"\").equals(currentAnswer)) {\r\n                playPauseAnimation(true);\r\n                try {\r\n                    if (mediaPlayer != null) mediaPlayer.start();\r\n                } catch (IllegalStateException e) {\r\n                    e.printStackTrace();\r\n                }\r\n                sendDataToAnalytics(currentDes, text, diff, true);\r\n                helperTTS(UtilityFunctions.getCompliment(true), true, 0);\r\n            } else {\r\n                sendDataToAnalytics(currentDes, text, diff, false);\r\n                playPauseAnimation(true);\r\n                tts.initialize(UtilityFunctions.getCompliment(false), this);\r\n            }\r\n        };\r\n    }\r\n\r\n    private void helperTTS(String message, boolean canNavigate, int request) {\r\n        try {\r\n            ttsHelper = new TTSHelperAsyncTask().execute(new ConversionCallback() {\r\n                @Override\r\n                public void onCompletion() {\r\n                    if (!canNavigate && request == 44 * 4) {\r\n                        var currentModel = grammarModelList.get(binding.viewPagerIdentifyingNouns.getCurrentItem());\r\n                        var des = currentModel.getDescription().trim().replace(\"<br>\", \"\").replace(\"<b>\", \"\").replace(\"</b>\", \"\").replace(\"_____\", \"blank\");\r\n                        tts.setTextViewAndSentence(des);\r\n                        tts.initialize(des, GrammarActivity.this);\r\n                        return;\r\n                    }\r\n                    if (!canNavigate && request == REQUEST_INTRO) {\r\n                        startSpeaking();\r\n                        return;\r\n                    }\r\n                    if (canNavigate) {\r\n                        mediaPlayer.pause();\r\n                        if (binding.viewPagerIdentifyingNouns.getCurrentItem() == grammarModelList.size() - 1) {\r\n                            UtilityFunctions.runOnUiThread(() -> {\r\n                                playPauseAnimation(false);\r\n                                binding.playPause.setChecked(false);\r\n                                displayCompleteDialog();\r\n                            });\r\n                            return;\r\n                        }\r\n                        UtilityFunctions.runOnUiThread(() -> {\r\n                            binding.viewPagerIdentifyingNouns.setCurrentItem(binding.viewPagerIdentifyingNouns.getCurrentItem() + 1);\r\n                        });\r\n                        setVisibilityOfLinearLayout(false);\r\n                        startSpeaking();\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onErrorOccurred(String errorMessage) {\r\n\r\n                }\r\n            }).get().initialize(message, this);\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    private void setToolbar() {\r\n        binding.toolBar.imageViewBack.setOnClickListener(v -> {\r\n            onBackPressed();\r\n        });\r\n        binding.toolBar.titleText.setText((getIntent().hasExtra(EXTRA_TITLE)) ? getIntent().getStringExtra(EXTRA_TITLE) : getResources().getString(R.string.grammar));\r\n        binding.textViewCategory.setText(getIntent().getStringExtra(EXTRA_GRAMMAR_CATEGORY).replace(\"Grammar\", \"\"));\r\n\r\n        binding.toolBar.getRoot().inflateMenu(R.menu.log_menu);\r\n        binding.toolBar.getRoot().setOnMenuItemClickListener(item -> {\r\n            if (item.getItemId() == R.id.action_log) {\r\n                startActivity(new Intent(getApplicationContext(), LogActivity.class));\r\n\r\n                return true;\r\n            }\r\n            return super.onOptionsItemSelected(item);\r\n\r\n        });\r\n    }\r\n\r\n    private void setOptionButton() {\r\n        UtilityFunctions.runOnUiThread(() -> {\r\n            var currentModel = grammarModelList.get(binding.viewPagerIdentifyingNouns.getCurrentItem());\r\n            var extra = currentModel.getExtra();\r\n            var split = extra.split(\",\");\r\n            for (String s : split) {\r\n                Log.d(\"XXX\", \"setOptionButton: \" + s);\r\n            }\r\n            if (split.length <= 1) {\r\n                UtilityFunctions.simpleToast(context, \"No data found\");\r\n                return;\r\n            }\r\n            if (split.length == 2) {\r\n                binding.key1.setText(split[0].trim());\r\n                binding.key2.setText(split[1].trim());\r\n                binding.key3.setVisibility(View.GONE);\r\n                binding.key4.setVisibility(View.GONE);\r\n                binding.linearLayout.setWeightSum(2);\r\n            }\r\n            if (split.length == 3) {\r\n                binding.key1.setText(split[0].trim());\r\n                binding.key2.setText(split[1].trim());\r\n                binding.key3.setText(split[2].trim());\r\n                binding.linearLayout.setWeightSum(3);\r\n                binding.key3.setVisibility(View.VISIBLE);\r\n                binding.key4.setVisibility(View.GONE);\r\n            }\r\n            if (split.length == 4) {\r\n                binding.key1.setText(split[0].trim());\r\n                binding.key2.setText(split[1].trim());\r\n                binding.key3.setText(split[2].trim());\r\n                binding.key4.setText(split[3].trim());\r\n                binding.linearLayout.setWeightSum(4);\r\n                binding.key3.setVisibility(View.VISIBLE);\r\n                binding.key4.setVisibility(View.VISIBLE);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void setOptionButtonClick() {\r\n        binding.key1.setOnClickListener(v -> {\r\n            if (listener != null)\r\n                listener.onClick(binding.key1.getText().toString().toLowerCase(Locale.ROOT).trim());\r\n        });\r\n        binding.key2.setOnClickListener(v -> {\r\n            if (listener != null)\r\n                listener.onClick(binding.key2.getText().toString().toLowerCase(Locale.ROOT).trim());\r\n        });\r\n        binding.key3.setOnClickListener(v -> {\r\n            if (listener != null)\r\n                listener.onClick(binding.key3.getText().toString().toLowerCase(Locale.ROOT).trim());\r\n        });\r\n        binding.key4.setOnClickListener(v -> {\r\n            if (listener != null)\r\n                listener.onClick(binding.key4.getText().toString().toLowerCase(Locale.ROOT).trim());\r\n        });\r\n    }\r\n\r\n\r\n    private void setToggleButtonChecked(boolean isChecked) {\r\n        UtilityFunctions.runOnUiThread(() -> binding.playPause.setChecked(isChecked));\r\n    }\r\n\r\n    private void playPauseAnimation(Boolean play) {\r\n        UtilityFunctions.runOnUiThread(() -> {\r\n            if (play) binding.imageViewTeacher.playAnimation();\r\n            else binding.imageViewTeacher.pauseAnimation();\r\n        });\r\n    }\r\n\r\n    private void setVisibilityOfLinearLayout(boolean isVisible) {\r\n        UtilityFunctions.runOnUiThread(() -> {\r\n            binding.linearLayout.setVisibility(isVisible ? View.VISIBLE : View.INVISIBLE);\r\n        });\r\n    }\r\n\r\n    @SuppressWarnings(\"deprecation\")\r\n    static class TTSAsyncTask extends AsyncTask<ConversionCallback, Void, TextToSpeckConverter> {\r\n        @Override\r\n        protected TextToSpeckConverter doInBackground(ConversionCallback... conversionCallbacks) {\r\n            return TextToSpeechBuilder.builder(conversionCallbacks[0]);\r\n        }\r\n    }\r\n\r\n    @SuppressWarnings(\"deprecation\")\r\n    static class TTSHelperAsyncTask extends AsyncTask<ConversionCallback, Void, TextToSpeckConverter> {\r\n        @Override\r\n        protected TextToSpeckConverter doInBackground(ConversionCallback... conversionCallbacks) {\r\n            return TextToSpeechBuilder.builder(conversionCallbacks[0]);\r\n        }\r\n\r\n    }\r\n\r\n    @SuppressWarnings(\"deprecation\")\r\n    static class TTSHelperAsyncTaskAnim extends AsyncTask<ConversionCallback, Void, TextToSpeckConverter> {\r\n        @Override\r\n        protected TextToSpeckConverter doInBackground(ConversionCallback... conversionCallbacks) {\r\n            return TextToSpeechBuilder.builder(conversionCallbacks[0]);\r\n        }\r\n    }\r\n\r\n\r\n    private List<Fragment> mapToFragment(List<GrammarModel> grammarModels) {\r\n        return CollectionUtils.mapWithIndex(grammarModels.stream(), (index, item) -> new RowItemFragment(item, index + 1, category, isOnline)).collect(Collectors.toList());\r\n    }\r\n\r\n    private List<GrammarModel> getFilterGrammar(List<GrammarType> list) {\r\n        for (var grammarType : list) {\r\n            if (grammarType.getType().equals(category)) {\r\n                return grammarModelList = grammarType.getGrammarModelList();\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        destroyEngine();\r\n        checkProgressData();\r\n        destroyMediaPlayer();\r\n        UtilityFunctions.checkProgressAvailable(progressDataBase, \"English\" + (isOnline ? getIntent().getStringExtra(EXTRA_TITLE) : \"Grammar\"), category, new Date(), timeSpend + Integer.parseInt(binding.layoutExtTimer.timeText.getText().toString()), false);\r\n    }\r\n\r\n    private void checkProgressData() {\r\n        progressData = UtilityFunctions.checkProgressAvailable(progressDataBase, \"English\" + (isOnline ? getIntent().getStringExtra(EXTRA_TITLE) : \"Grammar\"), category, new Date(), 0, true);\r\n\r\n        try {\r\n            if (progressData != null) {\r\n                timeSpend = progressData.get(0).time_spend;\r\n            }\r\n        } catch (Exception e) {\r\n            timeSpend = 0;\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n        destroyEngine();\r\n        destroyMediaPlayer();\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        super.onBackPressed();\r\n        destroyEngine();\r\n    }\r\n\r\n    public void restartEngine() {\r\n        destroyEngine();\r\n        initTTS();\r\n        startSpeaking();\r\n        setToggleButtonChecked(true);\r\n        playPauseAnimation(true);\r\n    }\r\n\r\n    public void destroyEngine() {\r\n        playPauseAnimation(false);\r\n        setToggleButtonChecked(false);\r\n        setVisibilityOfLinearLayout(false);\r\n        if (tts != null) {\r\n            tts.destroy();\r\n        }\r\n        if (ttsHelper != null) {\r\n            ttsHelper.destroy();\r\n        }\r\n        if (ttsHelperAnim != null) {\r\n            ttsHelperAnim.destroy();\r\n        }\r\n    }\r\n\r\n    private void destroyMediaPlayer() {\r\n        if (mediaPlayer != null) {\r\n            mediaPlayer.stop();\r\n            mediaPlayer.release();\r\n            mediaPlayer = null;\r\n        }\r\n    }\r\n\r\n    private void initTTSHelperAnim() throws ExecutionException, InterruptedException {\r\n        ttsHelperAnim = new TTSHelperAsyncTaskAnim().execute(new ConversionCallback[]{new ConversionCallback() {\r\n            @Override\r\n            public void onCompletion() {\r\n\r\n                Log.i(\"Index_Size\", num + \"\");\r\n                if (num < animEng.size()) {\r\n\r\n                    UtilityFunctions.runOnUiThread(() -> {\r\n                        ttsHelperAnim.initialize(animEng.get(num).getDescription().replace(\"<b>\", \"\").replace(\"</b>\", \"\"), GrammarActivity.this);\r\n                        animHandel(animEng.get(num).getAnswer(), animEng.get(num).getDescription(), animEng.get(num).getOperation());\r\n                        num++;\r\n                    }, 500);\r\n                } else {\r\n                    num = 0;\r\n                    PrefConfig.writeBooleanInPref(context, true, category);\r\n                    if (alertDialog != null && alertDialog.isShowing()) {\r\n                        alertDialog.dismiss();\r\n                    }\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onErrorOccurred(String errorMessage) {\r\n                ttsHelperAnim.destroy();\r\n            }\r\n        }}).get();\r\n    }\r\n\r\n\r\n    private void displayTutorialAnimation() throws ExecutionException, InterruptedException {\r\n\r\n        if (isOnline && meta.getHint() == null) {\r\n            binding.hintButton.setVisibility(View.GONE);\r\n            setIntro();\r\n            return;\r\n        }\r\n        animEng = !isOnline ? AnimationUtil.animGrammar(category, context) : AnimationUtil.animGrammar(meta);\r\n\r\n        alert = new AlertDialog.Builder(GrammarActivity.this);\r\n        View mView = getLayoutInflater().inflate(R.layout.tutorial_anim, null);\r\n\r\n        num = 0;\r\n        ImageView closeButton = mView.findViewById(R.id.closeButton);\r\n        addAnimLayout = mView.findViewById(R.id.insert_point);\r\n        finalText = mView.findViewById(R.id.finalAns);\r\n        finalView = mView.findViewById(R.id.finalView);\r\n        descTextView = mView.findViewById(R.id.descTextView);\r\n\r\n        initTTSHelperAnim();\r\n\r\n        alert.setView(mView);\r\n        alertDialog = alert.create();\r\n        alertDialog.setCancelable(true);\r\n        alertDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\r\n        var getTitle = (category.equals(getResources().getString(R.string.grammar_1))) ? \"Noun\" : category.replace(\"Grammar\", \"\");\r\n        String initText = \"Hi kids, Let us learn about \" + getTitle;\r\n\r\n        descTextView.setText(initText);\r\n        ttsHelperAnim.initialize(initText, GrammarActivity.this);\r\n        try {\r\n            alertDialog.show();\r\n        } catch (Exception ignored) {\r\n\r\n        }\r\n\r\n        closeButton.setOnClickListener(v -> {\r\n            alertDialog.dismiss();\r\n            ttsHelperAnim.stop();\r\n        });\r\n\r\n        alertDialog.setOnDismissListener(dialog -> {\r\n            setIntro();\r\n            ttsHelperAnim.stop();\r\n            ttsHelperAnim.destroy();\r\n        });\r\n\r\n    }\r\n\r\n    private void displayCompleteDialog() {\r\n\r\n        HintDialog hintDialog = new HintDialog(this);\r\n        hintDialog.setCancelable(false);\r\n        hintDialog.setAlertTitle(\"Woohoo!!\");\r\n        hintDialog.setAlertDesciption(\"Hey, you completed practice successfully !!\\nNow you can proceed to take test.\");\r\n\r\n        hintDialog.actionButton(\"START TEST\");\r\n        hintDialog.actionButtonBackgroundColor(R.color.primary);\r\n        hintDialog.setOnActionListener(viewId -> {\r\n\r\n            switch (viewId.getId()) {\r\n\r\n                case R.id.closeButton:\r\n                    hintDialog.dismiss();\r\n                    break;\r\n                case R.id.buttonAction:\r\n                    navigateToTest();\r\n                    break;\r\n            }\r\n        });\r\n\r\n\r\n        hintDialog.show();\r\n\r\n    }\r\n\r\n\r\n    private void animHandel(String answer, String description, String operation) {\r\n\r\n        slideLeftAnim = AnimationUtils.loadAnimation(getApplicationContext(), R.anim.slide_in_left);\r\n        slideRightAnim = AnimationUtils.loadAnimation(getApplicationContext(), R.anim.slide_in_right);\r\n        fadeIn = AnimationUtils.loadAnimation(getApplicationContext(), R.anim.fade_in);\r\n        LayoutInflater inflater = getLayoutInflater();\r\n        View view = inflater.inflate(R.layout.anim_single_layout, null);\r\n        AnimSingleLayoutBinding binding = AnimSingleLayoutBinding.bind(view);\r\n\r\n        binding.description.setText(Html.fromHtml(description, Html.FROM_HTML_MODE_COMPACT));\r\n        binding.slNumView.setText((num + 1) + \".\");\r\n\r\n        binding.mathLayout.setVisibility(View.GONE);\r\n        view.startAnimation(slideRightAnim);\r\n        ViewGroup main = (ViewGroup) addAnimLayout;\r\n        main.addView(view, num);\r\n\r\n    }\r\n\r\n    private void navigateToTest() {\r\n        Intent intent = new Intent(this, GrammarTestActivity.class);\r\n        intent.putExtra(EXTRA_GRAMMAR_CATEGORY, category);\r\n        if (isOnline) {\r\n            intent.putExtra(Constants.EXTRA_ONLINE_FLAG, true);\r\n            intent.putExtra(EXTRA_TITLE, getIntent().getStringExtra(EXTRA_TITLE));\r\n            intent.putExtra(EXTRA_QUESTION_FOR_TEST, meta.getQuestion());\r\n        }\r\n        startActivity(intent);\r\n    }\r\n\r\n\r\n    private void sendDataToAnalytics(String currentWord, String result, long diff, boolean b) {\r\n        UtilityFunctions.sendDataToAnalytics(analytics, Objects.requireNonNull(auth.getCurrentUser()).getUid(), kidsId, kidName, \"English-Practice-\" + (!isOnline ? \"grammar\" : getIntent().getStringExtra(EXTRA_TITLE).toLowerCase()), kidAge, currentWord, result, b, (int) (diff), UtilityFunctions.getQuestionForGrammarTest(context, category), \"English\", parentsContactId);\r\n    }\r\n\r\n    private void timer() {\r\n        if (isTimerRunning) {\r\n            return;\r\n        }\r\n\r\n        Observable.interval(60, TimeUnit.SECONDS).observeOn(AndroidSchedulers.mainThread()).doOnNext(new Consumer<Long>() {\r\n            public void accept(Long x) throws Exception {\r\n                // update your view here\r\n\r\n                binding.layoutExtTimer.timerProgress.setMax(15);\r\n                binding.layoutExtTimer.timerProgress.setProgress(Integer.parseInt((x + 1) + \"\"));\r\n                binding.layoutExtTimer.timeText.setText((x + 1) + \"\");\r\n                isTimerRunning = true;\r\n                Log.i(\"task\", x + \"\");\r\n            }\r\n        }).takeUntil(aLong -> aLong == TIMER_VALUE).doOnComplete(() ->\r\n                // do whatever you need on complete\r\n                Log.i(\"TSK\", \"task\")).subscribe();\r\n    }\r\n\r\n\r\n    interface ButtonClick {\r\n        void onClick(String text);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/maths/beyond_school_280720220930/english_activity/grammar/GrammarActivity.java b/app/src/main/java/com/maths/beyond_school_280720220930/english_activity/grammar/GrammarActivity.java
--- a/app/src/main/java/com/maths/beyond_school_280720220930/english_activity/grammar/GrammarActivity.java	(revision b40401d29ed89e0bcba3248488be6dbf0a5a82c6)
+++ b/app/src/main/java/com/maths/beyond_school_280720220930/english_activity/grammar/GrammarActivity.java	(date 1667542488790)
@@ -1,5 +1,6 @@
 package com.maths.beyond_school_280720220930.english_activity.grammar;
 
+import static com.maths.beyond_school_280720220930.utils.Constants.EXTRA_CATEGORY_ID;
 import static com.maths.beyond_school_280720220930.utils.Constants.EXTRA_GRAMMAR_CATEGORY;
 import static com.maths.beyond_school_280720220930.utils.Constants.EXTRA_ONLINE_FLAG;
 import static com.maths.beyond_school_280720220930.utils.Constants.EXTRA_QUESTION_FOR_TEST;
@@ -577,11 +578,11 @@
         destroyEngine();
         checkProgressData();
         destroyMediaPlayer();
-        UtilityFunctions.checkProgressAvailable(progressDataBase, "English" + (isOnline ? getIntent().getStringExtra(EXTRA_TITLE) : "Grammar"), category, new Date(), timeSpend + Integer.parseInt(binding.layoutExtTimer.timeText.getText().toString()), false);
+        UtilityFunctions.checkProgressAvailable(progressDataBase, (isOnline ? getIntent().getStringExtra(EXTRA_CATEGORY_ID) : "Grammar"), category, new Date(), timeSpend + Integer.parseInt(binding.layoutExtTimer.timeText.getText().toString()), false);
     }
 
     private void checkProgressData() {
-        progressData = UtilityFunctions.checkProgressAvailable(progressDataBase, "English" + (isOnline ? getIntent().getStringExtra(EXTRA_TITLE) : "Grammar"), category, new Date(), 0, true);
+        progressData = UtilityFunctions.checkProgressAvailable(progressDataBase, (isOnline ? getIntent().getStringExtra(EXTRA_CATEGORY_ID) : "Grammar"), category, new Date(), 0, true);
 
         try {
             if (progressData != null) {
@@ -770,6 +771,7 @@
         if (isOnline) {
             intent.putExtra(Constants.EXTRA_ONLINE_FLAG, true);
             intent.putExtra(EXTRA_TITLE, getIntent().getStringExtra(EXTRA_TITLE));
+            intent.putExtra(EXTRA_CATEGORY_ID, getIntent().getStringExtra(EXTRA_CATEGORY_ID));
             intent.putExtra(EXTRA_QUESTION_FOR_TEST, meta.getQuestion());
         }
         startActivity(intent);
Index: app/src/main/java/com/maths/beyond_school_280720220930/english_activity/spelling/EnglishSpellingActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.maths.beyond_school_280720220930.english_activity.spelling;\r\n\r\nimport static com.maths.beyond_school_280720220930.utils.Constants.EXTRA_ONLINE_FLAG;\r\nimport static com.maths.beyond_school_280720220930.utils.Constants.EXTRA_SPELLING_DETAIL;\r\nimport static com.maths.beyond_school_280720220930.utils.Constants.EXTRA_TITLE;\r\n\r\nimport android.content.Intent;\r\nimport android.media.MediaPlayer;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.text.Spannable;\r\nimport android.text.SpannableString;\r\nimport android.text.Spanned;\r\nimport android.text.style.ForegroundColorSpan;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.ColorRes;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.viewpager2.widget.ViewPager2;\r\n\r\nimport com.google.firebase.analytics.FirebaseAnalytics;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.maths.beyond_school_280720220930.LogActivity;\r\nimport com.maths.beyond_school_280720220930.R;\r\nimport com.maths.beyond_school_280720220930.SP.PrefConfig;\r\nimport com.maths.beyond_school_280720220930.database.english.EnglishGradeDatabase;\r\nimport com.maths.beyond_school_280720220930.database.english.spelling_common_words.SpellingCommonWordDao;\r\nimport com.maths.beyond_school_280720220930.database.english.spelling_common_words.model.SpellingCategoryModel;\r\nimport com.maths.beyond_school_280720220930.database.english.spelling_common_words.model.SpellingDetail;\r\nimport com.maths.beyond_school_280720220930.database.log.LogDatabase;\r\nimport com.maths.beyond_school_280720220930.database.process.ProgressDataBase;\r\nimport com.maths.beyond_school_280720220930.database.process.ProgressM;\r\nimport com.maths.beyond_school_280720220930.databinding.ActivitySpellingCommonWordBinding;\r\nimport com.maths.beyond_school_280720220930.dialogs.HintDialog;\r\nimport com.maths.beyond_school_280720220930.english_activity.spelling.spelling_test.SpellingTest;\r\nimport com.maths.beyond_school_280720220930.english_activity.vocabulary.EnglishViewPager;\r\nimport com.maths.beyond_school_280720220930.retrofit.ApiClient;\r\nimport com.maths.beyond_school_280720220930.retrofit.ApiInterface;\r\nimport com.maths.beyond_school_280720220930.retrofit.model.content.ContentModel;\r\nimport com.maths.beyond_school_280720220930.translation_engine.ConversionCallback;\r\nimport com.maths.beyond_school_280720220930.translation_engine.TextToSpeechBuilder;\r\nimport com.maths.beyond_school_280720220930.translation_engine.translator.TextToSpeckConverter;\r\nimport com.maths.beyond_school_280720220930.utils.CollectionUtils;\r\nimport com.maths.beyond_school_280720220930.utils.Constants;\r\nimport com.maths.beyond_school_280720220930.utils.UtilityFunctions;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.Objects;\r\nimport java.util.concurrent.ExecutionException;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.stream.Collectors;\r\n\r\nimport io.reactivex.Observable;\r\nimport io.reactivex.android.schedulers.AndroidSchedulers;\r\nimport retrofit2.Call;\r\nimport retrofit2.Response;\r\nimport retrofit2.Retrofit;\r\n\r\npublic class EnglishSpellingActivity extends AppCompatActivity {\r\n\r\n    private static final String TAG = EnglishSpellingActivity.class.getSimpleName();\r\n    private static final int MAX_TRY = 5 /* Giver u three chance */;\r\n    private static final int DELAY_TIME = 800;\r\n    private final int REQUEST_FOR_DES = 345 * 34;\r\n    private final int REQUEST_FOR_QUESTION = 345 * 35;\r\n    private static final int DELAY_BETWEEN_RESET_VIEW = 1000;              // delay between reset view when user input is wrong\r\n\r\n\r\n    private Boolean isSpeaking = false;\r\n    private Boolean isSayWordFinish = true;\r\n    private int currentTryCount = 0;\r\n\r\n    private ActivitySpellingCommonWordBinding binding;\r\n    private String category;\r\n    private TextToSpeckConverter tts = null;\r\n    private TextToSpeckConverter ttsHelper = null;\r\n    private MediaPlayer mediaPlayer = null;\r\n    private ButtonClick buttonClickListener;\r\n    private LogDatabase logDatabase;\r\n    private String logs = \"\";\r\n    private String inputWord = \"\";\r\n    private long startTime = 0, endTime = 0;\r\n    private StringBuilder currentWordBuilder = new StringBuilder();\r\n    private SpellingCommonWordDao dao;\r\n    private List<SpellingDetail> spellingDetails;\r\n    private List<Fragment> fragments;\r\n    private int currentWordLetterPosition = 0;\r\n    private long timeSpend = 0;\r\n    public static final int TIMER_VALUE = 15;\r\n    private List<ProgressM> progressData;\r\n    private ProgressDataBase progressDataBase;\r\n\r\n    private boolean isOnline = false;\r\n\r\n    private String kidsGrade;\r\n    private String kidsId;\r\n    private int kidAge;\r\n    private String kidName;\r\n    private FirebaseAnalytics analytics;\r\n    private FirebaseAuth auth;\r\n    private String parentsContactId;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = ActivitySpellingCommonWordBinding.inflate(getLayoutInflater());\r\n        setContentView(binding.getRoot());\r\n        logDatabase = LogDatabase.getDbInstance(this);\r\n        progressDataBase = ProgressDataBase.getDbInstance(this);\r\n        progressData = new ArrayList<>();\r\n\r\n        kidAge = UtilityFunctions.calculateAge(PrefConfig.readIdInPref(getApplicationContext(), getResources().getString(R.string.kids_dob)));\r\n        kidsId = PrefConfig.readIdInPref(getApplicationContext(), getResources().getString(R.string.kids_id));\r\n        kidName = PrefConfig.readIdInPref(getApplicationContext(), getResources().getString(R.string.kids_name));\r\n        parentsContactId = PrefConfig.readIdInPref(getApplicationContext(), getResources().getString(R.string.parent_contact_details));\r\n        auth = FirebaseAuth.getInstance();\r\n        analytics = FirebaseAnalytics.getInstance(this);\r\n        setToolbar();\r\n        setData();\r\n    }\r\n\r\n\r\n    private void setData() {\r\n        if (getIntent().hasExtra(EXTRA_SPELLING_DETAIL)) {\r\n            category = getIntent().getStringExtra(EXTRA_SPELLING_DETAIL);\r\n            isOnline = getIntent().getBooleanExtra(EXTRA_ONLINE_FLAG, false);\r\n            dao = EnglishGradeDatabase.getDbInstance(this).spellingCommonWordDao();\r\n            if (isOnline) {\r\n                getSubjectData();\r\n            } else {\r\n                setViews();\r\n            }\r\n        } else {\r\n            UtilityFunctions.simpleToast(this, \"No data found\");\r\n        }\r\n        buttonClick();\r\n        binding.giveTestButton.setOnClickListener((view) -> {\r\n            navigateToTest();\r\n        });\r\n    }\r\n\r\n    private void getSubjectData() {\r\n        Retrofit retrofit = ApiClient.getClient();\r\n        var api = retrofit.create(ApiInterface.class);\r\n        api.getVocabularySubject(PrefConfig.readIdInPref(this, getResources().getString(R.string.kids_grade)).toLowerCase().replace(\" \", \"\"),\r\n                \"english\", getIntent().getStringExtra(EXTRA_TITLE).toLowerCase(), category).enqueue(new retrofit2.Callback<>() {\r\n            @Override\r\n            public void onResponse(Call<ContentModel> call, Response<ContentModel> response) {\r\n                Log.d(TAG, \"onResponse: \" + response.code());\r\n                if (response.body() != null) {\r\n                    Log.d(TAG, \"onResponse: \" + response.body().getContent().toString());\r\n                    mapData(response.body().getContent());\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(Call<ContentModel> call, Throwable t) {\r\n                Log.e(TAG, \"onFailure: \" + t.getLocalizedMessage());\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mapData(List<ContentModel.Content> content) {\r\n        var typeConverter = new SpellingTypeConverter();\r\n        spellingDetails = typeConverter.mapToList(content);\r\n        setViews();\r\n    }\r\n\r\n\r\n    private void sendDataToAnalytics(String currentWord, String result, long diff, boolean b) {\r\n        UtilityFunctions.sendDataToAnalytics(analytics, Objects.requireNonNull(auth.getCurrentUser()).getUid(), kidsId, kidName, \"English-Practice-\" +(!isOnline?\"grammar\":getIntent().getStringExtra(EXTRA_TITLE).toLowerCase()), kidAge, currentWord, result, b, (int) (diff), UtilityFunctions.getQuestionForGrammarTest(this, category), \"English\", parentsContactId);\r\n    }\r\n\r\n    private void navigateToTest() {\r\n        var intent = new Intent(this, SpellingTest.class);\r\n        intent.putExtra(EXTRA_SPELLING_DETAIL, category);\r\n        intent.putExtra(Constants.EXTRA_ONLINE_FLAG, true);\r\n        intent.putExtra(EXTRA_TITLE, getIntent().getStringExtra(EXTRA_TITLE));\r\n        startActivity(intent);\r\n    }\r\n\r\n    private void buttonClick() {\r\n        binding.playPause.setOnClickListener(view -> {\r\n            isSpeaking = binding.playPause.isChecked();\r\n            startEngine();\r\n            timer();\r\n        });\r\n\r\n    }\r\n\r\n    private void playPauseAnimation(Boolean play) {\r\n        UtilityFunctions.runOnUiThread(() -> {\r\n            if (play)\r\n                binding.imageViewTeacher.playAnimation();\r\n            else\r\n                binding.imageViewTeacher.pauseAnimation();\r\n        });\r\n    }\r\n\r\n    private void startEngine() {\r\n        if (binding.playPause.isChecked()) {\r\n            try {\r\n                initTTS();\r\n                initMediaPlayer();\r\n                startSpeaking();\r\n\r\n            } catch (ExecutionException | InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n        } else {\r\n            destroyedEngines();\r\n            isSayWordFinish = true;\r\n        }\r\n    }\r\n\r\n    private void setViews() {\r\n        binding.subSub.setText(category.replace(\"Spelling_CommonWords\", \"\"));\r\n        setPager();\r\n    }\r\n\r\n    private void setPager() {\r\n\r\n        if (!isOnline) {\r\n            var data = getSpellingFromType(dao.getSpellingModel(1).getSpelling(),\r\n                    category);\r\n\r\n            if (data == null) {\r\n                UtilityFunctions.simpleToast(this, \"No data found List is empty\");\r\n                return;\r\n            }\r\n            spellingDetails = data.getDetails();\r\n        }\r\n        List<Fragment> fragments = getFragments(spellingDetails);\r\n\r\n        var pagerAdapter = new EnglishViewPager(\r\n                fragments,\r\n                getSupportFragmentManager(),\r\n                getLifecycle()\r\n        );\r\n\r\n        binding.viewPager.setAdapter(pagerAdapter);\r\n        binding.viewPager.setPageTransformer((page, position) -> {\r\n            updatePagerHeightForChild(page, binding.viewPager);\r\n        });\r\n        binding.viewPager.setUserInputEnabled(false);\r\n        handleDeleteWord();\r\n        try {\r\n            binding.playPause.setChecked(true);\r\n            isSpeaking = binding.playPause.isChecked();\r\n            initTTS();\r\n            initMediaPlayer();\r\n            playPauseAnimation(true);\r\n            helperTTS(\"Hi kids !! Let us, learn spelling of some\"\r\n                            + category.replace(\"Spelling_CommonWords\", \"\")\r\n                    ,\r\n                    false\r\n                    , REQUEST_FOR_QUESTION);\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    private String getQuestion() {\r\n        return \"The \" + UtilityFunctions.\r\n                convertCardinalNumberToOrdinalNumber(binding.viewPager.getCurrentItem() + 1)\r\n                + \" word is \" +\r\n                (spellingDetails.get(binding.viewPager.getCurrentItem()).getWord().equals(\"The\")\r\n                        ? \"'di'\" :\r\n                        \"'\" + spellingDetails.get(binding.viewPager.getCurrentItem()).getWord() + \"'\"\r\n                ) + \".\\n\\n\"\r\n                + \"We spell it as \"\r\n                ;\r\n    }\r\n\r\n    private String getDescription() {\r\n        return spellingDetails.get(binding.viewPager.getCurrentItem()).getDescription();\r\n    }\r\n\r\n    private String getSpellLetter() {\r\n        return \"Now, it's your turn to type the spelling of the word '\" +\r\n                (spellingDetails.get(binding.viewPager.getCurrentItem()).getWord().equals(\"The\")\r\n                        ? \"'di'\" :\r\n                        \"'\" + spellingDetails.get(binding.viewPager.getCurrentItem()).getWord()) + \"' .\";\r\n    }\r\n\r\n    private List<Fragment> getFragments(List<SpellingDetail> data) {\r\n        fragments = CollectionUtils.\r\n                mapWithIndex(\r\n                        spellingDetails.stream(), (index, item) ->\r\n                                new SpellingFragment(item, index + 1)).collect(Collectors.toList()\r\n                );\r\n        return fragments;\r\n    }\r\n\r\n    public static SpellingCategoryModel getSpellingFromType(List<SpellingCategoryModel> models, String type) {\r\n        var filterList = models.stream().filter(model -> model.getCategory().equals(type)).collect(Collectors.toList());\r\n        if (filterList.size() > 0) {\r\n            return filterList.get(0);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private void updatePagerHeightForChild(View view, ViewPager2 pager) {\r\n        view.post(() -> {\r\n            {\r\n                var wMeasureSpec = View.MeasureSpec.makeMeasureSpec(view.getWidth(), View.MeasureSpec.EXACTLY);\r\n                var hMeasureSpec = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);\r\n                view.measure(wMeasureSpec, hMeasureSpec);\r\n                var lp = pager.getLayoutParams();\r\n                lp.height = view.getMeasuredHeight();\r\n                pager.setLayoutParams(lp);\r\n                pager.invalidate();\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    private void initMediaPlayer() {\r\n        mediaPlayer = UtilityFunctions.playClapSound(this);\r\n    }\r\n\r\n    private void initTTS() throws ExecutionException, InterruptedException {\r\n        var task = new TTSAsyncTask();\r\n        tts = task.execute(new ConversionCallback() {\r\n            @Override\r\n            public void onCompletion() {\r\n                UtilityFunctions.runOnUiThread(() -> {\r\n                    if (!tts.getTextRanceListener()) {\r\n                        setButtonText();\r\n                        setLayoutVisible(true);\r\n                        setInputForCurrentWord();\r\n                        return;\r\n                    }\r\n                    removeHighlight();\r\n                    tts.setTextViewAndSentence(null);\r\n                    tts.initialize(getSpellLetter(),\r\n                            EnglishSpellingActivity.this);\r\n\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void onErrorOccurred(String errorMessage) {\r\n                Log.e(TAG, \"onErrorOccurred: \" + errorMessage);\r\n            }\r\n        }).get();\r\n        tts.setTextRangeListener((utteranceId, sentence, start, end, frame) -> {\r\n            UtilityFunctions.runOnUiThread(() -> {\r\n                var textView = (TextView) this.findViewById(R.id.text_view_des);\r\n                if (textView != null) {\r\n                    Spannable textWithHighlights = new SpannableString(sentence);\r\n                    textWithHighlights.setSpan(new ForegroundColorSpan(\r\n                                    ContextCompat.\r\n                                            getColor(\r\n                                                    this,\r\n                                                    R.color.primary\r\n                                            )),\r\n                            start,\r\n                            end,\r\n                            Spanned.SPAN_INCLUSIVE_INCLUSIVE);\r\n                    textView.setText(textWithHighlights);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private void setInputForCurrentWord() {\r\n        startTime = new Date().getTime();\r\n        playPauseAnimation(false);\r\n        var currentPosition = binding.viewPager.getCurrentItem();                                               // get current position of view pager\r\n        var currentWord = spellingDetails.get(currentPosition).getWord();                                     // get current word\r\n        var currentFragment = (SpellingFragment) fragments.get(currentPosition);                                   // get current fragment\r\n        var textView = currentFragment.getTextView();\r\n        buttonClickListener = s -> {\r\n            inputWord += s;\r\n            var textViewText = textView.getText().toString();                                              // get text from text view\r\n            textView.setText(textViewText.replaceFirst(\"_\", s));\r\n            currentWordLetterPosition++;\r\n            if (currentWordLetterPosition < currentWord.length())\r\n                setButtonText();\r\n            else\r\n                checkAnswer();\r\n            Log.d(TAG, \"setInputForCurrentWord: \" + s + \" Current Word Position\" + currentWordLetterPosition + \" Input Word \" + inputWord);\r\n        };\r\n        handleButtonClick();\r\n    }\r\n\r\n    private void checkAnswer() {\r\n        endTime = new Date().getTime();\r\n        var currentPosition = binding.viewPager.getCurrentItem();                                               // get current position of view pager\r\n        var currentWord = spellingDetails.get(currentPosition).getWord();                                     // get current word\r\n        var currentFragment = (SpellingFragment) fragments.get(currentPosition);                                   // get current fragment\r\n        var textView = currentFragment.getTextView();                                                     // get text view of current fragment\r\n        currentWordLetterPosition = 0;\r\n        playPauseAnimation(false);\r\n        var diff = endTime - startTime;\r\n        var currentDes=spellingDetails.get(currentPosition).getDescription();\r\n\r\n        if (inputWord.toLowerCase(Locale.ROOT).equals(currentWord.toLowerCase(Locale.ROOT))) {\r\n            logs += \"Time Take :\" + UtilityFunctions.formatTime(diff) + \", Correct .\\n\";\r\n            textView.setTextColor(ContextCompat.getColor(this, R.color.green));\r\n            playPauseAnimation(true);\r\n            helperTTS(UtilityFunctions.getCompliment(true), true, 0);\r\n            mediaPlayer.start();\r\n            inputWord = \"\";\r\n            textView.setText(currentWord);\r\n            sendDataToAnalytics(currentDes, currentWord, diff, true);\r\n        } else {\r\n            textView.setTextColor(ContextCompat.getColor(this, R.color.sweet_red));\r\n            logs += \"Time Take :\" + UtilityFunctions.formatTime(diff) + \", Wrong .\\n\";\r\n            sendDataToAnalytics(currentDes, currentWord, diff, false);\r\n            UtilityFunctions.runOnUiThread(() -> {\r\n                playPauseAnimation(true);\r\n                helperTTS(UtilityFunctions.getCompliment(false), false, 0);\r\n                resetTextViews(currentWord, currentFragment);\r\n                setTextColor(R.color.text_color);\r\n                setButtonText();\r\n                inputWord = \"\";\r\n            }, DELAY_BETWEEN_RESET_VIEW);\r\n        }\r\n    }\r\n\r\n    private void resetTextViews(String currentWord, SpellingFragment currentFragment) {\r\n        var textView = currentFragment.getTextView();                                                     // get text view of current fragment\r\n        textView.setText(currentWord\r\n                .replaceAll(\"[a-zA-Z]\", \"_\"));\r\n    }\r\n\r\n    private void setTextColor(@ColorRes int res) {\r\n        var currentPosition = binding.viewPager.getCurrentItem();                                              // get current position of view pager\r\n        var currentFragment = (SpellingFragment) fragments.get(currentPosition);                                   // get current fragment\r\n        var textView = currentFragment.getTextView();                                                     // get text view of current fragment\r\n        textView.setTextColor(ContextCompat.getColor(this, res));\r\n    }\r\n\r\n    private void removeHighlight() {\r\n        UtilityFunctions.runOnUiThread(() -> {\r\n            var textView = (TextView) findViewById(R.id.text_view_des);\r\n            Spannable textWithHighlights = new SpannableString(textView.getText().toString());\r\n            textWithHighlights.setSpan(new ForegroundColorSpan(\r\n                            ContextCompat.\r\n                                    getColor(\r\n                                            EnglishSpellingActivity.this,\r\n                                            android.R.color.primary_text_light\r\n                                    )),\r\n                    0,\r\n                    textView.getText().toString().length(),\r\n                    Spanned.SPAN_INCLUSIVE_INCLUSIVE);\r\n            textView.setText(textWithHighlights);\r\n        });\r\n    }\r\n\r\n    private void startSpeaking() throws ExecutionException, InterruptedException {\r\n        setLayoutVisible(false);\r\n        isSpeaking = true;\r\n        UtilityFunctions.runOnUiThread(() -> playPauseAnimation(true));\r\n        helperTTS(getQuestion(), false, 3 * 45);\r\n//        Question\r\n        logs += \"Question : \" + spellingDetails.get(binding.viewPager.getCurrentItem()).getWord() + \" : \" + spellingDetails.get(binding.viewPager.getCurrentItem()).getDescription() + \". \\n\";\r\n\r\n//        Stop when reach ot last item\r\n\r\n\r\n    }\r\n\r\n    private void setLayoutVisible(Boolean visible) {\r\n        UtilityFunctions.runOnUiThread(() -> {\r\n            binding.linearLayout.setVisibility(visible ? View.VISIBLE : View.INVISIBLE);\r\n        });\r\n    }\r\n\r\n    private void helperTTS(String message, boolean canNavigate, int request) {\r\n        try {\r\n            ttsHelper = new TTSHelperAsyncTask().execute(new ConversionCallback() {\r\n                        @Override\r\n                        public void onCompletion() {\r\n                            if (request == REQUEST_FOR_QUESTION && !canNavigate) {\r\n                                try {\r\n                                    startSpeaking();\r\n                                } catch (ExecutionException | InterruptedException e) {\r\n                                    e.printStackTrace();\r\n                                }\r\n                                return;\r\n                            }\r\n                            if (request == 3 * 45) {\r\n                                var currentWord = spellingDetails.get(binding.viewPager.getCurrentItem()).getWord();\r\n                                helperTTS(UtilityFunctions.addComma(currentWord), false, 3 * 45 + 1);\r\n                                return;\r\n                            }\r\n                            if (request == 3 * 45 + 1) {\r\n                                helperTTS(\"For example, \", false, REQUEST_FOR_DES);\r\n                                return;\r\n                            }\r\n                            if (request == REQUEST_FOR_DES && !canNavigate) {\r\n                                tts.setTextViewAndSentence(spellingDetails.get(binding.viewPager.getCurrentItem()).getDescription());\r\n                                tts.initialize(getDescription(), EnglishSpellingActivity.this);\r\n                                return;\r\n                            }\r\n                            if (canNavigate) {                                                                  // navigate to next word\r\n                                if (binding.viewPager.getCurrentItem() == spellingDetails.size() - 1) {\r\n                                    UtilityFunctions.runOnUiThread(() -> {\r\n                                        playPauseAnimation(false);\r\n                                        binding.playPause.setChecked(false);\r\n                                        displayCompleteDialog();\r\n                                    });\r\n                                    return;\r\n                                }\r\n                                binding.viewPager.setCurrentItem(binding.viewPager.getCurrentItem() + 1);\r\n                                UtilityFunctions.runOnUiThread(() -> {\r\n                                    mediaPlayer.pause();\r\n                                    setButtonText();\r\n                                });                                                                         // Set button for net word\r\n                                try {\r\n                                    startSpeaking();\r\n                                } catch (ExecutionException | InterruptedException e) {\r\n                                    e.printStackTrace();\r\n                                }\r\n\r\n                                return;\r\n                            }\r\n                        }\r\n\r\n                        @Override\r\n                        public void onErrorOccurred(String errorMessage) {\r\n\r\n                        }\r\n                    }).\r\n                    get().\r\n                    initialize(message, this);\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    static class TTSAsyncTask extends AsyncTask<ConversionCallback, Void, TextToSpeckConverter> {\r\n        @Override\r\n        protected TextToSpeckConverter doInBackground(ConversionCallback... conversionCallbacks) {\r\n            return TextToSpeechBuilder.builder(conversionCallbacks[0]);\r\n        }\r\n    }\r\n\r\n    static class TTSHelperAsyncTask extends AsyncTask<ConversionCallback, Void, TextToSpeckConverter> {\r\n        @Override\r\n        protected TextToSpeckConverter doInBackground(ConversionCallback... conversionCallbacks) {\r\n            return TextToSpeechBuilder.builder(conversionCallbacks[0]);\r\n        }\r\n    }\r\n\r\n    private void handleDeleteWord() {\r\n        binding.key5.setOnClickListener(v -> {\r\n            if (inputWord.length() > 0) {\r\n                var currentFragment = (SpellingFragment) fragments.get(binding.viewPager.getCurrentItem());\r\n                var textView = currentFragment.getTextView();\r\n                var text = textView.getText().toString();\r\n                var newText = UtilityFunctions.replace(text, currentWordLetterPosition - 1, '_');\r\n                textView.setText(newText);\r\n                currentWordLetterPosition--;\r\n                setButtonText();\r\n                inputWord = inputWord.substring(0, inputWord.length() - 1);\r\n                Log.d(TAG, \"handleDeleteWord: \" + inputWord + \" Current word letter position: \" + currentWordLetterPosition);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void handleButtonClick() {\r\n        var currentPosition = binding.viewPager.getCurrentItem();                                        // get current position of view pager\r\n        var currentWord = spellingDetails.get(currentPosition).getWord();\r\n        binding.key1.setOnClickListener(v -> {\r\n                    if (currentWordLetterPosition < currentWord.length())\r\n                        buttonClickListener.onClick(binding.key1.getText().toString());\r\n                }\r\n        );\r\n        binding.key2.setOnClickListener(v -> {\r\n            if (currentWordLetterPosition < currentWord.length())\r\n                buttonClickListener.onClick(binding.key2.getText().toString());\r\n        });\r\n        binding.key3.setOnClickListener(v -> {\r\n            if (currentWordLetterPosition < currentWord.length())\r\n                buttonClickListener.onClick(binding.key3.getText().toString());\r\n        });\r\n        binding.key4.setOnClickListener(v -> {\r\n            if (currentWordLetterPosition < currentWord.length())\r\n                buttonClickListener.onClick(binding.key4.getText().toString());\r\n        });\r\n    }\r\n\r\n    private void destroyedEngines() {\r\n        binding.playPause.setChecked(false);\r\n        playPauseAnimation(false);\r\n        setLayoutVisible(false);\r\n        if (tts != null)\r\n            tts.destroy();\r\n        if (ttsHelper != null)\r\n            ttsHelper.destroy();\r\n        if (mediaPlayer != null)\r\n            mediaPlayer.release();\r\n        try {\r\n            var current = (SpellingFragment) fragments.get(binding.viewPager.getCurrentItem());\r\n            current.getAnimationView().setVisibility(View.GONE);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        checkLogIsEnable();\r\n        destroyedEngines();\r\n        checkProgressData();\r\n        UtilityFunctions.checkProgressAvailable(progressDataBase, \"English\" + \"Spelling\", category, new Date(),\r\n                timeSpend + Integer.parseInt(binding.progress.timeText.getText().toString()), false);\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        super.onBackPressed();\r\n        destroyedEngines();\r\n    }\r\n\r\n    private void checkLogIsEnable() {\r\n        if (PrefConfig.readIdInPref(getApplicationContext(), \"IS_LOG_ENABLE\").equals(\"true\"))\r\n            saveLog();\r\n    }\r\n\r\n    private void saveLog() {\r\n        Log.d(TAG, \"saveLog: Called \" + logs);\r\n        UtilityFunctions.saveLog(logDatabase, logs);\r\n    }\r\n\r\n\r\n    private void setToolbar() {\r\n        binding.toolBar.titleText.setText(getResources().getString(R.string.spelling_common_words).replace(\"Spelling_\", \"\"));\r\n        binding.toolBar.imageViewBack.setOnClickListener(v -> onBackPressed());\r\n        binding.toolBar.getRoot().inflateMenu(R.menu.log_menu);\r\n        binding.toolBar.getRoot().setOnMenuItemClickListener(item -> {\r\n\r\n            if (item.getItemId() == R.id.action_log) {\r\n                startActivity(new Intent(getApplicationContext(), LogActivity.class));\r\n\r\n                return true;\r\n            }\r\n            return super.onOptionsItemSelected(item);\r\n\r\n        });\r\n\r\n    }\r\n\r\n\r\n    public void setButtonText() {\r\n        var currentPosition = binding.viewPager.getCurrentItem();\r\n        var currentWord = spellingDetails.get(currentPosition).getWord();\r\n        var currentLetter = currentWord.charAt(currentWordLetterPosition);\r\n\r\n        var array = new ArrayList<Character>();\r\n        array.add(currentLetter);\r\n        array.add(UtilityFunctions.getRandomAlphabet(currentLetter));\r\n        array.add(UtilityFunctions.getRandomAlphabet(currentLetter));\r\n        array.add(UtilityFunctions.getRandomAlphabet(currentLetter));\r\n        var shuffleArray = UtilityFunctions.shuffleArray(array);\r\n        binding.key1.setText(shuffleArray.get(0).toString());\r\n        binding.key2.setText(shuffleArray.get(1).toString());\r\n        binding.key3.setText(shuffleArray.get(2).toString());\r\n        binding.key4.setText(shuffleArray.get(3).toString());\r\n    }\r\n\r\n    private void displayCompleteDialog() {\r\n\r\n        HintDialog hintDialog = new HintDialog(EnglishSpellingActivity.this);\r\n        hintDialog.setCancelable(false);\r\n        hintDialog.setAlertTitle(\"Woohoo!!\");\r\n        hintDialog.setAlertDesciption(\"Hey, you completed practice successfully !!\\nNow you can proceed to take test.\");\r\n\r\n        hintDialog.actionButton(\"START TEST\");\r\n        hintDialog.actionButtonBackgroundColor(R.color.primary);\r\n        hintDialog.setOnActionListener(viewId -> {\r\n\r\n            switch (viewId.getId()) {\r\n\r\n                case R.id.closeButton:\r\n                    hintDialog.dismiss();\r\n                    break;\r\n                case R.id.buttonAction:\r\n                    navigateToTest();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        hintDialog.show();\r\n\r\n    }\r\n\r\n    public void restartEngine() {\r\n        destroyedEngines();\r\n        try {\r\n            initTTS();\r\n            initMediaPlayer();\r\n            startSpeaking();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n        binding.playPause.setChecked(true);\r\n    }\r\n\r\n    private void timer() {\r\n        boolean isTimerRunning = false;\r\n        Observable.interval(60, TimeUnit.SECONDS)\r\n                .observeOn(AndroidSchedulers.mainThread())\r\n                .doOnNext(x -> {\r\n                    // update your view here\r\n\r\n                    binding.progress.timerProgress.setMax(15);\r\n                    binding.progress.timerProgress.setProgress(Integer.parseInt((x + 1) + \"\"));\r\n                    binding.progress.timeText.setText((x + 1) + \"\");\r\n                    Log.i(\"task\", x + \"\");\r\n                })\r\n                .takeUntil(aLong -> aLong == TIMER_VALUE)\r\n                .doOnComplete(() ->\r\n                        // do whatever you need on complete\r\n                        Log.i(\"TSK\", \"task\")\r\n                ).subscribe();\r\n    }\r\n\r\n    private void checkProgressData() {\r\n        progressData = UtilityFunctions.checkProgressAvailable(progressDataBase, \"English\" + \"Spelling\", category, new Date(), 0, true);\r\n        try {\r\n            if (progressData != null) {\r\n                timeSpend = progressData.get(0).time_spend;\r\n            }\r\n        } catch (Exception e) {\r\n            timeSpend = 0;\r\n        }\r\n\r\n    }\r\n\r\n    interface ButtonClick {\r\n        void onClick(String s);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/maths/beyond_school_280720220930/english_activity/spelling/EnglishSpellingActivity.java b/app/src/main/java/com/maths/beyond_school_280720220930/english_activity/spelling/EnglishSpellingActivity.java
--- a/app/src/main/java/com/maths/beyond_school_280720220930/english_activity/spelling/EnglishSpellingActivity.java	(revision b40401d29ed89e0bcba3248488be6dbf0a5a82c6)
+++ b/app/src/main/java/com/maths/beyond_school_280720220930/english_activity/spelling/EnglishSpellingActivity.java	(date 1667542488807)
@@ -1,5 +1,6 @@
 package com.maths.beyond_school_280720220930.english_activity.spelling;
 
+import static com.maths.beyond_school_280720220930.utils.Constants.EXTRA_CATEGORY_ID;
 import static com.maths.beyond_school_280720220930.utils.Constants.EXTRA_ONLINE_FLAG;
 import static com.maths.beyond_school_280720220930.utils.Constants.EXTRA_SPELLING_DETAIL;
 import static com.maths.beyond_school_280720220930.utils.Constants.EXTRA_TITLE;
@@ -182,6 +183,7 @@
         var intent = new Intent(this, SpellingTest.class);
         intent.putExtra(EXTRA_SPELLING_DETAIL, category);
         intent.putExtra(Constants.EXTRA_ONLINE_FLAG, true);
+        intent.putExtra(EXTRA_CATEGORY_ID, getIntent().getStringExtra(EXTRA_CATEGORY_ID));
         intent.putExtra(EXTRA_TITLE, getIntent().getStringExtra(EXTRA_TITLE));
         startActivity(intent);
     }
@@ -617,7 +619,7 @@
         checkLogIsEnable();
         destroyedEngines();
         checkProgressData();
-        UtilityFunctions.checkProgressAvailable(progressDataBase, "English" + "Spelling", category, new Date(),
+        UtilityFunctions.checkProgressAvailable(progressDataBase, getIntent().getStringExtra(EXTRA_CATEGORY_ID), category, new Date(),
                 timeSpend + Integer.parseInt(binding.progress.timeText.getText().toString()), false);
     }
 
@@ -731,7 +733,7 @@
     }
 
     private void checkProgressData() {
-        progressData = UtilityFunctions.checkProgressAvailable(progressDataBase, "English" + "Spelling", category, new Date(), 0, true);
+        progressData = UtilityFunctions.checkProgressAvailable(progressDataBase, getIntent().getStringExtra(EXTRA_CATEGORY_ID), category, new Date(), 0, true);
         try {
             if (progressData != null) {
                 timeSpend = progressData.get(0).time_spend;
Index: app/src/main/java/com/maths/beyond_school_280720220930/database/process/ProgressDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.maths.beyond_school_280720220930.database.process;\r\n\r\n\r\nimport androidx.room.Dao;\r\nimport androidx.room.Delete;\r\nimport androidx.room.Insert;\r\nimport androidx.room.Query;\r\nimport androidx.room.RawQuery;\r\nimport androidx.sqlite.db.SupportSQLiteQuery;\r\n\r\nimport com.maths.beyond_school_280720220930.database.grade_tables.Grades_data;\r\nimport com.maths.beyond_school_280720220930.model.ProgressDate;\r\nimport com.maths.beyond_school_280720220930.model.ProgressTableWise;\r\n\r\nimport java.util.List;\r\n\r\n@Dao\r\npublic interface ProgressDao {\r\n\r\n    @Query(\"SELECT * FROM progressM ORDER BY timestamp DESC\")\r\n    List<ProgressM> getAllProgress();\r\n\r\n    @Query(\"SELECT * FROM progressM WHERE date=:date ORDER BY timestamp DESC\")\r\n    List<ProgressM> getAllProgressByDate(String date);\r\n\r\n    @Query(\"SELECT date,SUM(correct) AS total_correct,SUM(wrong) AS total_wrong FROM progressM GROUP BY date ORDER BY timestamp DESC\")\r\n    List<ProgressDate> getSumOFData();\r\n\r\n    @Query(\"SELECT * FROM progressM WHERE chapter=:chapter\")\r\n    List<ProgressM> isAvailable(String chapter);\r\n\r\n    @Query(\"SELECT `table` ,COUNT(`table`) AS count,SUM(correct) AS total_correct,SUM(time_to_complete) AS total_time,SUM(wrong) AS total_wrong FROM progressM WHERE date=:date GROUP BY `table`\")\r\n    List<ProgressTableWise> getSumOFTableDataByDate(String date);\r\n\r\n    @Query(\"UPDATE progressM SET time_spend=:time WHERE chapter = :chapter\")\r\n    void update(long time, String chapter);\r\n    @Query(\"UPDATE progressM SET correct=:correct , wrong=:wrong WHERE chapter = :chapter\")\r\n    void updateScore(long correct,long wrong, String chapter);\r\n\r\n    @Query(\"SELECT time_spend FROM progressM WHERE subject LIKE '%'||:subject|| '%' AND chapter=:chapter\")\r\n    long getTimeSpend(String subject, String chapter);\r\n\r\n    @RawQuery(observedEntities = ProgressM.class)\r\n    long correctValues(SupportSQLiteQuery query);\r\n\r\n    @Insert\r\n    void insertNotes(ProgressM...progresses);\r\n\r\n    @Delete\r\n    void delete(ProgressM progress);\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/maths/beyond_school_280720220930/database/process/ProgressDao.java b/app/src/main/java/com/maths/beyond_school_280720220930/database/process/ProgressDao.java
--- a/app/src/main/java/com/maths/beyond_school_280720220930/database/process/ProgressDao.java	(revision b40401d29ed89e0bcba3248488be6dbf0a5a82c6)
+++ b/app/src/main/java/com/maths/beyond_school_280720220930/database/process/ProgressDao.java	(date 1667540857706)
@@ -29,16 +29,16 @@
     @Query("SELECT * FROM progressM WHERE chapter=:chapter")
     List<ProgressM> isAvailable(String chapter);
 
-    @Query("SELECT `table` ,COUNT(`table`) AS count,SUM(correct) AS total_correct,SUM(time_to_complete) AS total_time,SUM(wrong) AS total_wrong FROM progressM WHERE date=:date GROUP BY `table`")
-    List<ProgressTableWise> getSumOFTableDataByDate(String date);
+//    @Query("SELECT `table` ,COUNT(`table`) AS count,SUM(correct) AS total_correct,SUM(time_to_complete) AS total_time,SUM(wrong) AS total_wrong FROM progressM WHERE date=:date GROUP BY `table`")
+//    List<ProgressTableWise> getSumOFTableDataByDate(String date);
 
     @Query("UPDATE progressM SET time_spend=:time WHERE chapter = :chapter")
     void update(long time, String chapter);
     @Query("UPDATE progressM SET correct=:correct , wrong=:wrong WHERE chapter = :chapter")
     void updateScore(long correct,long wrong, String chapter);
 
-    @Query("SELECT time_spend FROM progressM WHERE subject LIKE '%'||:subject|| '%' AND chapter=:chapter")
-    long getTimeSpend(String subject, String chapter);
+    @Query("SELECT time_spend FROM progressM WHERE sub_id =:sub_id AND chapter=:chapter")
+    long getTimeSpend(String sub_id, String chapter);
 
     @RawQuery(observedEntities = ProgressM.class)
     long correctValues(SupportSQLiteQuery query);
Index: app/src/main/java/com/maths/beyond_school_280720220930/database/process/ProgressM.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.maths.beyond_school_280720220930.database.process;\r\n\r\nimport androidx.annotation.Keep;\r\nimport androidx.room.ColumnInfo;\r\nimport androidx.room.Entity;\r\nimport androidx.room.PrimaryKey;\r\n\r\n@Keep\r\n@Entity\r\npublic class ProgressM {\r\n\r\n    @ColumnInfo(name=\"date\")\r\n    public String date;\r\n\r\n    @ColumnInfo(name=\"table\")\r\n    public String  table;\r\n\r\n    @ColumnInfo(name=\"time_to_complete\")\r\n    public long  time_to_complete;\r\n\r\n    @ColumnInfo(name=\"correct\")\r\n    public long   correct;\r\n\r\n    @ColumnInfo(name=\"time\")\r\n    public String  time;\r\n\r\n    @ColumnInfo(name=\"wrong\")\r\n    public long    wrong;\r\n\r\n    @ColumnInfo(name=\"timestamp\")\r\n    public  long  timestamp;\r\n\r\n    @ColumnInfo(name=\"is_complete\")\r\n    public String   is_completed;\r\n    @ColumnInfo(name=\"time_spend\")\r\n    public long   time_spend;\r\n\r\n    @ColumnInfo(name=\"subject\")\r\n    public String  subject;\r\n\r\n    @ColumnInfo(name=\"chapter\")\r\n    public String  chapter;\r\n\r\n    @PrimaryKey(autoGenerate = true)\r\n    public int  progress_id;\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/maths/beyond_school_280720220930/database/process/ProgressM.java b/app/src/main/java/com/maths/beyond_school_280720220930/database/process/ProgressM.java
--- a/app/src/main/java/com/maths/beyond_school_280720220930/database/process/ProgressM.java	(revision b40401d29ed89e0bcba3248488be6dbf0a5a82c6)
+++ b/app/src/main/java/com/maths/beyond_school_280720220930/database/process/ProgressM.java	(date 1667540857690)
@@ -12,8 +12,8 @@
     @ColumnInfo(name="date")
     public String date;
 
-    @ColumnInfo(name="table")
-    public String  table;
+    @ColumnInfo(name="sub_id")
+    public String  sub_id;
 
     @ColumnInfo(name="time_to_complete")
     public long  time_to_complete;
Index: app/src/main/java/com/maths/beyond_school_280720220930/english_activity/spelling/spelling_test/SpellingTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.maths.beyond_school_280720220930.english_activity.spelling.spelling_test;\r\n\r\nimport static com.maths.beyond_school_280720220930.utils.Constants.EXTRA_SPELLING_DETAIL;\r\nimport static com.maths.beyond_school_280720220930.utils.Constants.EXTRA_TITLE;\r\nimport static com.maths.beyond_school_280720220930.utils.UtilityFunctions.capitalize;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.Intent;\r\nimport android.media.MediaPlayer;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.text.Html;\r\nimport android.text.Spannable;\r\nimport android.text.SpannableString;\r\nimport android.text.Spanned;\r\nimport android.text.style.ForegroundColorSpan;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport com.google.firebase.analytics.FirebaseAnalytics;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.maths.beyond_school_280720220930.LogActivity;\r\nimport com.maths.beyond_school_280720220930.R;\r\nimport com.maths.beyond_school_280720220930.SP.PrefConfig;\r\nimport com.maths.beyond_school_280720220930.ScoreActivity;\r\nimport com.maths.beyond_school_280720220930.database.english.EnglishGradeDatabase;\r\nimport com.maths.beyond_school_280720220930.database.english.spelling_common_words.SpellingCommonWordDao;\r\nimport com.maths.beyond_school_280720220930.database.english.spelling_common_words.model.SpellingCategoryModel;\r\nimport com.maths.beyond_school_280720220930.database.english.spelling_common_words.model.SpellingDetail;\r\nimport com.maths.beyond_school_280720220930.database.grade_tables.GradeDatabase;\r\nimport com.maths.beyond_school_280720220930.database.log.LogDatabase;\r\nimport com.maths.beyond_school_280720220930.database.process.ProgressDataBase;\r\nimport com.maths.beyond_school_280720220930.database.process.ProgressM;\r\nimport com.maths.beyond_school_280720220930.databinding.ActivitySpellingCwTestBinding;\r\nimport com.maths.beyond_school_280720220930.english_activity.spelling.SpellingTypeConverter;\r\nimport com.maths.beyond_school_280720220930.english_activity.vocabulary.EnglishViewPager;\r\nimport com.maths.beyond_school_280720220930.firebase.CallFirebaseForInfo;\r\nimport com.maths.beyond_school_280720220930.retrofit.ApiClient;\r\nimport com.maths.beyond_school_280720220930.retrofit.ApiInterface;\r\nimport com.maths.beyond_school_280720220930.retrofit.model.content.ContentModel;\r\nimport com.maths.beyond_school_280720220930.translation_engine.ConversionCallback;\r\nimport com.maths.beyond_school_280720220930.translation_engine.TextToSpeechBuilder;\r\nimport com.maths.beyond_school_280720220930.translation_engine.translator.TextToSpeckConverter;\r\nimport com.maths.beyond_school_280720220930.utils.CollectionUtils;\r\nimport com.maths.beyond_school_280720220930.utils.Constants;\r\nimport com.maths.beyond_school_280720220930.utils.UtilityFunctions;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.Objects;\r\nimport java.util.concurrent.ExecutionException;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.stream.Collectors;\r\n\r\nimport io.reactivex.Observable;\r\nimport io.reactivex.android.schedulers.AndroidSchedulers;\r\nimport retrofit2.Call;\r\nimport retrofit2.Response;\r\nimport retrofit2.Retrofit;\r\n\r\n\r\npublic class SpellingTest extends AppCompatActivity {\r\n\r\n\r\n    private static final String TAG = \"SpellingTest\";\r\n    private ActivitySpellingCwTestBinding binding;\r\n    private final int REQUEST_FOR_QUESTION = 345 * 35;\r\n\r\n\r\n    private Boolean isSpeaking = false;\r\n\r\n    private String category;\r\n    private TextToSpeckConverter tts = null;\r\n    private TextToSpeckConverter ttsHelper = null;\r\n    private MediaPlayer mediaPlayer = null;\r\n    private LogDatabase logDatabase;\r\n    private int currentWordLetterPosition = 0;\r\n    private ButtonClick buttonClickListener;\r\n\r\n    private String logs = \"\";\r\n\r\n    private SpellingCommonWordDao dao;\r\n    private List<SpellingDetail> spellingDetails;\r\n    private List<Fragment> fragments;\r\n    private GradeDatabase gradeDatabase;\r\n    private FirebaseFirestore kidsDb;\r\n    private String kidsGrade;\r\n    private String kidsId;\r\n    private GradeDatabase databaseGrade;\r\n    private JSONArray kidsActivityJsonArray = new JSONArray();\r\n    private String inputWord = \"\";\r\n    private long startTime;\r\n\r\n    private FirebaseAnalytics analytics;\r\n    private FirebaseAuth auth;\r\n    private int kidAge;\r\n    private String kidName;\r\n    private String gResult = \"\";\r\n    private String parentsContactId;\r\n    private long timeSpend = 0;\r\n    public static final int TIMER_VALUE = 15;\r\n    private boolean isTimerRunning = true;\r\n    private ProgressDataBase progressDataBase;\r\n    private List<ProgressM> progressData;\r\n\r\n    private int correctAnswer = 0;                                                                  // correct answer counter\r\n    private int wrongAnswer = 0;\r\n    private final static int REQUEST_QUESTION = 2 * 44;                                             // request code for asking question\r\n    private final static int REQUEST_CORRECT_OR_WRONG_ANSWER = 2 * 45;\r\n\r\n    private boolean isOnline = false;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = ActivitySpellingCwTestBinding.inflate(getLayoutInflater());\r\n        setContentView(binding.getRoot());\r\n\r\n        logDatabase = LogDatabase.getDbInstance(this);\r\n        databaseGrade = GradeDatabase.getDbInstance(this);\r\n        kidsGrade = PrefConfig.readIdInPref(getApplicationContext(), getResources().getString(R.string.kids_grade));\r\n        logDatabase = LogDatabase.getDbInstance(this);\r\n        kidsId = PrefConfig.readIdInPref(getApplicationContext(), getResources().getString(R.string.kids_id));\r\n        kidsDb = FirebaseFirestore.getInstance();\r\n        analytics = FirebaseAnalytics.getInstance(this);\r\n        auth = FirebaseAuth.getInstance();\r\n        analytics.setUserId(auth.getCurrentUser().getUid());\r\n        kidAge = UtilityFunctions.calculateAge(PrefConfig.readIdInPref(getApplicationContext(), getResources().getString(R.string.kids_dob)));\r\n        kidsId = PrefConfig.readIdInPref(getApplicationContext(), getResources().getString(R.string.kids_id));\r\n        kidName = PrefConfig.readIdInPref(getApplicationContext(), getResources().getString(R.string.kids_name));\r\n        parentsContactId = PrefConfig.readIdInPref(this, getResources().getString(R.string.parent_contact_details));\r\n        progressDataBase = ProgressDataBase.getDbInstance(SpellingTest.this);\r\n        progressData = new ArrayList<>();\r\n        setToolbar();\r\n        setData();\r\n        binding.learnOrTest.setOnClickListener((c) -> {\r\n            onBackPressed();\r\n        });\r\n    }\r\n\r\n\r\n    private void setData() {\r\n        if (getIntent().hasExtra(EXTRA_SPELLING_DETAIL)) {\r\n            category = getIntent().getStringExtra(EXTRA_SPELLING_DETAIL).trim();\r\n            isOnline = getIntent().getBooleanExtra(Constants.EXTRA_ONLINE_FLAG, false);\r\n            dao = EnglishGradeDatabase.getDbInstance(this).spellingCommonWordDao();\r\n            if (isOnline) {\r\n                getSubjectData();\r\n            } else {\r\n                setViews();\r\n            }\r\n            buttonClick();\r\n        } else {\r\n            UtilityFunctions.simpleToast(this, \"No data found\");\r\n        }\r\n    }\r\n\r\n    private void getSubjectData() {\r\n        Retrofit retrofit = ApiClient.getClient();\r\n        var api = retrofit.create(ApiInterface.class);\r\n        api.getVocabularySubject(PrefConfig.readIdInPref(this, getResources().getString(R.string.kids_grade)).toLowerCase().replace(\" \", \"\"), \"english\", getIntent().getStringExtra(EXTRA_TITLE).toLowerCase(), category).enqueue(new retrofit2.Callback<>() {\r\n            @Override\r\n            public void onResponse(Call<ContentModel> call, Response<ContentModel> response) {\r\n                Log.d(TAG, \"onResponse: \" + response.code());\r\n                if (response.body() != null) {\r\n                    Log.d(TAG, \"onResponse: \" + response.body().getContent().toString());\r\n                    mapData(response.body().getContent());\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(Call<ContentModel> call, Throwable t) {\r\n                Log.e(TAG, \"onFailure: \" + t.getLocalizedMessage());\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mapData(List<ContentModel.Content> content) {\r\n        var typeConverter = new SpellingTypeConverter();\r\n        spellingDetails = typeConverter.mapToList(content);\r\n        setViews();\r\n    }\r\n\r\n\r\n    private void setViews() {\r\n        binding.text.setText(category.replace(\"Spelling_CommonWords\", \"\").trim());\r\n        setPager();\r\n    }\r\n\r\n\r\n    private void buttonClick() {\r\n        binding.playPause.setOnClickListener(view -> {\r\n            isSpeaking = binding.playPause.isChecked();\r\n            logs += \"Question : \" + spellingDetails.get(binding.viewPagerTest.getCurrentItem()).getWord() + \" : \" + spellingDetails.get(binding.viewPagerTest.getCurrentItem()).getDescription() + \". \\n\";\r\n            startEngine();\r\n        });\r\n\r\n    }\r\n\r\n    private void startEngine() {\r\n        if (binding.playPause.isChecked()) {\r\n            try {\r\n                initTTS();\r\n                initMediaPlayer();\r\n                startSpeaking();\r\n                setButtonText();\r\n            } catch (ExecutionException | InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n        } else {\r\n            destroyedEngines();\r\n        }\r\n    }\r\n\r\n    private void initMediaPlayer() {\r\n        mediaPlayer = UtilityFunctions.playClapSound(this);\r\n    }\r\n\r\n\r\n    private void setPager() {\r\n        if (!isOnline) {\r\n            var data = getSpellingFromType(dao.getSpellingModel(1).getSpelling(), category);\r\n\r\n            if (data == null) {\r\n                UtilityFunctions.simpleToast(this, \"No data found for this spelling\");\r\n                return;\r\n            }\r\n            spellingDetails = data.getDetails();\r\n        }\r\n        List<Fragment> fragments = getFragments(spellingDetails);\r\n\r\n        var pagerAdapter = new EnglishViewPager(fragments, getSupportFragmentManager(), getLifecycle());\r\n        binding.viewPagerTest.setUserInputEnabled(false);\r\n        binding.viewPagerTest.setAdapter(pagerAdapter);\r\n        isSpeaking = binding.playPause.isChecked();\r\n        handleDeleteWord();\r\n    }\r\n\r\n    private void handleDeleteWord() {\r\n        binding.key5.setOnClickListener(v -> {\r\n            if (inputWord.length() > 0) {\r\n                var currentFragment = (SpellingTestFragment) fragments.get(binding.viewPagerTest.getCurrentItem());\r\n                var textView = currentFragment.getTextView();\r\n                var text = textView.getText().toString();\r\n                var newText = UtilityFunctions.replace(text, findFirstOccurrence(text, \"_\") - 1, '_');\r\n                textView.setText(newText);\r\n                currentWordLetterPosition--;\r\n                setButtonText();\r\n                inputWord = inputWord.substring(0, inputWord.length() - 1);\r\n                Log.d(TAG, \"handleDeleteWord: \" + inputWord + \" Current word letter position: \" + currentWordLetterPosition);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static int findFirstOccurrence(String str, String find) {\r\n        int index = str.indexOf(find);\r\n        return index;\r\n    }\r\n\r\n\r\n    private List<Fragment> getFragments(List<SpellingDetail> data) {\r\n        fragments = CollectionUtils.mapWithIndex(spellingDetails.stream(), (index, item) -> new SpellingTestFragment(item, index + 1)).collect(Collectors.toList());\r\n        return fragments;\r\n    }\r\n\r\n    public static SpellingCategoryModel getSpellingFromType(List<SpellingCategoryModel> models, String type) {\r\n        var filterList = models.stream().filter(model -> model.getCategory().equals(type)).collect(Collectors.toList());\r\n        if (filterList.size() > 0) {\r\n            return filterList.get(0);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    private void initTTS() throws ExecutionException, InterruptedException {\r\n        var task = new TTSAsyncTask();\r\n        tts = task.execute(new ConversionCallback() {\r\n            @Override\r\n            public void onCompletion() {\r\n                UtilityFunctions.runOnUiThread(() -> {\r\n                    tts.setTextViewAndSentence(null);\r\n                    playPauseAnimation(false);\r\n                    var textView = (TextView) findViewById(R.id.text_view_part_1);\r\n                    var spellingDetail = spellingDetails.get(binding.viewPagerTest.getCurrentItem());\r\n                    var split = spellingDetail.getDescription().toLowerCase(Locale.ROOT).split(spellingDetail.getWord().toLowerCase(Locale.ROOT), 2);\r\n\r\n                    textView.setText(Html.fromHtml(capitalize(split[0]) + \" <font color='#64c1c7'>\" + spellingDetail.getWord().replaceAll(\"[A-Za-z]\", \"_\") + \"</font> \" + split[1]));\r\n                    try {\r\n                        helperTTS(\"Now type the word \" + (spellingDetails.get(binding.viewPagerTest.getCurrentItem()).getWord().equals(\"The\") ? \"'di'\" : \"'\" + spellingDetails.get(binding.viewPagerTest.getCurrentItem()).getWord()) + \"' .\", false, REQUEST_FOR_QUESTION);\r\n                        playPauseAnimation(true);\r\n                    } catch (ExecutionException | InterruptedException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void onErrorOccurred(String errorMessage) {\r\n                Log.e(TAG, \"onErrorOccurred: \" + errorMessage);\r\n            }\r\n        }).get();\r\n        tts.setTextRangeListener((utteranceId, sentence, start, end, frame) -> {\r\n            UtilityFunctions.runOnUiThread(() -> {\r\n                var textView = (TextView) this.findViewById(R.id.text_view_part_1);\r\n                if (textView != null) {\r\n                    Spannable textWithHighlights = new SpannableString(sentence);\r\n                    textWithHighlights.setSpan(new ForegroundColorSpan(ContextCompat.getColor(this, R.color.primary)), start, end, Spanned.SPAN_INCLUSIVE_INCLUSIVE);\r\n                    textView.setText(textWithHighlights);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private void startSpeaking() throws ExecutionException, InterruptedException {\r\n        timer();\r\n        tts.initialize(spellingDetails.get(binding.viewPagerTest.getCurrentItem()).getDescription(), SpellingTest.this);\r\n        var spellingDetail = spellingDetails.get(binding.viewPagerTest.getCurrentItem());\r\n        var split = spellingDetail.getDescription().toLowerCase(Locale.ROOT).split(spellingDetail.getWord().toLowerCase(Locale.ROOT), 2);\r\n\r\n        var sentence = capitalize(split[0]) + spellingDetail.getWord().replaceAll(\"[A-Z a-z]\", \"_\") + split[1];\r\n        tts.setTextViewAndSentence(sentence);\r\n        playPauseAnimation(true);\r\n        if (binding.viewPagerTest.getCurrentItem() == (spellingDetails.size() - 1))\r\n            isSpeaking = false;\r\n    }\r\n\r\n\r\n    private void updateViews() {\r\n        setButtonText();\r\n        binding.correctText.setText(String.valueOf(correctAnswer));\r\n        binding.wrongText.setText(String.valueOf(wrongAnswer));\r\n    }\r\n\r\n    public void setButtonText() {                                                                   // set shuffled alphabet to button with one\r\n        var currentPosition = binding.viewPagerTest.getCurrentItem();                           // correct answer\r\n        var currentWord = spellingDetails.get(currentPosition).getWord();\r\n        var currentLetter = currentWord.charAt(currentWordLetterPosition);\r\n\r\n        var array = new ArrayList<Character>();\r\n        array.add(currentLetter);\r\n        array.add(UtilityFunctions.getRandomAlphabet());\r\n        array.add(UtilityFunctions.getRandomAlphabet());\r\n        array.add(UtilityFunctions.getRandomAlphabet());\r\n        var shuffleArray = UtilityFunctions.shuffleArray(array);\r\n        binding.key1.setText(shuffleArray.get(0).toString());\r\n        binding.key2.setText(shuffleArray.get(1).toString());\r\n        binding.key3.setText(shuffleArray.get(2).toString());\r\n        binding.key4.setText(shuffleArray.get(3).toString());\r\n    }\r\n\r\n    private void updateScoreAndResetViews() {\r\n        UtilityFunctions.runOnUiThread(() -> {\r\n            binding.wrongText.setText(String.valueOf(wrongAnswer));\r\n            binding.correctText.setText(String.valueOf(correctAnswer));\r\n            setButtonText();\r\n        });\r\n    }\r\n\r\n\r\n    private void helperTTS(String message, boolean canNavigate, int request) throws ExecutionException, InterruptedException {\r\n        ttsHelper = new TTSHelperAsyncTask().execute(new ConversionCallback() {\r\n            @Override\r\n            public void onCompletion() {\r\n                if (!canNavigate && request == REQUEST_FOR_QUESTION) {\r\n                    startTime = new Date().getTime();\r\n                    isVisibleButtonKeys(true);\r\n                    playPauseAnimation(false);\r\n                    handleInputWord();\r\n                }\r\n                if (request == REQUEST_CORRECT_OR_WRONG_ANSWER && canNavigate) {                    // true if correct or wrong answer is asked\r\n                    isVisibleButtonKeys(false);\r\n                    mediaPlayer.pause();\r\n                    if (binding.viewPagerTest.getCurrentItem() == spellingDetails.size() - 1) {\r\n                        playPauseAnimation(false);\r\n                        playPauseAnimation(false);\r\n                        uploadData();\r\n                        return;\r\n                    }\r\n                    if (isSpeaking) {\r\n                        binding.viewPagerTest.setCurrentItem(binding.viewPagerTest.getCurrentItem() + 1);\r\n                        try {\r\n                            startSpeaking();\r\n                        } catch (ExecutionException | InterruptedException e) {\r\n                            e.printStackTrace();\r\n                        }\r\n                        updateScoreAndResetViews();\r\n                    }\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onErrorOccurred(String errorMessage) {\r\n\r\n            }\r\n        }).get().initialize(message, this);\r\n    }\r\n\r\n    private void handleInputWord() {                                                                // handle input word\r\n        var currentPosition = binding.viewPagerTest.getCurrentItem();                          // get current position\r\n        var currentWord = spellingDetails.get(currentPosition).getWord();                       // get current word\r\n        var currentFragment = (SpellingTestFragment) fragments.get(currentPosition);        // get current fragment\r\n        var textView = currentFragment.getTextView();                                      // get text view of current fragment\r\n        buttonClickListener = s -> {\r\n            Log.d(\"XXX\", \"handleInputWord: \" + s);\r\n            inputWord += s;\r\n            var textViewText = textView.getText().toString();                                // get text from text view\r\n            textView.setText(textViewText.replaceFirst(\"_\", s));\r\n            currentWordLetterPosition++;\r\n            if (currentWordLetterPosition < currentWord.length()) setButtonText();\r\n            else checkAnswer();\r\n        };\r\n        handleButtonClick();\r\n    }\r\n\r\n    private void checkAnswer() {\r\n        var currentPosition = binding.viewPagerTest.getCurrentItem();                          // get current position\r\n        var currentWord = spellingDetails.get(currentPosition).getWord();                       // get current word\r\n        var currentFragment = (SpellingTestFragment) fragments.get(currentPosition);        // get current fragment\r\n        var textView = currentFragment.getTextView();                                      // get text view of current fragment\r\n        long endTime = new Date().getTime();\r\n        var diff = endTime - startTime;\r\n        if (inputWord.toLowerCase(Locale.ROOT).equals(currentWord.toLowerCase(Locale.ROOT))) {\r\n            correctAnswer++;\r\n            textView.setTextColor(getResources().getColor(R.color.green));\r\n            logs += \"Time Take :\" + UtilityFunctions.formatTime(diff) + \", Correct .\\n\";\r\n            sendDataToAnalytics(currentWord, diff, true);\r\n            inputWord = \"\";\r\n            try {\r\n                helperTTS(UtilityFunctions.getCompliment(true),                             // true if correct answer\r\n                        true, REQUEST_CORRECT_OR_WRONG_ANSWER);\r\n                mediaPlayer.start();\r\n\r\n                putJsonData(\"Question : \" + \"Type is the spelling of \" + currentWord + \" ?\", currentWord, diff, true);\r\n            } catch (ExecutionException | InterruptedException | JSONException e) {\r\n                logs += e.getMessage() + \"\\n\";\r\n            }\r\n        } else {\r\n            wrongAnswer++;\r\n            textView.setTextColor(getResources().getColor(R.color.sweet_red));\r\n            logs += \"Time Take :\" + UtilityFunctions.formatTime(diff) + \", Wrong .\\n\";\r\n            sendDataToAnalytics(currentWord, diff, false);\r\n            inputWord = \"\";\r\n            try {\r\n                helperTTS(UtilityFunctions.getCompliment(false),                            // false if wrong answer\r\n                        true, REQUEST_CORRECT_OR_WRONG_ANSWER);\r\n\r\n                putJsonData(\"Question : \" + \"Type is the spelling of \" + currentWord + \" ?\", currentWord, diff, false);\r\n            } catch (ExecutionException | InterruptedException | JSONException e) {\r\n                logs += e.getMessage() + \"\\n\";\r\n            }\r\n        }\r\n        isVisibleButtonKeys(false);\r\n        currentWordLetterPosition = 0;\r\n    }\r\n\r\n\r\n    private void sendDataToAnalytics(String currentWord, long diff, boolean b) {\r\n        UtilityFunctions.sendDataToAnalytics(analytics, Objects.requireNonNull(auth.getCurrentUser()).getUid(), kidsId, kidName, \"English-Test-\" + \"spelling common words\", kidAge, currentWord, inputWord, b, (int) (diff), \"Type the spelling of the word\" + currentWord, \"English\", parentsContactId);\r\n    }\r\n\r\n    static class TTSAsyncTask extends AsyncTask<ConversionCallback, Void, TextToSpeckConverter> {\r\n        @Override\r\n        protected TextToSpeckConverter doInBackground(ConversionCallback... conversionCallbacks) {\r\n            return TextToSpeechBuilder.builder(conversionCallbacks[0]);\r\n        }\r\n    }\r\n\r\n    static class TTSHelperAsyncTask extends AsyncTask<ConversionCallback, Void, TextToSpeckConverter> {\r\n        @Override\r\n        protected TextToSpeckConverter doInBackground(ConversionCallback... conversionCallbacks) {\r\n            return TextToSpeechBuilder.builder(conversionCallbacks[0]);\r\n        }\r\n    }\r\n\r\n    private void playPauseAnimation(Boolean play) {\r\n        UtilityFunctions.runOnUiThread(() -> {\r\n            if (play) binding.imageViewTeacher.playAnimation();\r\n            else binding.imageViewTeacher.pauseAnimation();\r\n        });\r\n    }\r\n\r\n    private void isVisibleButtonKeys(boolean isVisible) {                                           // set visibility of button keys\r\n        UtilityFunctions.runOnUiThread(() -> {\r\n            if (isVisible) binding.linearLayout.setVisibility(View.VISIBLE);\r\n            else binding.linearLayout.setVisibility(View.INVISIBLE);\r\n\r\n        });\r\n    }\r\n\r\n\r\n    private void destroyedEngines() {\r\n        binding.playPause.setChecked(false);\r\n        playPauseAnimation(false);\r\n        if (tts != null) tts.destroy();\r\n        if (ttsHelper != null) ttsHelper.destroy();\r\n        if (mediaPlayer != null) mediaPlayer.release();\r\n        setLayoutVisible(false);\r\n        var current = (SpellingTestFragment) fragments.get(binding.viewPagerTest.getCurrentItem());\r\n        current.getAnimationView().setVisibility(View.GONE);\r\n    }\r\n\r\n    private void setLayoutVisible(Boolean visible) {\r\n        UtilityFunctions.runOnUiThread(() -> {\r\n            binding.linearLayout.setVisibility(visible ? View.VISIBLE : View.INVISIBLE);\r\n        });\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        checkLogIsEnable();\r\n        destroyedEngines();\r\n        checkProgressData();\r\n        UtilityFunctions.checkProgressAvailable(progressDataBase, \"English\" + \"Spelling\", category, new Date(), timeSpend + Integer.parseInt(binding.timeText.getText().toString()), false);\r\n    }\r\n\r\n    private void checkLogIsEnable() {\r\n        if (PrefConfig.readIdInPref(getApplicationContext(), \"IS_LOG_ENABLE\").equals(\"true\"))\r\n            saveLog();\r\n    }\r\n\r\n    private void saveLog() {\r\n        Log.d(TAG, \"saveLog: Called \" + logs);\r\n        UtilityFunctions.saveLog(logDatabase, logs);\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        super.onBackPressed();\r\n        destroyedEngines();\r\n    }\r\n\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    private void setToolbar() {\r\n        binding.toolBar.titleText.setText(getResources().getString(R.string.spelling_common_words).replace(\"Spelling_\", \" \") + \" text\");\r\n        binding.toolBar.imageViewBack.setOnClickListener(v -> onBackPressed());\r\n        binding.toolBar.getRoot().inflateMenu(R.menu.log_menu);\r\n        binding.toolBar.getRoot().setOnMenuItemClickListener(item -> {\r\n\r\n            if (item.getItemId() == R.id.action_log) {\r\n                startActivity(new Intent(getApplicationContext(), LogActivity.class));\r\n\r\n                return true;\r\n            }\r\n            return super.onOptionsItemSelected(item);\r\n\r\n        });\r\n\r\n    }\r\n\r\n    private void putJsonData(String question, String ans, long timeTaken, boolean isCorrect) throws JSONException {\r\n\r\n\r\n        JSONObject activityData = new JSONObject();\r\n        try {\r\n            activityData.put(\"question\", question);\r\n            activityData.put(\"ans\", ans);\r\n            activityData.put(\"time_taken\", timeTaken);\r\n            activityData.put(\"is_correct\", isCorrect);\r\n\r\n        } catch (JSONException e) {\r\n            // TODO Auto-generated catch block\r\n            e.printStackTrace();\r\n        }\r\n        kidsActivityJsonArray.put(activityData);\r\n\r\n    }\r\n\r\n    private void gotoScoreCard() {\r\n\r\n        Intent intent = new Intent(getApplicationContext(), ScoreActivity.class);\r\n        intent.putExtra(\"wrongAns\", wrongAnswer);\r\n        intent.putExtra(\"correctAns\", correctAnswer);\r\n        intent.putExtra(\"chapter\", category.replace(\"Spelling_CommonWords\", \" \"));\r\n\r\n        startActivity(intent);\r\n    }\r\n\r\n    private void timer() {\r\n        isTimerRunning = false;\r\n        Observable.interval(60, TimeUnit.SECONDS).observeOn(AndroidSchedulers.mainThread()).doOnNext(x -> {\r\n            // update your view here\r\n\r\n            binding.timerProgress.setMax(15);\r\n            binding.timerProgress.setProgress(Integer.parseInt((x + 1) + \"\"));\r\n            binding.timeText.setText((x + 1) + \"\");\r\n            Log.i(\"task\", x + \"\");\r\n        }).takeUntil(aLong -> aLong == TIMER_VALUE).doOnComplete(() ->\r\n                // do whatever you need on complete\r\n                Log.i(\"TSK\", \"task\")).subscribe();\r\n\r\n\r\n    }\r\n\r\n    private void checkProgressData() {\r\n        progressData = UtilityFunctions.checkProgressAvailable(progressDataBase, \"English\" + \"Spelling\", category, new Date(), 0, true);\r\n\r\n        try {\r\n            if (progressData != null) {\r\n                timeSpend = progressData.get(0).time_spend;\r\n            }\r\n        } catch (Exception e) {\r\n            timeSpend = 0;\r\n        }\r\n\r\n    }\r\n\r\n    private void uploadData() {\r\n\r\n        try {\r\n            if (correctAnswer >= UtilityFunctions.getNinetyPercentage(spellingDetails.size())) {\r\n                UtilityFunctions.updateDbUnlock(databaseGrade, kidsGrade, \"Spelling_CommonWords\", category);\r\n                CallFirebaseForInfo.checkActivityData(kidsDb, kidsActivityJsonArray, \"pass\", auth, kidsId, category, \"spelling\", correctAnswer, wrongAnswer, spellingDetails.size(), \"english\");\r\n\r\n                progressDataBase.progressDao().updateScore(correctAnswer, wrongAnswer, category);\r\n\r\n            } else {\r\n                CallFirebaseForInfo.checkActivityData(kidsDb, kidsActivityJsonArray, \"fail\", auth, kidsId, category, \"spelling\", correctAnswer, wrongAnswer, spellingDetails.size(), \"english\");\r\n            }\r\n            gotoScoreCard();\r\n        } catch (JSONException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    private void handleButtonClick() {\r\n        var currentPosition = binding.viewPagerTest.getCurrentItem();                           // get current position of view pager\r\n        var currentWord = spellingDetails.get(currentPosition).getWord();\r\n        binding.key1.setOnClickListener(v -> {\r\n            if (currentWordLetterPosition < currentWord.length())\r\n                buttonClickListener.onClick(binding.key1.getText().toString());\r\n        });\r\n        binding.key2.setOnClickListener(v -> {\r\n            if (currentWordLetterPosition < currentWord.length())\r\n                buttonClickListener.onClick(binding.key2.getText().toString());\r\n        });\r\n        binding.key3.setOnClickListener(v -> {\r\n            if (currentWordLetterPosition < currentWord.length())\r\n                buttonClickListener.onClick(binding.key3.getText().toString());\r\n        });\r\n        binding.key4.setOnClickListener(v -> {\r\n            if (currentWordLetterPosition < currentWord.length())\r\n                buttonClickListener.onClick(binding.key4.getText().toString());\r\n        });\r\n    }\r\n\r\n    interface ButtonClick {                                                                         // interface for test option button click\r\n        void onClick(String s);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/maths/beyond_school_280720220930/english_activity/spelling/spelling_test/SpellingTest.java b/app/src/main/java/com/maths/beyond_school_280720220930/english_activity/spelling/spelling_test/SpellingTest.java
--- a/app/src/main/java/com/maths/beyond_school_280720220930/english_activity/spelling/spelling_test/SpellingTest.java	(revision b40401d29ed89e0bcba3248488be6dbf0a5a82c6)
+++ b/app/src/main/java/com/maths/beyond_school_280720220930/english_activity/spelling/spelling_test/SpellingTest.java	(date 1667542488799)
@@ -1,5 +1,6 @@
 package com.maths.beyond_school_280720220930.english_activity.spelling.spelling_test;
 
+import static com.maths.beyond_school_280720220930.utils.Constants.EXTRA_CATEGORY_ID;
 import static com.maths.beyond_school_280720220930.utils.Constants.EXTRA_SPELLING_DETAIL;
 import static com.maths.beyond_school_280720220930.utils.Constants.EXTRA_TITLE;
 import static com.maths.beyond_school_280720220930.utils.UtilityFunctions.capitalize;
@@ -524,7 +525,7 @@
         checkLogIsEnable();
         destroyedEngines();
         checkProgressData();
-        UtilityFunctions.checkProgressAvailable(progressDataBase, "English" + "Spelling", category, new Date(), timeSpend + Integer.parseInt(binding.timeText.getText().toString()), false);
+        UtilityFunctions.checkProgressAvailable(progressDataBase, getIntent().getStringExtra(EXTRA_CATEGORY_ID), category, new Date(), timeSpend + Integer.parseInt(binding.timeText.getText().toString()), false);
     }
 
     private void checkLogIsEnable() {
@@ -607,7 +608,7 @@
     }
 
     private void checkProgressData() {
-        progressData = UtilityFunctions.checkProgressAvailable(progressDataBase, "English" + "Spelling", category, new Date(), 0, true);
+        progressData = UtilityFunctions.checkProgressAvailable(progressDataBase, getIntent().getStringExtra(EXTRA_CATEGORY_ID), category, new Date(), 0, true);
 
         try {
             if (progressData != null) {
Index: app/src/main/java/com/maths/beyond_school_280720220930/utils/UtilityFunctions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.maths.beyond_school_280720220930.utils;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.app.PendingIntent;\r\nimport android.content.ContentUris;\r\nimport android.content.ContentValues;\r\nimport android.content.Context;\r\nimport android.database.Cursor;\r\nimport android.graphics.Color;\r\nimport android.media.AudioManager;\r\nimport android.media.MediaPlayer;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.Looper;\r\nimport android.os.Parcelable;\r\nimport android.provider.CalendarContract;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.view.Window;\r\nimport android.view.WindowManager;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.sqlite.db.SimpleSQLiteQuery;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.github.twocoffeesoneteam.glidetovectoryou.GlideToVectorYou;\r\nimport com.github.twocoffeesoneteam.glidetovectoryou.GlideToVectorYouListener;\r\nimport com.google.android.material.textfield.TextInputLayout;\r\nimport com.google.firebase.analytics.FirebaseAnalytics;\r\nimport com.maths.beyond_school_280720220930.R;\r\nimport com.maths.beyond_school_280720220930.SP.PrefConfig;\r\nimport com.maths.beyond_school_280720220930.database.english.grammer.model.GrammarModel;\r\nimport com.maths.beyond_school_280720220930.database.english.vocabulary.model.VocabularyCategoryModel;\r\nimport com.maths.beyond_school_280720220930.database.grade_tables.GradeData;\r\nimport com.maths.beyond_school_280720220930.database.grade_tables.GradeDatabase;\r\nimport com.maths.beyond_school_280720220930.database.grade_tables.Grades_data;\r\nimport com.maths.beyond_school_280720220930.database.log.LogDatabase;\r\nimport com.maths.beyond_school_280720220930.database.log.LogEntity;\r\nimport com.maths.beyond_school_280720220930.database.process.ProgressDataBase;\r\nimport com.maths.beyond_school_280720220930.database.process.ProgressM;\r\nimport com.maths.beyond_school_280720220930.dialogs.HintDialog;\r\n\r\nimport java.text.DateFormat;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.time.Duration;\r\nimport java.time.LocalDate;\r\nimport java.time.Period;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Random;\r\nimport java.util.TimeZone;\r\nimport java.util.stream.Collectors;\r\n\r\npublic final class UtilityFunctions {\r\n\r\n    //    Ayaan's Code\r\n\r\n    // Extension Function To load image in imageview Using Glide Library\r\n    public static void loadImage(String url, android.widget.ImageView imageView) {\r\n        Glide.with(imageView.getContext())\r\n                .load(url)\r\n                .error(R.drawable.cartoon_image_1)\r\n                .into(imageView);\r\n    }\r\n\r\n    // Function to check weather device publisher is Samsung or not\r\n    public static boolean isSamsungDevice() {\r\n        return Build.MANUFACTURER.equalsIgnoreCase(\"samsung\");\r\n    }\r\n\r\n    public static boolean intToBoolean(int i) {\r\n        return i != 0;\r\n    }\r\n\r\n    public static void loadImage(String url, android.widget.ImageView imageView, View progress) {\r\n        try {\r\n            GlideToVectorYou\r\n                    .init()\r\n                    .with(imageView.getContext())\r\n                    .withListener(new GlideToVectorYouListener() {\r\n                        @Override\r\n                        public void onLoadFailed() {\r\n                            progress.setVisibility(View.GONE);\r\n                        }\r\n\r\n                        @Override\r\n                        public void onResourceReady() {\r\n                            progress.setVisibility(View.GONE);\r\n                        }\r\n                    })\r\n                    .load(Uri.parse(url), imageView);\r\n        } catch (Exception e) {\r\n//            Glide.with(imageView.getContext())\r\n//                    .load(url)\r\n//                    .timeout(10000)\r\n//                    .error(R.drawable.cartoon_image_1)\r\n//                    .listener(new com.bumptech.glide.request.RequestListener<>() {\r\n//                        @Override\r\n//                        public boolean onLoadFailed(@Nullable GlideException e, Object model, Target<Drawable> target, boolean isFirstResource) {\r\n//                            progress.setVisibility(View.GONE);\r\n//                            return false;\r\n//                        }\r\n//\r\n//                        @Override\r\n//                        public boolean onResourceReady(Drawable resource, Object model, Target<Drawable> target, DataSource dataSource, boolean isFirstResource) {\r\n//                            progress.setVisibility(View.GONE);\r\n//                            return false;\r\n//                        }\r\n//                    })\r\n//                    .into(imageView);\r\n            Log.d(\"XXX\", \"loadImage: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    public static void loadImageSvg(String url, android.widget.ImageView imageView, View progress) {\r\n\r\n    }\r\n\r\n\r\n    public static Map<String, List<String>> phonetics() {\r\n\r\n        Map<String, List<String>> words = new HashMap<>();\r\n        words.put(\"a\", Arrays.asList(new String[]{\"a\", \"ya\", \"yay\"}));\r\n        words.put(\"b\", Arrays.asList(new String[]{\"b\", \"be\", \"bee\"}));\r\n        words.put(\"c\", Arrays.asList(new String[]{\"c\", \"see\", \"sea\"}));\r\n        words.put(\"d\", Arrays.asList(new String[]{\"d\", \"de\", \"dee\", \"thee\"}));\r\n        words.put(\"e\", Arrays.asList(new String[]{\"e\", \"ee\", \"eh\"}));\r\n        words.put(\"f\", Arrays.asList(new String[]{\"f\", \"eff\"}));\r\n        words.put(\"g\", Arrays.asList(new String[]{\"g\", \"gee\", \"jee\"}));\r\n        words.put(\"h\", Arrays.asList(new String[]{\"h\", \"aitch\", \"itch\", \"hedge\", \"hatch\", \"edge\"}));\r\n        words.put(\"i\", Arrays.asList(new String[]{\"i\", \"eye\", \"aye\"}));\r\n        words.put(\"j\", Arrays.asList(new String[]{\"j\", \"jay\", \"je\", \"joy\"}));\r\n        words.put(\"k\", Arrays.asList(new String[]{\"k\", \"kay\", \"ke\"}));\r\n        words.put(\"l\", Arrays.asList(new String[]{\"l\", \"ell\", \"yell\", \"hell\", \"el\"}));\r\n        words.put(\"m\", Arrays.asList(new String[]{\"m\", \"am\", \"yam\", \"em\"}));\r\n        words.put(\"n\", Arrays.asList(new String[]{\"n\", \"yen\"}));\r\n        words.put(\"o\", Arrays.asList(new String[]{\"o\", \"oh\", \"vow\", \"waw\"}));\r\n        words.put(\"p\", Arrays.asList(new String[]{\"p\", \"pee\", \"pay\", \"pie\"}));\r\n        words.put(\"q\", Arrays.asList(new String[]{\"q\", \"cue\", \"queue\"}));\r\n        words.put(\"r\", Arrays.asList(new String[]{\"r\", \"are\", \"err\", \"year\"}));\r\n        words.put(\"s\", Arrays.asList(new String[]{\"s\", \"ess\", \"es\", \"ass\", \"yes\", \"as\"}));\r\n        words.put(\"t\", Arrays.asList(new String[]{\"t\", \"tee\", \"tea\", \"it\", \"ti\"}));\r\n        words.put(\"u\", Arrays.asList(new String[]{\"u\", \"you\"}));\r\n        words.put(\"v\", Arrays.asList(new String[]{\"v\", \"vee\", \"wee\"}));\r\n        words.put(\"w\", Arrays.asList(new String[]{\"w\", \"double you\"}));\r\n        words.put(\"x\", Arrays.asList(new String[]{\"x\", \"ex\", \"aex\"}));\r\n        words.put(\"y\", Arrays.asList(new String[]{\"y\", \"why\"}));\r\n        words.put(\"z\", Arrays.asList(new String[]{\"z\", \"zed\", \"zee\", \"jed\"}));\r\n        return words;\r\n    }\r\n\r\n    public static int getPendingIntentFlag() {\r\n        return (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) ? PendingIntent.FLAG_IMMUTABLE : PendingIntent.FLAG_ONE_SHOT;\r\n    }\r\n\r\n    public static void simpleToast(Context context, String message) {\r\n        Toast.makeText(context, message, Toast.LENGTH_SHORT).show();\r\n    }\r\n\r\n    // Extension Function to for Handler to run on UI Thread\r\n    public static void runOnUiThread(Runnable runnable, long time) {\r\n        new Handler(Looper.getMainLooper()).postDelayed(runnable, time);\r\n\r\n    }\r\n\r\n    public static void runOnUiThread(Runnable runnable) {\r\n        new Handler(Looper.getMainLooper()).post(runnable);\r\n\r\n    }\r\n\r\n    public static Boolean checkString(String s1, String s2) {\r\n        return Soundex.getCode(s1).equals(Soundex.getCode(s2));\r\n    }\r\n\r\n\r\n    //    Extension Function to get random number by passing digits number\r\n    public static int getRandomNumber(int digits) {\r\n        int number = (int) (Math.random() * Math.pow(10, digits));\r\n        if (number != 0)\r\n            return number;\r\n        else\r\n            return getRandomNumber(digits);\r\n    }\r\n\r\n    // Extension function to add space between String\r\n    public static String addComma(String s) {\r\n        StringBuilder sb = new StringBuilder();\r\n        for (int i = 0; i < s.length(); i++) {\r\n            sb.append(\"'\").append(s.charAt(i)).append(\"' !\");\r\n        }\r\n        return sb.toString();\r\n    }\r\n\r\n    public static String capitalize(String s) {\r\n        if (s.length() == 0) return s;\r\n        return s.substring(0, 1).toUpperCase() + s.substring(1);\r\n    }\r\n\r\n    public static String addSpaceAnswer(String s) {\r\n        StringBuilder sb = new StringBuilder();\r\n        for (int i = 0; i < s.length(); i++) {\r\n            sb.append(s.charAt(i)).append(\" \");\r\n        }\r\n        return sb.toString();\r\n    }\r\n\r\n    public static String replace(String str, int index, char ch) {\r\n        char[] chars = str.toCharArray();\r\n        chars[index] = ch;\r\n        return new String(chars);\r\n    }\r\n\r\n    // Add space to each character of String accept end\r\n    public static String addSpace(String s) {\r\n        StringBuilder sb = new StringBuilder();\r\n        for (int i = 0; i < s.length() - 1; i++) {\r\n            sb.append(s.charAt(i)).append(\" \");\r\n        }\r\n        sb.append(s.charAt(s.length() - 1));\r\n        return sb.toString();\r\n    }\r\n\r\n\r\n    public enum VocabularyCategories {\r\n        bathroom_1,\r\n        bathroom_2,\r\n        body_parts_1,\r\n        body_parts_2,\r\n        colors_1,\r\n        colors_2,\r\n        animals_1,\r\n        animals_2,\r\n        fruits_1,\r\n        fruits_2,\r\n        vegetables_1,\r\n        vegetables_2,\r\n        cloth_1,\r\n        cloth_2,\r\n        feeling_1,\r\n        feeling_2,\r\n        insect_1,\r\n        insect_2,\r\n        kitchen_1,\r\n        kitchen_2,\r\n        living_room, summer, town, transport, weather,\r\n        school\r\n    }\r\n\r\n    public static String getRandomItem(String[] list) {\r\n        Random random = new Random();\r\n        return list[random.nextInt(list.length)];\r\n    }\r\n\r\n    public static String getCompliment(Boolean isCorrect) {\r\n        return (isCorrect)\r\n                ? getRandomItem(new String[]{\"Fantastic !\", \"well done !\", \"great job !\", \"amazing !\", \"awesome !\", \"High-five !\", \"wow !\", \"That’s wonderful !!\"})\r\n                :\r\n                getRandomItem(new String[]{\"That’s incorrect ! \", \"you can try again ! \", \"That’s not correct !\", \"let’s try again !\"});\r\n\r\n    }\r\n\r\n    public static String convertCardinalNumberToOrdinalNumber(int number) {\r\n        String[] suffixes = new String[]{\"th\", \"st\", \"nd\", \"rd\", \"th\", \"th\", \"th\", \"th\", \"th\"};\r\n        try {\r\n            switch (number % 100) {\r\n                case 11:\r\n                case 12:\r\n                case 13:\r\n                    return number + \"th\";\r\n                default:\r\n                    return number + suffixes[number % 10];\r\n            }\r\n        } catch (Exception e) {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    public static String getIntroForGrammar(Context context, String category) {\r\n        var intro = \"\";\r\n        if (context.getString(R.string.grammar_1).equals(category))\r\n            intro = \"Let’s learn how to identify nouns in a sentence.\" +\r\n                    \"Go through each word and see,\" +\r\n                    \"if it's a person, place, thing, or an emotion or idea.\";\r\n        else if (context.getString(R.string.grammar_2).equals(category))\r\n            intro = \"Some nouns have irregular plural forms. \" +\r\n                    \"They turn into different words. Let us memorize them.\";\r\n        else if (context.getString(R.string.grammar_3).equals(category))\r\n            intro = \"Lets practice to identify some common and proper nouns\";\r\n        else if (context.getString(R.string.grammar_4).equals(category))\r\n            intro = \"Let us learn how to identify verbs in a sentence. \";\r\n        else intro = \"Let us learn how to identify Present tense in verbs in a sentence. \";\r\n\r\n        return intro;\r\n    }\r\n\r\n    public static String[] getQuestionForGrammar(Context context, GrammarModel grammarModel, String category) {\r\n        var question = new String[]{};\r\n        if (context.getString(R.string.grammar_1).equals(category))\r\n            question = new String[]{grammarModel.getDescription() + \"...\" + \"'\"\r\n                    + grammarModel.getWord() + \"'!\" + \"is noun here.\",\r\n                    \"Now It's your turn to Click on the noun to identify it\"};\r\n        else if (context.getString(R.string.grammar_2).equals(category))\r\n            question = new String[]{\r\n                    grammarModel.getDescription().replace(\"→\", \",\")\r\n                            + \"...\" + \"'\", \"Now It's your turn to Click on \" +\r\n                    \"the plural form to identify it\"\r\n            };\r\n        else if (context.getString(R.string.grammar_3).equals(category)) {\r\n            var list = new String[]{\"Tell me which noun is this?\",\r\n                    \"Please answer which noun is this ?\"};\r\n            question = new String[]{\r\n                    \"'\" + grammarModel.getWord() + \"' .\"\r\n                            + grammarModel.getDescription() + \"...\"\r\n                    , UtilityFunctions.getRandomItem(list)\r\n            };\r\n        } else if (context.getString(R.string.grammar_4).equals(category))\r\n            question = new String[]{\r\n                    grammarModel.getDescription() + \"...\" + \"'\"\r\n                            + grammarModel.getWord() + \"'!\" + \"is verb here.\"\r\n                    , \"Now It's your turn to Click on the verb to identify it\"\r\n            };\r\n        else question = new String[]{\r\n                    grammarModel.getDescription() + \"...\" + \"'\"\r\n                            + grammarModel.getWord() + \"'!\" + \"is Present tense verb here.\"\r\n                    , \"Now It's your turn to Click on the Present tense verb to identify it\"\r\n            };\r\n        return question;\r\n    }\r\n\r\n    public static String getQuestionForGrammarTest(Context context, String category) {\r\n        var question = \"\";\r\n        if (context.getString(R.string.grammar_1).equals(category))\r\n            question = getRandomItem(new String[]{\r\n                    \"Can you identify the noun?\",\r\n                    \"Try to identify the noun ?\",\r\n                    \"Tell what is the noun here ?\",\r\n                    \"Guess the noun here?\"});\r\n        else if (context.getString(R.string.grammar_2).equals(category))\r\n            question = \"Try to tell the plural form of this noun\";\r\n        else if (context.getString(R.string.grammar_3).equals(category)) {\r\n            question = \"Tell me which noun is this?\";\r\n        } else if (context.getString(R.string.grammar_4).equals(category))\r\n            question = \"Can you identify the verb?\";\r\n        else question = \"Can you identify the Present tense verb?\";\r\n        return question;\r\n    }\r\n\r\n\r\n    public static String getQuestionTitleVocabulary(VocabularyCategories categories) {\r\n        switch (categories) {\r\n            case bathroom_1:\r\n            case bathroom_2:\r\n                return \"Let us learn about Bathroom and objects we use there.\";\r\n            case body_parts_1:\r\n            case body_parts_2:\r\n                return \"Here we will learn about our different body parts.\";\r\n            case colors_1:\r\n            case colors_2:\r\n                return \"It’s the turn of colors now. Let us learn them.\";\r\n            case animals_1:\r\n            case animals_2:\r\n                return \"Let us learn and know some animals. \";\r\n            case fruits_1:\r\n            case fruits_2:\r\n                return \"I am sure, you all love eating fruits. Let us try to learn different fruits and their names.\";\r\n            case vegetables_1:\r\n            case vegetables_2:\r\n                return \"Vegetables are good for health. We will learn about some of them now.\";\r\n            case cloth_1:\r\n            case cloth_2:\r\n                return \"We all wear different types of clothes to look nice. Let us know about them.\";\r\n            case feeling_1:\r\n            case feeling_2:\r\n                return \"Let us learn about feelings and emotions we all undergo.\";\r\n            case insect_1:\r\n            case insect_2:\r\n                return \"Now we will discover different types of insects.\";\r\n            case kitchen_1:\r\n            case kitchen_2:\r\n                return \"Let us learn and know some of the objects used by our mothers in Kitchen.\";\r\n            default:\r\n                return \"Let us learn and know about \" + UtilityFunctions.vocabularyCategoriesToString(categories);\r\n        }\r\n    }\r\n\r\n    public static String getQuestionsFromVocabularyCategories(VocabularyCategories categories) {\r\n        switch (categories) {\r\n            case bathroom_1:\r\n            case bathroom_2:\r\n                return getRandomItem(new String[]{\"Can you name this object? \", \" Try naming this object \", \" Can you tell what is this object called?\"});\r\n            case body_parts_1:\r\n            case body_parts_2:\r\n                return getRandomItem(new String[]{\"Can you name this body part? \", \" Try naming this body part\", \"Can you name this one?\"});\r\n            case colors_1:\r\n            case colors_2:\r\n                return getRandomItem(new String[]{\" Can you name this color? \", \" Which color is this?\", \" Try naming this color \", \" Which color do you see here?\"});\r\n            case animals_1:\r\n            case animals_2:\r\n                return getRandomItem(new String[]{\" Can you name this animal? \", \" Try naming this animal\", \" Can you identify this?\"});\r\n            case fruits_1:\r\n            case fruits_2:\r\n                return getRandomItem(new String[]{\"Can you name this fruit? \", \"Name this fruit\", \"Can you identify this fruit?\"});\r\n            case vegetables_1:\r\n            case vegetables_2:\r\n                return getRandomItem(new String[]{\"Can you name this vegetable? \", \"Name this vegetable\", \"Can you identify this vegetable?\"});\r\n            case cloth_1:\r\n            case cloth_2:\r\n                return getRandomItem(new String[]{\"Can you name this object?\", \"Name this ?\", \"Can you identify this?\"});\r\n            case feeling_1:\r\n            case feeling_2:\r\n                return getRandomItem(new String[]{\"What is this feeling called? \", \"Name this ?\", \"Can you identify this?\"});\r\n            case insect_1:\r\n            case insect_2:\r\n                return getRandomItem(new String[]{\"What is this insect called?\", \"Name this ?\"});\r\n            case kitchen_1:\r\n            case kitchen_2:\r\n                return getRandomItem(new String[]{\" What is this object called?\", \"Name this object\", \"Can you identify this?\"});\r\n            default:\r\n                return getRandomItem(new String[]{\"Name this object\", \"Can you identify this object?\"});\r\n        }\r\n    }\r\n\r\n    public static int getNinetyPercentage(int total) {\r\n        return (int) Math.floor(total * 0.9);\r\n    }\r\n\r\n    public static String getDbName(VocabularyCategories categories, Context context) {\r\n        switch (categories) {\r\n            case bathroom_1:\r\n                return context.getString(R.string.vocab1);\r\n            case bathroom_2:\r\n                return context.getString(R.string.vocab1_1);\r\n            case body_parts_1:\r\n                return context.getString(R.string.vocab2);\r\n            case body_parts_2:\r\n                return context.getString(R.string.vocab2_1);\r\n            case colors_1:\r\n                return context.getString(R.string.vocab3);\r\n            case colors_2:\r\n                return context.getString(R.string.vocab3_1);\r\n            case animals_1:\r\n                return context.getString(R.string.vocab4);\r\n            case animals_2:\r\n                return context.getString(R.string.vocab4_1);\r\n            case fruits_1:\r\n                return context.getString(R.string.vocab5);\r\n            case fruits_2:\r\n                return context.getString(R.string.vocab5_1);\r\n            case vegetables_1:\r\n                return context.getString(R.string.vocab6);\r\n            case vegetables_2:\r\n                return context.getString(R.string.vocab6_1);\r\n            case cloth_1:\r\n                return context.getString(R.string.vocab8);\r\n            case cloth_2:\r\n                return context.getString(R.string.vocab8_1);\r\n            case feeling_1:\r\n                return context.getString(R.string.vocab9);\r\n            case feeling_2:\r\n                return context.getString(R.string.vocab9_1);\r\n            case insect_1:\r\n                return context.getString(R.string.vocab10);\r\n            case insect_2:\r\n                return context.getString(R.string.vocab10_1);\r\n            case kitchen_1:\r\n                return context.getString(R.string.vocab11);\r\n            case kitchen_2:\r\n                return context.getString(R.string.vocab11_1);\r\n            case living_room:\r\n                return context.getString(R.string.vocab12);\r\n            case school:\r\n                return context.getString(R.string.vocab14);\r\n            case summer:\r\n                return context.getString(R.string.vocab15);\r\n            case town:\r\n                return context.getString(R.string.vocab16);\r\n            case transport:\r\n                return context.getString(R.string.vocab17);\r\n            case weather:\r\n                return context.getString(R.string.vocab18);\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n\r\n    public static String vocabularyCategoriesToString(VocabularyCategories vocabularyCategories) {\r\n        switch (vocabularyCategories) {\r\n            case bathroom_1:\r\n                return \"Bathroom 1\";\r\n            case bathroom_2:\r\n                return \"Bathroom 2\";\r\n            case body_parts_1:\r\n                return \"Body Parts 1\";\r\n            case body_parts_2:\r\n                return \"Body Parts 2\";\r\n            case colors_1:\r\n                return \"Colors 1\";\r\n            case colors_2:\r\n                return \"Colors 2\";\r\n            case animals_1:\r\n                return \"Animals 1\";\r\n            case animals_2:\r\n                return \"Animals 2\";\r\n            case fruits_1:\r\n                return \"Fruits 1\";\r\n            case fruits_2:\r\n                return \"Fruits 2\";\r\n            case vegetables_1:\r\n                return \"Vegetables 1\";\r\n            case vegetables_2:\r\n                return \"Vegetables 2\";\r\n            case cloth_1:\r\n                return \"Cloth 1\";\r\n            case cloth_2:\r\n                return \"Cloth 2\";\r\n            case feeling_1:\r\n                return \"Feeling 1\";\r\n            case feeling_2:\r\n                return \"Feeling 2\";\r\n            case insect_1:\r\n                return \"Insect 1\";\r\n            case insect_2:\r\n                return \"Insect 2\";\r\n            case kitchen_1:\r\n                return \"Kitchen 1\";\r\n            case kitchen_2:\r\n                return \"Kitchen 2\";\r\n            case living_room:\r\n                return \"Living Room\";\r\n            case summer:\r\n                return \"Summer\";\r\n            case town:\r\n                return \"Town\";\r\n            case transport:\r\n                return \"Transport\";\r\n            case weather:\r\n                return \"Weather\";\r\n            case school:\r\n                return \"School\";\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n\r\n    public static int getGrade(String grade) {\r\n        switch (grade) {\r\n            case \"GRADE 1\":\r\n                return 1;\r\n            case \"GRADE 2\":\r\n                return 2;\r\n            default:\r\n                return 3;\r\n        }\r\n    }\r\n\r\n    public static VocabularyCategories getVocabularyFromString(String category) {\r\n        switch (category) {\r\n            case \"bathroom_1\":\r\n                return VocabularyCategories.bathroom_1;\r\n            case \"bathroom_2\":\r\n                return VocabularyCategories.bathroom_2;\r\n            case \"body_parts_1\":\r\n                return VocabularyCategories.body_parts_1;\r\n            case \"body_parts_2\":\r\n                return VocabularyCategories.body_parts_2;\r\n            case \"colors_1\":\r\n                return VocabularyCategories.colors_1;\r\n            case \"colors_2\":\r\n                return VocabularyCategories.colors_2;\r\n            case \"fruits_1\":\r\n                return VocabularyCategories.fruits_1;\r\n            case \"fruits_2\":\r\n                return VocabularyCategories.fruits_2;\r\n            case \"vegetables_1\":\r\n                return VocabularyCategories.vegetables_1;\r\n            case \"vegetables_2\":\r\n                return VocabularyCategories.vegetables_2;\r\n            case \"animals_2\":\r\n                return VocabularyCategories.animals_2;\r\n            case \"cloth_1\":\r\n                return VocabularyCategories.cloth_1;\r\n            case \"cloth_2\":\r\n                return VocabularyCategories.cloth_2;\r\n            case \"feeling_1\":\r\n                return VocabularyCategories.feeling_1;\r\n            case \"feeling_2\":\r\n                return VocabularyCategories.feeling_2;\r\n            case \"insect_1\":\r\n                return VocabularyCategories.insect_1;\r\n            case \"insect_2\":\r\n                return VocabularyCategories.insect_2;\r\n            case \"kitchen_1\":\r\n                return VocabularyCategories.kitchen_1;\r\n            case \"kitchen_2\":\r\n                return VocabularyCategories.kitchen_2;\r\n            case \"living_room\":\r\n                return VocabularyCategories.living_room;\r\n            case \"summer\":\r\n                return VocabularyCategories.summer;\r\n            case \"town\":\r\n                return VocabularyCategories.town;\r\n            case \"transport\":\r\n                return VocabularyCategories.transport;\r\n            case \"weather\":\r\n                return VocabularyCategories.weather;\r\n            case \"school\":\r\n                return VocabularyCategories.school;\r\n            default:\r\n                return VocabularyCategories.animals_1;\r\n        }\r\n    }\r\n\r\n    public static VocabularyCategories getVocabularyCategoryFromAdapter(String category) {\r\n        switch (category) {\r\n            case \"bathroom_1\":\r\n                return VocabularyCategories.bathroom_1;\r\n            case \"bathroom_2\":\r\n                return VocabularyCategories.bathroom_2;\r\n            case \"bodyparts_1\":\r\n                return VocabularyCategories.body_parts_1;\r\n            case \"bodyparts_2\":\r\n                return VocabularyCategories.body_parts_2;\r\n            case \"colors_1\":\r\n                return VocabularyCategories.colors_1;\r\n            case \"colors_2\":\r\n                return VocabularyCategories.colors_2;\r\n            case \"fruits_1\":\r\n                return VocabularyCategories.fruits_1;\r\n            case \"fruits_2\":\r\n                return VocabularyCategories.fruits_2;\r\n            case \"vegetables_1\":\r\n                return VocabularyCategories.vegetables_1;\r\n            case \"vegetables_2\":\r\n                return VocabularyCategories.vegetables_2;\r\n            case \"clothes_1\":\r\n                return VocabularyCategories.cloth_1;\r\n            case \"clothes_2\":\r\n                return VocabularyCategories.cloth_2;\r\n            case \"feelings_1\":\r\n                return VocabularyCategories.feeling_1;\r\n            case \"feelings_2\":\r\n                return VocabularyCategories.feeling_2;\r\n            case \"insects_1\":\r\n                return VocabularyCategories.insect_1;\r\n            case \"insects_2\":\r\n                return VocabularyCategories.insect_2;\r\n            case \"kitchen_1\":\r\n                return VocabularyCategories.kitchen_1;\r\n            case \"kitchen_2\":\r\n                return VocabularyCategories.kitchen_2;\r\n            case \"livingroom\":\r\n                return VocabularyCategories.living_room;\r\n            case \"animal_2\":\r\n                return VocabularyCategories.animals_2;\r\n            case \"school\":\r\n                return VocabularyCategories.school;\r\n            case \"summer\":\r\n                return VocabularyCategories.summer;\r\n            case \"town\":\r\n                return VocabularyCategories.town;\r\n            case \"transport\":\r\n                return VocabularyCategories.transport;\r\n            case \"weather\":\r\n                return VocabularyCategories.weather;\r\n            default:\r\n                return VocabularyCategories.animals_1;\r\n        }\r\n    }\r\n\r\n\r\n    // function to Shuffle array and return\r\n    public static ArrayList shuffleArray(ArrayList ar) {\r\n        Random rnd = new Random();\r\n        for (int i = ar.size() - 1; i > 0; i--) {\r\n            int index = rnd.nextInt(i + 1);\r\n            // Simple swap\r\n            Object a = ar.get(index);\r\n            ar.set(index, ar.get(i));\r\n            ar.set(i, a);\r\n        }\r\n        return ar;\r\n    }\r\n\r\n\r\n    public static char getRandomAlphabet() {\r\n        Random r = new Random();\r\n        return (char) (r.nextInt(26) + 'a');\r\n    }\r\n\r\n    // function to get random alphabet accept the single character\r\n    public static char getRandomAlphabet(char c) {\r\n        Random r = new Random();\r\n        char randomChar = (char) (r.nextInt(26) + 'a');\r\n        if (randomChar == c) {\r\n            return getRandomAlphabet(c);\r\n        } else {\r\n            return randomChar;\r\n        }\r\n    }\r\n\r\n\r\n    public static VocabularyCategoryModel getVocabularyDetailsFromType(List<VocabularyCategoryModel> models, VocabularyCategories type) {\r\n        var filterList = models.stream().filter(model -> model.getCategory().equals(type.name())).collect(Collectors.toList());\r\n        if (filterList.size() > 0) {\r\n            return filterList.get(0);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    public static void attemptPhoneNumberLogin(FirebaseAnalytics mFirebaseAnalytics, String phoneNumber) {\r\n\r\n\r\n        var kidsData = new Bundle();\r\n        kidsData.putString(\"phoneNumber\", phoneNumber);\r\n        mFirebaseAnalytics.logEvent(\"phone_number_login_attempt\", kidsData);\r\n    }\r\n\r\n\r\n    public static void sendDataToAnalytics(FirebaseAnalytics mFirebaseAnalytics, String uid, String kidsId, String kidsName, String type,\r\n                                           int age, String result, String detected, Boolean tag, int timeTaken, String question, String subject\r\n            , String parentsContactId\r\n    ) {\r\n        var resultBundle = new Bundle();\r\n        resultBundle.putString(\"original_result\", result);\r\n        resultBundle.putString(\"detected_result\", detected);\r\n        resultBundle.putBoolean(\"is_correct\", tag);\r\n        resultBundle.putInt(\"timeTaken\", timeTaken);\r\n        resultBundle.putString(\"question\", question);\r\n        resultBundle.putString(\"parent_id\", uid);\r\n        resultBundle.putString(\"kids_id\", kidsId);\r\n        resultBundle.putString(\"kids_name\", kidsName);\r\n        resultBundle.putInt(\"kids_age\", age);\r\n        resultBundle.putString(\"type\", type);\r\n        resultBundle.putString(\"parents_contact_id\", parentsContactId);\r\n        mFirebaseAnalytics.logEvent(subject, resultBundle);\r\n\r\n\r\n        Bundle itemJeggings = new Bundle();\r\n        itemJeggings.putString(FirebaseAnalytics.Param.ITEM_ID, kidsId);\r\n        itemJeggings.putString(FirebaseAnalytics.Param.ITEM_NAME, kidsName);\r\n        itemJeggings.putString(FirebaseAnalytics.Param.ITEM_CATEGORY, question);\r\n        itemJeggings.putString(FirebaseAnalytics.Param.ITEM_VARIANT, detected);\r\n        itemJeggings.putString(FirebaseAnalytics.Param.ITEM_BRAND, result);\r\n        itemJeggings.putString(FirebaseAnalytics.Param.ITEM_CATEGORY2, parentsContactId);\r\n        itemJeggings.putDouble(FirebaseAnalytics.Param.PRICE, age);\r\n\r\n\r\n        Bundle activityInfoWithIndex = new Bundle(itemJeggings);\r\n        activityInfoWithIndex.putLong(FirebaseAnalytics.Param.INDEX, 1);\r\n\r\n\r\n        Bundle viewItemListParams = new Bundle();\r\n        viewItemListParams.putString(FirebaseAnalytics.Param.ITEM_LIST_ID, tag + \"\");\r\n        viewItemListParams.putString(FirebaseAnalytics.Param.ITEM_LIST_NAME, type);\r\n        viewItemListParams.putParcelableArray(FirebaseAnalytics.Param.ITEMS,\r\n                new Parcelable[]{activityInfoWithIndex});\r\n        mFirebaseAnalytics.logEvent(FirebaseAnalytics.Event.VIEW_ITEM_LIST, viewItemListParams);\r\n\r\n\r\n    }\r\n\r\n\r\n    public static void saveLog(LogDatabase db, String log) {\r\n        var saveLog = new LogEntity(log, String.valueOf(new Date().getTime()));\r\n        var dao = db.logDao();\r\n        dao.insertNotes(saveLog);\r\n    }\r\n\r\n\r\n    public static MediaPlayer playClapSound(Activity activity) {\r\n        var m = MediaPlayer.create(activity, R.raw.clap_sound);\r\n        m.setVolume(0.3f, 0.3f);\r\n        // set playback time to 1 sec\r\n        m.setLooping(false);\r\n\r\n        return m;\r\n    }\r\n\r\n\r\n    //     Abhishek's Code\r\n\r\n\r\n    // This solves the problem of repeating digits..\r\n\r\n\r\n    public static int getRandomIntegerUpto(int maximum, int minimum) {\r\n        return ((int) (Math.random() * (maximum - minimum))) + minimum;\r\n    }\r\n\r\n    public static List<Integer> getRandomTwoIntegerUpto(int maximum, int minimum) {\r\n\r\n        List<Integer> ls = new ArrayList<>();\r\n        while (ls.size() < 2) {\r\n            int digit = ((int) (Math.random() * (maximum - minimum))) + minimum;\r\n            if (!ls.contains(digit))\r\n                ls.add(digit);\r\n        }\r\n        return ls;\r\n    }\r\n\r\n\r\n    public static void saveDataLocally(Context context, String grade, String name, String dob, String imageUrl, String uuid) {\r\n        PrefConfig.writeIdInPref(context, grade, context.getResources().getString(R.string.kids_grade));\r\n        PrefConfig.writeIdInPref(context, name, context.getResources().getString(R.string.kids_name));\r\n        PrefConfig.writeIdInPref(context, dob, context.getResources().getString(R.string.kids_dob));\r\n        PrefConfig.writeIdInPref(context, imageUrl, context.getResources().getString(R.string.kids_profile_url));\r\n        PrefConfig.writeIdInPref(context, uuid, context.getResources().getString(R.string.kids_id));\r\n    }\r\n\r\n    public static Boolean isDivisible(int num1, int num2) {\r\n\r\n        if ((num1 % num2) == 0)\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    public Boolean matchingSeq(String str1, String str2) {\r\n\r\n\r\n        if (str1.equals(\"\"))\r\n            return false;\r\n\r\n        String st1 = str1.replace(\" \", \"\");\r\n        Log.i(\"Strings\", st1 + \",\" + str2);\r\n        while (st1.length() > 0) {\r\n\r\n            if (st1.startsWith(str2)) {\r\n                st1 = st1.replace(str2, \"\");\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    // Greet about morning, afternoon etc.\r\n    public String greeting() {\r\n        Calendar c = Calendar.getInstance();\r\n        int timeOfDay = c.get(Calendar.HOUR_OF_DAY);\r\n\r\n        if (timeOfDay >= 0 && timeOfDay < 12) {\r\n            return \"Good Morning\";\r\n        } else if (timeOfDay >= 12 && timeOfDay < 16) {\r\n            return \"Good Afternoon\";\r\n        } else if (timeOfDay >= 16 && timeOfDay < 21) {\r\n            return \"Good Evening\";\r\n        } else if (timeOfDay >= 21 && timeOfDay < 24) {\r\n            return \"Good Night\";\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n\r\n    // Format milisec to h: m: s\r\n    public static String formatTime(long diff) {\r\n\r\n\r\n        Duration duration = Duration.ofMillis(diff);\r\n        long h = duration.toHours();\r\n        long m = duration.toMinutes() % 60;\r\n        long s = duration.getSeconds() % 60;\r\n        String timeInHms = String.format(\"%d h:%d m:%d s\", h, m, s);\r\n        return String.format(\"Time taken :%s\", timeInHms);\r\n    }\r\n\r\n\r\n    // Calculates the age of kids\r\n    public static int calculateAge(String inputDate) {\r\n\r\n        LocalDate curDate = LocalDate.now();\r\n        SimpleDateFormat as = new SimpleDateFormat(\"dd/mm/yyyy\");\r\n        SimpleDateFormat req = new SimpleDateFormat(\"yyyy-mm-dd\");\r\n        try {\r\n            Date adate = as.parse(inputDate);\r\n            LocalDate dob = LocalDate.parse(req.format(adate));\r\n\r\n            if ((dob != null) && (curDate != null)) {\r\n                return Period.between(dob, curDate).getYears();\r\n            } else {\r\n                return 0;\r\n            }\r\n\r\n        } catch (Exception e) {\r\n\r\n        }\r\n        return 0;\r\n    }\r\n\r\n\r\n    // Un-Mute audio streams\r\n    public static void unMuteAudioStream(Context context) throws InterruptedException {\r\n        Thread.sleep(500);\r\n\r\n        AudioManager amanager = (AudioManager) ((Activity) context).getSystemService(Context.AUDIO_SERVICE);\r\n        amanager.setStreamMute(AudioManager.STREAM_SYSTEM, false);\r\n\r\n        try {\r\n            amanager.setStreamMute(AudioManager.STREAM_DTMF, false);\r\n        } catch (Exception e) {\r\n        }\r\n        //\r\n        amanager.setStreamMute(AudioManager.STREAM_NOTIFICATION, false);\r\n        amanager.setStreamMute(AudioManager.STREAM_ACCESSIBILITY, false);\r\n\r\n\r\n    }\r\n\r\n    // Mute audio streams\r\n\r\n    public static void muteAudioStream(Context context) {\r\n        AudioManager amanager = (AudioManager) ((Activity) context).getSystemService(Context.AUDIO_SERVICE);\r\n        amanager.setStreamMute(AudioManager.STREAM_SYSTEM, true);\r\n        try {\r\n            amanager.setStreamMute(AudioManager.STREAM_DTMF, true);\r\n        } catch (Exception e) {\r\n        }\r\n        amanager.setStreamMute(AudioManager.STREAM_NOTIFICATION, true);\r\n        amanager.setStreamMute(AudioManager.STREAM_ACCESSIBILITY, true);\r\n\r\n    }\r\n\r\n    public void setStatusBarTransparent(Context mContext) {\r\n        Window window = ((Activity) mContext).getWindow();\r\n        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\r\n        window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);\r\n\r\n        View decorView = window.getDecorView();\r\n        decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);\r\n        window.setStatusBarColor(Color.TRANSPARENT);\r\n    }\r\n\r\n\r\n    public static String numberToWords(long n) {\r\n        long limit = 1000000000000L, curr_hun, t = 0;\r\n\r\n        // If zero return zero\r\n        if (n == 0)\r\n            return (\"Zero\");\r\n\r\n        // Array to store the powers of 10\r\n        String multiplier[] = {\"\", \"Trillion\", \"Billion\",\r\n                \"Million\", \"Thousand\"};\r\n\r\n        // Array to store numbers till 20\r\n        String first_twenty[] = {\r\n                \"\", \"One\", \"Two\", \"Three\",\r\n                \"Four\", \"Five\", \"Six\", \"Seven\",\r\n                \"Eight\", \"Nine\", \"Ten\", \"Eleven\",\r\n                \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\",\r\n                \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"\r\n        };\r\n\r\n        // Array to store multiples of ten\r\n        String tens[] = {\"\", \"Twenty\", \"Thirty\",\r\n                \"Forty\", \"Fifty\", \"Sixty\",\r\n                \"Seventy\", \"Eighty\", \"Ninety\"};\r\n\r\n        // If number is less than 20, return without any\r\n        // further computation\r\n        if (n < 20L)\r\n            return (first_twenty[(int) n]);\r\n        String answer = \"\";\r\n        for (long i = n; i > 0; i %= limit, limit /= 1000) {\r\n            curr_hun = i / limit;\r\n\r\n            // It might be possible that the current\r\n            // multiplier is bigger than your number\r\n            while (curr_hun == 0) {\r\n\r\n                // Set i as the remainder obtained when n\r\n                // was divided my the limit\r\n                i %= limit;\r\n\r\n                // Divide the limit by 1000, shifts the\r\n                // multiplier\r\n                limit /= 1000;\r\n\r\n                // Get the current value in hundereds, as\r\n                // English system works in hundreds\r\n                curr_hun = i / limit;\r\n\r\n                // Shift the multiplier\r\n                ++t;\r\n            }\r\n\r\n            // If current hundered is greater that 99, Add\r\n            // the hundreds' place\r\n            if (curr_hun > 99)\r\n                answer += (first_twenty[(int) curr_hun / 100]\r\n                        + \" Hundred \");\r\n\r\n            // Bring the current hundered to tens\r\n            curr_hun = curr_hun % 100;\r\n\r\n            // If the value in tens belongs to [1,19], add\r\n            // using the first_twenty\r\n            if (curr_hun > 0 && curr_hun < 20)\r\n                answer += (first_twenty[(int) curr_hun] + \" \");\r\n\r\n                // If curr_hun is now a multiple of 10, but not\r\n                // 0 Add the tens' value using the tens array\r\n            else if (curr_hun % 10 == 0 && curr_hun != 0)\r\n                answer += (tens[(int) curr_hun / 10 - 1] + \" \");\r\n\r\n            else if (curr_hun > 20 && curr_hun < 100)\r\n                answer\r\n                        += (tens[(int) curr_hun / 10 - 1] + \" \"\r\n                        + first_twenty[(int) curr_hun % 10]\r\n                        + \" \");\r\n\r\n            // If Multiplier has not become less than 1000,\r\n            // shift it\r\n            if (t < 4)\r\n                answer += (multiplier[(int) ++t] + \" \");\r\n        }\r\n        return (answer);\r\n    }\r\n\r\n\r\n    // Function for unlocking\r\n    public static void updateDbUnlock(GradeDatabase database, String grade, String chapter, String subSub) {\r\n\r\n        List<Grades_data> dbData = new ArrayList<>();\r\n        dbData = database.gradesDao().valus(new SimpleSQLiteQuery(\"SELECT * FROM grades where \" + grade.replaceAll(\" \", \"\").toLowerCase() + \" =1 and chapter LIKE '%\" + chapter + \"%'\"));\r\n        Log.d(\"XXX\", chapter);\r\n        Log.d(\"XXX\", dbData + \"\");\r\n        for (int i = 0; i < dbData.size(); i++) {\r\n            Log.d(\"XXX\", \"updateDbUnlock: called \" + dbData.get(i).chapter.equals(subSub) + subSub);\r\n            if (dbData.get(i).chapter.equals(subSub)) {\r\n                Log.d(\"XXX\", \"updateDbUnlock: if\");\r\n                try {\r\n                    database.gradesDao().updateIsComplete(true, dbData.get(i).chapter);\r\n                    database.gradesDao().update(true, dbData.get(i + 1).chapter);\r\n                    Log.d(\"XXX\", dbData.get(i + 1).chapter);\r\n                    break;\r\n                } catch (Exception e) {\r\n                    Log.e(\"XXX\", e.getMessage());\r\n                    break;\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    public static void updateDbUnlock(GradeDatabase database, String chapter, String subSub) {\r\n\r\n        List<GradeData> dbData = new ArrayList<>();\r\n        dbData = database.gradesDaoUpdated().getSubjectDataNL(chapter);\r\n        Log.d(\"XXX\", chapter);\r\n        Log.d(\"XXX\", dbData + \"\");\r\n        for (int i = 0; i < dbData.size(); i++) {\r\n            Log.d(\"XXX\", \"updateDbUnlock: called \" + dbData.get(i).getChapter_name().equals(subSub) + subSub);\r\n            if (dbData.get(i).getChapter_name().equals(subSub)) {\r\n                Log.d(\"XXX\", \"updateDbUnlock: if\");\r\n                try {\r\n                    database.gradesDaoUpdated().updateIsComplete(true, dbData.get(i).getChapter_name());\r\n                    database.gradesDaoUpdated().update(true, dbData.get(i + 1).getChapter_name());\r\n                    Log.d(\"XXX\", dbData.get(i + 1).getChapter_name());\r\n                    break;\r\n                } catch (Exception e) {\r\n                    Log.e(\"XXX\", e.getMessage());\r\n                    break;\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    // getting first false data\r\n    public static Grades_data getFirstFalseData(GradeDatabase database, String grade, String chapter) {\r\n\r\n        List<Grades_data> dbData = new ArrayList<>();\r\n        dbData = database.gradesDao().valus(new SimpleSQLiteQuery(\"SELECT * FROM grades where \" + grade.replaceAll(\" \", \"\").toLowerCase() + \" =1 and chapter LIKE '%\" + chapter + \"%' AND is_complete=0 LIMIT 1\"));\r\n        Log.i(\"CHAPTER\", chapter);\r\n        Log.i(\"DB_DATA\", dbData + \"\");\r\n        try {\r\n            return dbData.get(0);\r\n        } catch (Exception e) {\r\n\r\n            return null;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public static List<Grades_data> gettingSubSubjectData(GradeDatabase database, String grade, String chapter, boolean is_all_needed) {\r\n\r\n        List<Grades_data> dbData = new ArrayList<>();\r\n        if (is_all_needed)\r\n            dbData = database.gradesDao().valus(new SimpleSQLiteQuery(\"SELECT * FROM grades where \" + grade.replaceAll(\" \", \"\").toLowerCase() + \" =1 and chapter LIKE '%\" + chapter + \"%'\"));\r\n        else\r\n            dbData = database.gradesDao().valus(new SimpleSQLiteQuery(\"SELECT * FROM grades where \" + grade.replaceAll(\" \", \"\").toLowerCase() + \" =1 and chapter LIKE '%\" + chapter + \"%' AND is_complete=1\"));\r\n\r\n        Log.i(\"CHAPTER\", chapter);\r\n        Log.i(\"DB_DATA\", dbData + \"\");\r\n        try {\r\n            return dbData;\r\n        } catch (Exception e) {\r\n\r\n            return null;\r\n        }\r\n\r\n    }\r\n\r\n    public static List<Grades_data> gettingSubSubjectDataNew(GradeDatabase database, String grade, String chapter, boolean is_all_needed) {\r\n\r\n        List<Grades_data> dbData = new ArrayList<>();\r\n        if (is_all_needed)\r\n            dbData = database.gradesDao().valus(new SimpleSQLiteQuery(\"SELECT * FROM grades where \" + grade.replaceAll(\" \", \"\").toLowerCase() + \" =1 and chapter LIKE '%\" + chapter + \"%'\"));\r\n        else\r\n            dbData = database.gradesDao().valus(new SimpleSQLiteQuery(\"SELECT * FROM grades where \" + grade.replaceAll(\" \", \"\").toLowerCase() + \" =1 and chapter LIKE '%\" + chapter + \"%' AND is_complete=1\"));\r\n\r\n        Log.i(\"CHAPTER\", chapter);\r\n        Log.i(\"DB_DATA\", dbData + \"\");\r\n        try {\r\n            return dbData;\r\n        } catch (Exception e) {\r\n\r\n            return null;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public static long gettingCorrectValues(ProgressDataBase progressDataBase, String chapter, Boolean resultType) {\r\n\r\n        long value = 0;\r\n\r\n        if (resultType)\r\n            value = progressDataBase.progressDao().correctValues(new SimpleSQLiteQuery(\"SELECT correct FROM progressM where chapter LIKE '%\" + chapter + \"%'\"));\r\n        else\r\n            value = progressDataBase.progressDao().correctValues(new SimpleSQLiteQuery(\"SELECT wrong FROM progressM where chapter LIKE '%\" + chapter + \"%'\"));\r\n\r\n        Log.i(\"CHAPTER\", chapter);\r\n        Log.i(\"DB_DATA\", value + \"\");\r\n        try {\r\n            return value;\r\n        } catch (Exception e) {\r\n\r\n            return 0;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public static List<ProgressM> checkProgressAvailable(ProgressDataBase db, String subject, String chapter, Date timeStamp, long time_spend, boolean is_data_needed) {\r\n\r\n        List<ProgressM> list = db.progressDao().isAvailable(chapter);\r\n\r\n        if (!is_data_needed) {\r\n            if (list.size() > 0) {\r\n                updateProgressData(db, subject, chapter, time_spend);\r\n            } else {\r\n\r\n                addProgressData(db, subject, chapter, timeStamp, time_spend);\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n\r\n    public static void updateProgressData(ProgressDataBase db, String subject, String chapter, long time_spend) {\r\n\r\n        try {\r\n            db.progressDao().update(time_spend, chapter);\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    public static void addProgressData(ProgressDataBase db, String subject, String chapter, Date timeStamp, long time_spend) {\r\n\r\n        try {\r\n            Date date = new Date();\r\n            SimpleDateFormat formatter = new SimpleDateFormat(\"dd/MM/yyyy\");\r\n            DateFormat timeFormatter = new SimpleDateFormat(\"hh:mm:ss a\");\r\n            long diff = date.getTime() - timeStamp.getTime();\r\n            ProgressM progressM = new ProgressM();\r\n            progressM.correct = 0;\r\n            progressM.time_to_complete = diff;\r\n            progressM.wrong = 0;\r\n            progressM.time = timeFormatter.format(date) + \"\";\r\n            progressM.is_completed = \"Yes\";\r\n            progressM.subject = subject;\r\n            progressM.chapter = chapter;\r\n            progressM.time_spend = time_spend;\r\n            progressM.date = formatter.format(date) + \"\";\r\n            progressM.timestamp = date.getTime();\r\n            db.progressDao().insertNotes(progressM);\r\n\r\n        } catch (Exception e) {\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public static void displayCustomDialog(Context context, String title, String body) {\r\n\r\n        HintDialog hintDialog = new HintDialog(context);\r\n        hintDialog.setCancelable(true);\r\n        hintDialog.setAlertTitle(title);\r\n        hintDialog.setAlertDesciption(body);\r\n\r\n        hintDialog.displayAnim();\r\n        hintDialog.setOnActionListener(viewId -> {\r\n\r\n            switch (viewId.getId()) {\r\n\r\n                case R.id.closeButton:\r\n                    hintDialog.dismiss();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        hintDialog.show();\r\n\r\n    }\r\n\r\n\r\n    public static boolean checkGrade(String grade) {\r\n\r\n\r\n        List<String> grades = new ArrayList();\r\n        grades.add(\"GRADE 1\");\r\n        grades.add(\"GRADE 2\");\r\n        grades.add(\"GRADE 3\");\r\n\r\n        if (grades.contains(grade))\r\n            return true;\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n\r\n    @SuppressLint(\"Range\")\r\n    public static void setEvent(Context context, TextInputLayout textInputLayout) throws ParseException {\r\n\r\n\r\n        Cursor cur = context.getContentResolver().query(CalendarContract.Calendars.CONTENT_URI, null, null, null, null);\r\n        try {\r\n\r\n\r\n            PrefConfig.writeIdInPref(context, textInputLayout.getEditText().getText().toString(), context.getResources().getString(R.string.timer_time));\r\n            SimpleDateFormat formatter = new SimpleDateFormat(\"yyyy/MM/dd HH:mm\");\r\n            SimpleDateFormat dateFormatter = new SimpleDateFormat(\"yyyy/MM/dd\");\r\n            Date currDate = new Date();\r\n            String datetime = dateFormatter.format(currDate) + \" \" + textInputLayout.getEditText().getText().toString().replace(\" \", \"\").split(\"-\")[0];\r\n            String endTime = \"2023/12/31 \" + textInputLayout.getEditText().getText().toString().replace(\" \", \"\").split(\"-\")[1];\r\n            //  String endTime=\"2023/08/12 06:30\";\r\n            var eventID = 0;\r\n            Calendar startCal = Calendar.getInstance();\r\n            startCal.setTime(formatter.parse(datetime));\r\n\r\n            Calendar endCal = Calendar.getInstance();\r\n            endCal.setTime(formatter.parse(endTime));\r\n            var eventdate = startCal.get(Calendar.YEAR) + \"/\" + startCal.get(Calendar.MONTH) + \"/\" + startCal.get(Calendar.DAY_OF_MONTH) + \" \" + startCal.get(Calendar.HOUR_OF_DAY) + \":\" + startCal.get(Calendar.MINUTE);\r\n            Log.e(\"event date\", eventdate);\r\n            // provide CalendarContract.Calendars.CONTENT_URI to\r\n            // ContentResolver to query calendars\r\n\r\n            if (cur.moveToFirst()) {\r\n\r\n                if (isEventInCal(context, eventID + \"\")) {\r\n                    return;\r\n                }\r\n                long calendarID = cur.getLong(cur.getColumnIndex(CalendarContract.Calendars._ID));\r\n                ContentValues eventValues = new ContentValues();\r\n                eventValues.put(CalendarContract.Events.DTSTART, ((startCal.getTimeInMillis())));\r\n                //eventValues.put(CalendarContract.Events.DTEND, ((endCal.getTimeInMillis())));\r\n                eventValues.put(CalendarContract.Events.DURATION, \"+P30M\");\r\n                eventValues.put(CalendarContract.Events.EVENT_TIMEZONE, TimeZone.getDefault().toString());\r\n                eventValues.put(CalendarContract.Events.CALENDAR_ID, calendarID);\r\n                eventValues.put(CalendarContract.Events.TITLE, \"It's time to study!\");\r\n                eventValues.put(CalendarContract.Events.RRULE, \"FREQ=DAILY;COUNT=20;BYDAY=MO,TU,WE,TH,FR;WKST=MO\");\r\n                eventValues.put(CalendarContract.Events.DESCRIPTION, \"Beyondschool is waiting for you, only 5 mins left to see you. Tap the link to open app \\n https://www.beyondschool.live/app\");\r\n                eventValues.put(CalendarContract.Events.ALL_DAY, false);\r\n                eventValues.put(CalendarContract.Events.HAS_ALARM, true);\r\n                eventValues.put(CalendarContract.Events.CUSTOM_APP_PACKAGE, context.getPackageName());\r\n                eventValues.put(CalendarContract.Events.CUSTOM_APP_URI, \"myAppointment://1\");\r\n\r\n                Uri eventUri = context.getContentResolver().insert(CalendarContract.Events.CONTENT_URI, eventValues);\r\n                eventID = (int) ContentUris.parseId(eventUri);\r\n\r\n\r\n                ContentValues reminder = new ContentValues();\r\n                reminder.put(CalendarContract.Reminders.EVENT_ID, eventID);\r\n                reminder.put(CalendarContract.Reminders.MINUTES, 5);\r\n\r\n                reminder.put(CalendarContract.Reminders.METHOD, CalendarContract.Reminders.METHOD_ALERT);\r\n                context.getContentResolver().insert(CalendarContract.Reminders.CONTENT_URI, reminder);\r\n\r\n                Toast.makeText(context, \"Event Added\", Toast.LENGTH_SHORT).show();\r\n                PrefConfig.writeIntInPref(context, (int) eventID, context.getResources().getString(R.string.calender_event_id));\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            Log.i(\"Error_Events\", e.getMessage());\r\n        } finally {\r\n            if (cur != null) {\r\n                cur.close();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public static boolean isEventInCal(Context context, String cal_meeting_id) {\r\n\r\n        Cursor cursor = context.getContentResolver().query(\r\n                Uri.parse(\"content://com.android.calendar/events\"),\r\n                new String[]{\"_id\"}, \" _id = ? \",\r\n                new String[]{cal_meeting_id}, null);\r\n\r\n        if (cursor.moveToFirst()) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/maths/beyond_school_280720220930/utils/UtilityFunctions.java b/app/src/main/java/com/maths/beyond_school_280720220930/utils/UtilityFunctions.java
--- a/app/src/main/java/com/maths/beyond_school_280720220930/utils/UtilityFunctions.java	(revision b40401d29ed89e0bcba3248488be6dbf0a5a82c6)
+++ b/app/src/main/java/com/maths/beyond_school_280720220930/utils/UtilityFunctions.java	(date 1667541394301)
@@ -8,6 +8,7 @@
 import android.content.Context;
 import android.database.Cursor;
 import android.graphics.Color;
+import android.graphics.drawable.Drawable;
 import android.media.AudioManager;
 import android.media.MediaPlayer;
 import android.net.Uri;
@@ -23,9 +24,13 @@
 import android.view.WindowManager;
 import android.widget.Toast;
 
+import androidx.annotation.Nullable;
 import androidx.sqlite.db.SimpleSQLiteQuery;
 
 import com.bumptech.glide.Glide;
+import com.bumptech.glide.load.DataSource;
+import com.bumptech.glide.load.engine.GlideException;
+import com.bumptech.glide.request.target.Target;
 import com.github.twocoffeesoneteam.glidetovectoryou.GlideToVectorYou;
 import com.github.twocoffeesoneteam.glidetovectoryou.GlideToVectorYouListener;
 import com.google.android.material.textfield.TextInputLayout;
@@ -99,24 +104,23 @@
                     })
                     .load(Uri.parse(url), imageView);
         } catch (Exception e) {
-//            Glide.with(imageView.getContext())
-//                    .load(url)
-//                    .timeout(10000)
-//                    .error(R.drawable.cartoon_image_1)
-//                    .listener(new com.bumptech.glide.request.RequestListener<>() {
-//                        @Override
-//                        public boolean onLoadFailed(@Nullable GlideException e, Object model, Target<Drawable> target, boolean isFirstResource) {
-//                            progress.setVisibility(View.GONE);
-//                            return false;
-//                        }
-//
-//                        @Override
-//                        public boolean onResourceReady(Drawable resource, Object model, Target<Drawable> target, DataSource dataSource, boolean isFirstResource) {
-//                            progress.setVisibility(View.GONE);
-//                            return false;
-//                        }
-//                    })
-//                    .into(imageView);
+            Glide.with(imageView.getContext())
+                    .load(url)
+                    .timeout(10000)
+                    .error(R.drawable.cartoon_image_1)
+                    .listener(new com.bumptech.glide.request.RequestListener<>() {
+                        @Override
+                        public boolean onLoadFailed(@Nullable GlideException e, Object model, Target<Drawable> target, boolean isFirstResource) {
+                            progress.setVisibility(View.GONE);
+                            return false;
+                        }
+                        @Override
+                        public boolean onResourceReady(Drawable resource, Object model, Target<Drawable> target, DataSource dataSource, boolean isFirstResource) {
+                            progress.setVisibility(View.GONE);
+                            return false;
+                        }
+                    })
+                    .into(imageView);
             Log.d("XXX", "loadImage: " + e.getMessage());
         }
     }
@@ -1159,16 +1163,16 @@
     }
 
 
-    public static List<ProgressM> checkProgressAvailable(ProgressDataBase db, String subject, String chapter, Date timeStamp, long time_spend, boolean is_data_needed) {
+    public static List<ProgressM> checkProgressAvailable(ProgressDataBase db, String id, String chapter, Date timeStamp, long time_spend, boolean is_data_needed) {
 
         List<ProgressM> list = db.progressDao().isAvailable(chapter);
 
         if (!is_data_needed) {
             if (list.size() > 0) {
-                updateProgressData(db, subject, chapter, time_spend);
+                updateProgressData(db, id, chapter, time_spend);
             } else {
 
-                addProgressData(db, subject, chapter, timeStamp, time_spend);
+                addProgressData(db, id, chapter, timeStamp, time_spend);
             }
         }
         return list;
@@ -1187,7 +1191,7 @@
     }
 
 
-    public static void addProgressData(ProgressDataBase db, String subject, String chapter, Date timeStamp, long time_spend) {
+    public static void addProgressData(ProgressDataBase db, String id, String chapter, Date timeStamp, long time_spend) {
 
         try {
             Date date = new Date();
@@ -1200,7 +1204,7 @@
             progressM.wrong = 0;
             progressM.time = timeFormatter.format(date) + "";
             progressM.is_completed = "Yes";
-            progressM.subject = subject;
+            progressM.sub_id = id;
             progressM.chapter = chapter;
             progressM.time_spend = time_spend;
             progressM.date = formatter.format(date) + "";
Index: app/src/main/java/com/maths/beyond_school_280720220930/ViewCurriculum.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.maths.beyond_school_280720220930;\r\n\r\n\r\nimport static com.maths.beyond_school_280720220930.utils.Constants.EXTRA_TITLE;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.RadioButton;\r\nimport android.widget.RadioGroup;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.content.res.ResourcesCompat;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\n\r\nimport com.maths.beyond_school_280720220930.SP.PrefConfig;\r\nimport com.maths.beyond_school_280720220930.adapters.ChaptersRecyclerAdapter;\r\nimport com.maths.beyond_school_280720220930.database.grade_tables.GradeDatabase;\r\nimport com.maths.beyond_school_280720220930.databinding.ActivityViewCurriculumBinding;\r\nimport com.maths.beyond_school_280720220930.english_activity.grammar.GrammarActivity;\r\nimport com.maths.beyond_school_280720220930.english_activity.spelling.EnglishSpellingActivity;\r\nimport com.maths.beyond_school_280720220930.retrofit.ApiClient;\r\nimport com.maths.beyond_school_280720220930.retrofit.ApiInterface;\r\nimport com.maths.beyond_school_280720220930.retrofit.model.grade.GradeModel;\r\nimport com.maths.beyond_school_280720220930.utils.Constants;\r\nimport com.maths.beyond_school_280720220930.utils.UtilityFunctions;\r\nimport com.maths.beyond_school_280720220930.utils.typeconverters.GradeConverter;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\nimport retrofit2.Retrofit;\r\n\r\npublic class ViewCurriculum extends AppCompatActivity {\r\n\r\n    private static final String TAG = \"ViewCurriculum\";\r\n    private GradeDatabase gradeDatabase;\r\n    private ActivityViewCurriculumBinding binding;\r\n    private ChaptersRecyclerAdapter chaptersRecyclerAdapter;\r\n    private String[] eng;\r\n    private List<String> engChapters;\r\n    private String defaultSubject = \"\";\r\n    private String kidsGrade = \"\";\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        binding = ActivityViewCurriculumBinding.inflate(getLayoutInflater());\r\n        setContentView(binding.getRoot());\r\n        gradeDatabase = GradeDatabase.getDbInstance(this);\r\n        kidsGrade = PrefConfig.readIdInPref(getApplicationContext(), getResources().getString(R.string.kids_grade)).toLowerCase(Locale.ROOT);\r\n\r\n        eng = gradeDatabase.gradesDaoUpdated().getChapterNames();\r\n        binding.gradeInfo.setText(\"For \" + kidsGrade.substring(0, 1).toUpperCase() + kidsGrade.substring(1));\r\n        engChapters = Arrays.asList(eng);\r\n        defaultSubject = eng[0];\r\n\r\n\r\n        try {\r\n            defaultSubject = getIntent().getStringExtra(\"subSubject\");\r\n            Log.d(TAG, \"onCreate: \" + defaultSubject + \",\" + Arrays.binarySearch(eng, defaultSubject) + \",\" + eng[1] + \",\" + eng[0]);\r\n        } catch (Exception e) {\r\n            defaultSubject = eng[0];\r\n        }\r\n\r\n        addRadioButtons();\r\n        // TODO: Radio group should be dynamic\r\n        binding.radioGroup.setOnCheckedChangeListener((group, checkedId) -> {\r\n            RadioButton checkedRadioButton = (RadioButton) group.findViewById(checkedId);\r\n            boolean isChecked = checkedRadioButton.isChecked();\r\n            if (isChecked) {\r\n                setRecyclerViewData(checkedRadioButton.getText().toString().trim());\r\n            }\r\n        });\r\n\r\n        binding.buttonLayout.setOnClickListener(v -> {\r\n            startActivity(new Intent(getApplicationContext(), TabbedHomePage.class));\r\n            finish();\r\n        });\r\n\r\n        //  getNewData();\r\n    }\r\n\r\n\r\n    public void addRadioButtons() {\r\n        binding.radioGroup.setOrientation(LinearLayout.HORIZONTAL);\r\n        //\r\n        for (String st : eng) {\r\n            RadioButton rdbtn = new RadioButton(this);\r\n            RadioGroup.LayoutParams params = new RadioGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n            params.setMargins(10, 15, 10, 15);\r\n            rdbtn.setLayoutParams(params);\r\n            rdbtn.setPadding(15, 20, 15, 20);\r\n            rdbtn.setTypeface(ResourcesCompat.getFont(this, R.font.jellee_roman));\r\n            rdbtn.setTextColor(getResources().getColor(R.color.primary));\r\n            rdbtn.setId(engChapters.indexOf(st));\r\n            rdbtn.setText(st);\r\n            rdbtn.setButtonDrawable(R.color.transparent);\r\n            rdbtn.setBackgroundResource(R.drawable.radio_selector);\r\n            binding.radioGroup.addView(rdbtn);\r\n            rdbtn.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n                    ((RadioGroup) view.getParent()).check(view.getId());\r\n\r\n                }\r\n            });\r\n        }\r\n\r\n        setRecyclerViewData(defaultSubject);\r\n        ((RadioButton) binding.radioGroup.getChildAt(engChapters.indexOf(defaultSubject))).setChecked(true);\r\n    }\r\n\r\n\r\n    private void getNewData() {\r\n        Retrofit retrofit = ApiClient.getClient();\r\n        var api = retrofit.create(ApiInterface.class);\r\n        api.getGradeData(PrefConfig.readIdInPref(this, getResources().getString(R.string.kids_grade)).toLowerCase().replace(\" \", \"\")).enqueue(new retrofit2.Callback<>() {\r\n\r\n\r\n            @Override\r\n            public void onResponse(@NonNull retrofit2.Call<GradeModel> call, @NonNull retrofit2.Response<GradeModel> response) {\r\n                if (response.body() != null) {\r\n\r\n                    Log.d(TAG, \"onResponse: \" + response.code());\r\n                    Log.d(TAG, \"onResponse: \" + response.body().getEnglish().toString());\r\n                    var list = response.body().getEnglish();\r\n                    mapToGradeModel(list);\r\n                } else {\r\n                    Toast.makeText(ViewCurriculum.this, \"Something wrong occurs\", Toast.LENGTH_SHORT).show();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(retrofit2.Call<com.maths.beyond_school_280720220930.retrofit.model.grade.GradeModel> call, Throwable t) {\r\n                Log.e(TAG, \"onFailure: \" + t.getLocalizedMessage());\r\n            }\r\n        });\r\n    }\r\n//\r\n\r\n\r\n    private void setRecyclerViewData(String subject) {\r\n\r\n        binding.contentRecyclerView.setLayoutManager(new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.VERTICAL, false));\r\n        chaptersRecyclerAdapter = new ChaptersRecyclerAdapter(ViewCurriculum.this, gradeData -> {\r\n\r\n//            if (gradeData.isUnlock()) {\r\n                Intent intent;\r\n                Log.d(TAG, \"setRecyclerViewData: \" + gradeData.getRequest());\r\n                if (gradeData.getSubject().equals(\"Spelling_CommonWords\")) {\r\n                    intent = new Intent(this, EnglishSpellingActivity.class);\r\n                    intent.putExtra(Constants.EXTRA_SPELLING_DETAIL, gradeData.getChapter_name());\r\n                } else {\r\n                    intent = new Intent(this, GrammarActivity.class);\r\n                    intent.putExtra(Constants.EXTRA_GRAMMAR_CATEGORY, gradeData.getChapter_name());\r\n                }\r\n                intent.putExtra(Constants.EXTRA_ONLINE_FLAG, true);\r\n                intent.putExtra(EXTRA_TITLE, gradeData.getSubject());\r\n                startActivity(intent);\r\n\r\n//            } else {\r\n//\r\n//                UtilityFunctions.displayCustomDialog(ViewCurriculum.this, \"Chapter Locked\", \"Hey, Please complete previous level to unlock.\");\r\n//            }\r\n        });\r\n        binding.contentRecyclerView.setAdapter(chaptersRecyclerAdapter);\r\n        getLiveData(subject);\r\n    }\r\n\r\n    private void getLiveData(String subject) {\r\n        gradeDatabase.gradesDaoUpdated().getSubjectData(subject).observe(this, gradeData -> {\r\n            chaptersRecyclerAdapter.submitList(gradeData);\r\n            if (gradeData.size() == 0) binding.noDataLayout.setVisibility(View.VISIBLE);\r\n            else binding.noDataLayout.setVisibility(View.GONE);\r\n        });\r\n    }\r\n\r\n    private void mapToGradeModel(List<GradeModel.EnglishModel> list) {\r\n        list.forEach(subject -> {\r\n            var mapper = new GradeConverter(subject.getSubject());\r\n            var chapterList = mapper.mapToList(subject.getChapters());\r\n            gradeDatabase.gradesDaoUpdated().insertNotes(chapterList);\r\n        });\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/maths/beyond_school_280720220930/ViewCurriculum.java b/app/src/main/java/com/maths/beyond_school_280720220930/ViewCurriculum.java
--- a/app/src/main/java/com/maths/beyond_school_280720220930/ViewCurriculum.java	(revision b40401d29ed89e0bcba3248488be6dbf0a5a82c6)
+++ b/app/src/main/java/com/maths/beyond_school_280720220930/ViewCurriculum.java	(date 1667540857682)
@@ -163,6 +163,7 @@
                     intent.putExtra(Constants.EXTRA_GRAMMAR_CATEGORY, gradeData.getChapter_name());
                 }
                 intent.putExtra(Constants.EXTRA_ONLINE_FLAG, true);
+                intent.putExtra(Constants.EXTRA_CATEGORY_ID, gradeData.getId());
                 intent.putExtra(EXTRA_TITLE, gradeData.getSubject());
                 startActivity(intent);
 
Index: app/src/main/java/com/maths/beyond_school_280720220930/adapters/ProgressAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.maths.beyond_school_280720220930.adapters;\r\n\r\nimport android.content.Context;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.maths.beyond_school_280720220930.R;\r\nimport com.maths.beyond_school_280720220930.database.process.ProgressM;\r\nimport com.maths.beyond_school_280720220930.utils.UtilityFunctions;\r\nimport com.maths.beyond_school_280720220930.model.ProgressTableWise;\r\n\r\nimport java.util.List;\r\n\r\npublic class ProgressAdapter extends RecyclerView.Adapter<ProgressAdapter.ProgressViewHolder>{\r\n\r\n    List<ProgressM> list ;\r\n    List<ProgressTableWise>  listTableWise;\r\n    String val=\"wt\";\r\n    Context context;\r\n\r\n    public ProgressAdapter(Context context) {\r\n        this.context = context;\r\n    }\r\n\r\n    public void setNotesList(List<ProgressM> list){\r\n\r\n        this.list=list;\r\n        notifyDataSetChanged();\r\n    }\r\n\r\n    public void setNotesList(List<ProgressTableWise> list,String val){\r\n\r\n        this.listTableWise=list;\r\n        this.val=val;\r\n        notifyDataSetChanged();\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public ProgressViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n\r\n        View view= LayoutInflater.from(parent.getContext()).inflate(R.layout.progress_card_layout,parent, false);\r\n        ProgressAdapter.ProgressViewHolder progressViewHolder=new ProgressAdapter.ProgressViewHolder(view);\r\n        return progressViewHolder;\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull ProgressViewHolder holder, int position) {\r\n\r\n        if (val.equals(\"wt\")){\r\n            holder.tableNumber.setText(list.get(position).table);\r\n            holder.desc1.setText(list.get(position).date);\r\n            holder.desc2.setText(\"Used at: \"+list.get(position).time);\r\n            holder.desc3.setText(new UtilityFunctions().formatTime(list.get(position).time_to_complete));\r\n            if ((list.get(position).correct+list.get(position).wrong)==0){\r\n                holder.progressLayout.setVisibility(View.GONE);\r\n            }\r\n            holder.result.setText(list.get(position).correct+\"/\"+(list.get(position).correct+list.get(position).wrong));\r\n            holder.resultProgress.setMax((int)(list.get(position).correct+list.get(position).wrong));\r\n            holder.resultProgress.setProgress((int)list.get(position).correct);\r\n        }\r\n        else{\r\n\r\n            holder.tableNumber.setText(listTableWise.get(position).getTable());\r\n            holder.desc1.setText(val);\r\n            holder.desc2.setText(listTableWise.get(position).getCount()+\"  times used.\");\r\n            holder.desc3.setText(new UtilityFunctions().formatTime(listTableWise.get(position).getTotal_time()));\r\n\r\n            if ((listTableWise.get(position).getTotal_correct()+ listTableWise.get(position).getTotal_wrong())== 0){\r\n                holder.progressLayout.setVisibility(View.GONE);\r\n            }\r\n\r\n            holder.result.setText(listTableWise.get(position).getTotal_correct()+\"/\"+(listTableWise.get(position).getTotal_correct()+\r\n                    listTableWise.get(position).getTotal_wrong()));\r\n            holder.resultProgress.setMax((int)(listTableWise.get(position).getTotal_correct()+ listTableWise.get(position).getTotal_wrong()));\r\n            holder.resultProgress.setProgress((int)listTableWise.get(position).getTotal_correct());\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n\r\n        try{\r\n            if (val.equals(\"wt\"))\r\n                return list.size();\r\n            else\r\n                return listTableWise.size();\r\n        }catch (Exception e){\r\n\r\n\r\n        }\r\n        return 0;\r\n\r\n    }\r\n\r\n    protected class ProgressViewHolder extends RecyclerView.ViewHolder {\r\n\r\n        TextView tableNumber,desc1,desc2,desc3,result;\r\n        ProgressBar resultProgress;\r\n        RelativeLayout progressLayout;\r\n        View mView;\r\n        public ProgressViewHolder(@NonNull View itemView) {\r\n            super(itemView);\r\n\r\n            mView=itemView;\r\n\r\n            tableNumber=mView.findViewById(R.id.numberTextView);\r\n           desc1=mView.findViewById(R.id.descriptionTextView1);\r\n           desc2=mView.findViewById(R.id.descriptionTextView2);\r\n           desc3=mView.findViewById(R.id.descriptionTextView3);\r\n           result=mView.findViewById(R.id.result);\r\n           progressLayout=mView.findViewById(R.id.progressCircle);\r\n           resultProgress=mView.findViewById(R.id.progressResult);\r\n\r\n\r\n\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/maths/beyond_school_280720220930/adapters/ProgressAdapter.java b/app/src/main/java/com/maths/beyond_school_280720220930/adapters/ProgressAdapter.java
--- a/app/src/main/java/com/maths/beyond_school_280720220930/adapters/ProgressAdapter.java	(revision b40401d29ed89e0bcba3248488be6dbf0a5a82c6)
+++ b/app/src/main/java/com/maths/beyond_school_280720220930/adapters/ProgressAdapter.java	(date 1667541430817)
@@ -56,7 +56,7 @@
     public void onBindViewHolder(@NonNull ProgressViewHolder holder, int position) {
 
         if (val.equals("wt")){
-            holder.tableNumber.setText(list.get(position).table);
+          //  holder.tableNumber.setText(list.get(position).table);
             holder.desc1.setText(list.get(position).date);
             holder.desc2.setText("Used at: "+list.get(position).time);
             holder.desc3.setText(new UtilityFunctions().formatTime(list.get(position).time_to_complete));
